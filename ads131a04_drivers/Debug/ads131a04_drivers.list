
ads131a04_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005448  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080056e8  080056e8  000066e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005798  08005798  00006798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080057a0  080057a0  000067a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080057a4  080057a4  000067a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  080057a8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000022c  2400006c  08005814  0000706c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000298  08005814  00007298  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c83e  00000000  00000000  0000709a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002082  00000000  00000000  000138d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a50  00000000  00000000  00015960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000079c  00000000  00000000  000163b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036bde  00000000  00000000  00016b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e153  00000000  00000000  0004d72a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015568d  00000000  00000000  0005b87d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b0f0a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003124  00000000  00000000  001b0f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  001b4074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080056d0 	.word	0x080056d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	080056d0 	.word	0x080056d0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08a      	sub	sp, #40	@ 0x28
 8000384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 0314 	add.w	r3, r7, #20
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000396:	4b48      	ldr	r3, [pc, #288]	@ (80004b8 <MX_GPIO_Init+0x138>)
 8000398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800039c:	4a46      	ldr	r2, [pc, #280]	@ (80004b8 <MX_GPIO_Init+0x138>)
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80003a6:	4b44      	ldr	r3, [pc, #272]	@ (80004b8 <MX_GPIO_Init+0x138>)
 80003a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003ac:	f003 0301 	and.w	r3, r3, #1
 80003b0:	613b      	str	r3, [r7, #16]
 80003b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b4:	4b40      	ldr	r3, [pc, #256]	@ (80004b8 <MX_GPIO_Init+0x138>)
 80003b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003ba:	4a3f      	ldr	r2, [pc, #252]	@ (80004b8 <MX_GPIO_Init+0x138>)
 80003bc:	f043 0302 	orr.w	r3, r3, #2
 80003c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80003c4:	4b3c      	ldr	r3, [pc, #240]	@ (80004b8 <MX_GPIO_Init+0x138>)
 80003c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003ca:	f003 0302 	and.w	r3, r3, #2
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80003d2:	4b39      	ldr	r3, [pc, #228]	@ (80004b8 <MX_GPIO_Init+0x138>)
 80003d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003d8:	4a37      	ldr	r2, [pc, #220]	@ (80004b8 <MX_GPIO_Init+0x138>)
 80003da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80003e2:	4b35      	ldr	r3, [pc, #212]	@ (80004b8 <MX_GPIO_Init+0x138>)
 80003e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003f0:	4b31      	ldr	r3, [pc, #196]	@ (80004b8 <MX_GPIO_Init+0x138>)
 80003f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003f6:	4a30      	ldr	r2, [pc, #192]	@ (80004b8 <MX_GPIO_Init+0x138>)
 80003f8:	f043 0310 	orr.w	r3, r3, #16
 80003fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000400:	4b2d      	ldr	r3, [pc, #180]	@ (80004b8 <MX_GPIO_Init+0x138>)
 8000402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000406:	f003 0310 	and.w	r3, r3, #16
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	2110      	movs	r1, #16
 8000412:	482a      	ldr	r0, [pc, #168]	@ (80004bc <MX_GPIO_Init+0x13c>)
 8000414:	f000 ffc2 	bl	800139c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800041e:	4828      	ldr	r0, [pc, #160]	@ (80004c0 <MX_GPIO_Init+0x140>)
 8000420:	f000 ffbc 	bl	800139c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2102      	movs	r1, #2
 8000428:	4826      	ldr	r0, [pc, #152]	@ (80004c4 <MX_GPIO_Init+0x144>)
 800042a:	f000 ffb7 	bl	800139c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800042e:	2310      	movs	r3, #16
 8000430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000432:	2301      	movs	r3, #1
 8000434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000436:	2300      	movs	r3, #0
 8000438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043a:	2300      	movs	r3, #0
 800043c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043e:	f107 0314 	add.w	r3, r7, #20
 8000442:	4619      	mov	r1, r3
 8000444:	481d      	ldr	r0, [pc, #116]	@ (80004bc <MX_GPIO_Init+0x13c>)
 8000446:	f000 fdf9 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800044a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800044e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000450:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000456:	2300      	movs	r3, #0
 8000458:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800045a:	f107 0314 	add.w	r3, r7, #20
 800045e:	4619      	mov	r1, r3
 8000460:	4819      	ldr	r0, [pc, #100]	@ (80004c8 <MX_GPIO_Init+0x148>)
 8000462:	f000 fdeb 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000466:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800046a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046c:	2301      	movs	r3, #1
 800046e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	2300      	movs	r3, #0
 8000472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000474:	2300      	movs	r3, #0
 8000476:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000478:	f107 0314 	add.w	r3, r7, #20
 800047c:	4619      	mov	r1, r3
 800047e:	4810      	ldr	r0, [pc, #64]	@ (80004c0 <MX_GPIO_Init+0x140>)
 8000480:	f000 fddc 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000484:	2302      	movs	r3, #2
 8000486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000488:	2301      	movs	r3, #1
 800048a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000490:	2302      	movs	r3, #2
 8000492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000494:	f107 0314 	add.w	r3, r7, #20
 8000498:	4619      	mov	r1, r3
 800049a:	480a      	ldr	r0, [pc, #40]	@ (80004c4 <MX_GPIO_Init+0x144>)
 800049c:	f000 fdce 	bl	800103c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2100      	movs	r1, #0
 80004a4:	2028      	movs	r0, #40	@ 0x28
 80004a6:	f000 fd1c 	bl	8000ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004aa:	2028      	movs	r0, #40	@ 0x28
 80004ac:	f000 fd33 	bl	8000f16 <HAL_NVIC_EnableIRQ>

}
 80004b0:	bf00      	nop
 80004b2:	3728      	adds	r7, #40	@ 0x28
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	58024400 	.word	0x58024400
 80004bc:	58020000 	.word	0x58020000
 80004c0:	58021800 	.word	0x58021800
 80004c4:	58021000 	.word	0x58021000
 80004c8:	58020400 	.word	0x58020400

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80004d0:	f000 f888 	bl	80005e4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fb68 	bl	8000ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f808 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f7ff ff50 	bl	8000380 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004e0:	f000 f8b2 	bl	8000648 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  StartExtADC();
 80004e4:	f004 f91e 	bl	8004724 <StartExtADC>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <main+0x1c>

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b09c      	sub	sp, #112	@ 0x70
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004f6:	224c      	movs	r2, #76	@ 0x4c
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f004 fa85 	bl	8004a0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	2220      	movs	r2, #32
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f004 fa7f 	bl	8004a0a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800050c:	2002      	movs	r0, #2
 800050e:	f000 ff93 	bl	8001438 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000512:	2300      	movs	r3, #0
 8000514:	603b      	str	r3, [r7, #0]
 8000516:	4b31      	ldr	r3, [pc, #196]	@ (80005dc <SystemClock_Config+0xf0>)
 8000518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800051a:	4a30      	ldr	r2, [pc, #192]	@ (80005dc <SystemClock_Config+0xf0>)
 800051c:	f023 0301 	bic.w	r3, r3, #1
 8000520:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000522:	4b2e      	ldr	r3, [pc, #184]	@ (80005dc <SystemClock_Config+0xf0>)
 8000524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	4b2c      	ldr	r3, [pc, #176]	@ (80005e0 <SystemClock_Config+0xf4>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000534:	4a2a      	ldr	r2, [pc, #168]	@ (80005e0 <SystemClock_Config+0xf4>)
 8000536:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b28      	ldr	r3, [pc, #160]	@ (80005e0 <SystemClock_Config+0xf4>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000544:	603b      	str	r3, [r7, #0]
 8000546:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000548:	bf00      	nop
 800054a:	4b25      	ldr	r3, [pc, #148]	@ (80005e0 <SystemClock_Config+0xf4>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000556:	d1f8      	bne.n	800054a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000558:	2302      	movs	r3, #2
 800055a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800055c:	2301      	movs	r3, #1
 800055e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000560:	2340      	movs	r3, #64	@ 0x40
 8000562:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000564:	2302      	movs	r3, #2
 8000566:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000568:	2300      	movs	r3, #0
 800056a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 800056c:	2320      	movs	r3, #32
 800056e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 129;
 8000570:	2381      	movs	r3, #129	@ 0x81
 8000572:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000574:	2302      	movs	r3, #2
 8000576:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000578:	2306      	movs	r3, #6
 800057a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800057c:	2302      	movs	r3, #2
 800057e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000580:	2304      	movs	r3, #4
 8000582:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000584:	2300      	movs	r3, #0
 8000586:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000590:	4618      	mov	r0, r3
 8000592:	f000 ff8b 	bl	80014ac <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800059c:	f000 f84e 	bl	800063c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a0:	233f      	movs	r3, #63	@ 0x3f
 80005a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2101      	movs	r1, #1
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 fbcb 	bl	8001d60 <HAL_RCC_ClockConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80005d0:	f000 f834 	bl	800063c <Error_Handler>
  }
}
 80005d4:	bf00      	nop
 80005d6:	3770      	adds	r7, #112	@ 0x70
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	58000400 	.word	0x58000400
 80005e0:	58024800 	.word	0x58024800

080005e4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80005f6:	f000 fca9 	bl	8000f4c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80005fa:	2301      	movs	r3, #1
 80005fc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80005fe:	2300      	movs	r3, #0
 8000600:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000606:	231f      	movs	r3, #31
 8000608:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800060a:	2387      	movs	r3, #135	@ 0x87
 800060c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800060e:	2300      	movs	r3, #0
 8000610:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000612:	2300      	movs	r3, #0
 8000614:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000616:	2301      	movs	r3, #1
 8000618:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800061a:	2301      	movs	r3, #1
 800061c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800061e:	2300      	movs	r3, #0
 8000620:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000622:	2300      	movs	r3, #0
 8000624:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000626:	463b      	mov	r3, r7
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fcc7 	bl	8000fbc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800062e:	2004      	movs	r0, #4
 8000630:	f000 fca4 	bl	8000f7c <HAL_MPU_Enable>

}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <Error_Handler+0x8>

08000648 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800064c:	4b28      	ldr	r3, [pc, #160]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 800064e:	4a29      	ldr	r2, [pc, #164]	@ (80006f4 <MX_SPI1_Init+0xac>)
 8000650:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000652:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 8000654:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000658:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800065a:	4b25      	ldr	r3, [pc, #148]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000660:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 8000662:	2207      	movs	r2, #7
 8000664:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000666:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800066c:	4b20      	ldr	r3, [pc, #128]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 800066e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000672:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000674:	4b1e      	ldr	r3, [pc, #120]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 8000676:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800067a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800067c:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 800067e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000682:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000684:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800068a:	4b19      	ldr	r3, [pc, #100]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 800068c:	2200      	movs	r2, #0
 800068e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000690:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 8000692:	2200      	movs	r2, #0
 8000694:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000696:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 8000698:	2200      	movs	r2, #0
 800069a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800069c:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 800069e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80006a4:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80006c8:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <MX_SPI1_Init+0xa8>)
 80006dc:	f003 f9de 	bl	8003a9c <HAL_SPI_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80006e6:	f7ff ffa9 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	24000088 	.word	0x24000088
 80006f4:	40013000 	.word	0x40013000

080006f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b0bc      	sub	sp, #240	@ 0xf0
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000710:	f107 0318 	add.w	r3, r7, #24
 8000714:	22c0      	movs	r2, #192	@ 0xc0
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f004 f976 	bl	8004a0a <memset>
  if(spiHandle->Instance==SPI1)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a38      	ldr	r2, [pc, #224]	@ (8000804 <HAL_SPI_MspInit+0x10c>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d168      	bne.n	80007fa <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000728:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800072c:	f04f 0300 	mov.w	r3, #0
 8000730:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000734:	2300      	movs	r3, #0
 8000736:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000738:	f107 0318 	add.w	r3, r7, #24
 800073c:	4618      	mov	r0, r3
 800073e:	f001 fe3f 	bl	80023c0 <HAL_RCCEx_PeriphCLKConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000748:	f7ff ff78 	bl	800063c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800074c:	4b2e      	ldr	r3, [pc, #184]	@ (8000808 <HAL_SPI_MspInit+0x110>)
 800074e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000752:	4a2d      	ldr	r2, [pc, #180]	@ (8000808 <HAL_SPI_MspInit+0x110>)
 8000754:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000758:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800075c:	4b2a      	ldr	r3, [pc, #168]	@ (8000808 <HAL_SPI_MspInit+0x110>)
 800075e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000762:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b27      	ldr	r3, [pc, #156]	@ (8000808 <HAL_SPI_MspInit+0x110>)
 800076c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000770:	4a25      	ldr	r2, [pc, #148]	@ (8000808 <HAL_SPI_MspInit+0x110>)
 8000772:	f043 0301 	orr.w	r3, r3, #1
 8000776:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800077a:	4b23      	ldr	r3, [pc, #140]	@ (8000808 <HAL_SPI_MspInit+0x110>)
 800077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000788:	4b1f      	ldr	r3, [pc, #124]	@ (8000808 <HAL_SPI_MspInit+0x110>)
 800078a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800078e:	4a1e      	ldr	r2, [pc, #120]	@ (8000808 <HAL_SPI_MspInit+0x110>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <HAL_SPI_MspInit+0x110>)
 800079a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80007a6:	2360      	movs	r3, #96	@ 0x60
 80007a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007be:	2305      	movs	r3, #5
 80007c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80007c8:	4619      	mov	r1, r3
 80007ca:	4810      	ldr	r0, [pc, #64]	@ (800080c <HAL_SPI_MspInit+0x114>)
 80007cc:	f000 fc36 	bl	800103c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007d0:	2320      	movs	r3, #32
 80007d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007e8:	2305      	movs	r3, #5
 80007ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80007f2:	4619      	mov	r1, r3
 80007f4:	4806      	ldr	r0, [pc, #24]	@ (8000810 <HAL_SPI_MspInit+0x118>)
 80007f6:	f000 fc21 	bl	800103c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007fa:	bf00      	nop
 80007fc:	37f0      	adds	r7, #240	@ 0xf0
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40013000 	.word	0x40013000
 8000808:	58024400 	.word	0x58024400
 800080c:	58020000 	.word	0x58020000
 8000810:	58020400 	.word	0x58020400

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <HAL_MspInit+0x30>)
 800081c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000820:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <HAL_MspInit+0x30>)
 8000822:	f043 0302 	orr.w	r3, r3, #2
 8000826:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <HAL_MspInit+0x30>)
 800082c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000830:	f003 0302 	and.w	r3, r3, #2
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	58024400 	.word	0x58024400

08000848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <NMI_Handler+0x4>

08000850 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <HardFault_Handler+0x4>

08000858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <MemManage_Handler+0x4>

08000860 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <UsageFault_Handler+0x4>

08000870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089e:	f000 f9f5 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80008aa:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80008ae:	f000 fda8 	bl	8001402 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  return 1;
 80008ba:	2301      	movs	r3, #1
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <_kill>:

int _kill(int pid, int sig)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
 80008ce:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80008d0:	f004 f8ea 	bl	8004aa8 <__errno>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2216      	movs	r2, #22
 80008d8:	601a      	str	r2, [r3, #0]
  return -1;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <_exit>:

void _exit (int status)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80008ee:	f04f 31ff 	mov.w	r1, #4294967295
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff ffe7 	bl	80008c6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <_exit+0x12>

080008fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	e00a      	b.n	8000924 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800090e:	f3af 8000 	nop.w
 8000912:	4601      	mov	r1, r0
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	1c5a      	adds	r2, r3, #1
 8000918:	60ba      	str	r2, [r7, #8]
 800091a:	b2ca      	uxtb	r2, r1
 800091c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	3301      	adds	r3, #1
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697a      	ldr	r2, [r7, #20]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	429a      	cmp	r2, r3
 800092a:	dbf0      	blt.n	800090e <_read+0x12>
  }

  return len;
 800092c:	687b      	ldr	r3, [r7, #4]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b086      	sub	sp, #24
 800093a:	af00      	add	r7, sp, #0
 800093c:	60f8      	str	r0, [r7, #12]
 800093e:	60b9      	str	r1, [r7, #8]
 8000940:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
 8000946:	e009      	b.n	800095c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	60ba      	str	r2, [r7, #8]
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	3301      	adds	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	429a      	cmp	r2, r3
 8000962:	dbf1      	blt.n	8000948 <_write+0x12>
  }
  return len;
 8000964:	687b      	ldr	r3, [r7, #4]
}
 8000966:	4618      	mov	r0, r3
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <_close>:

int _close(int file)
{
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
}
 800097a:	4618      	mov	r0, r3
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000996:	605a      	str	r2, [r3, #4]
  return 0;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <_isatty>:

int _isatty(int file)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
	...

080009d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e0:	4a14      	ldr	r2, [pc, #80]	@ (8000a34 <_sbrk+0x5c>)
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <_sbrk+0x60>)
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009ec:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <_sbrk+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d102      	bne.n	80009fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f4:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <_sbrk+0x64>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	@ (8000a40 <_sbrk+0x68>)
 80009f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fa:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <_sbrk+0x64>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d207      	bcs.n	8000a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a08:	f004 f84e 	bl	8004aa8 <__errno>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	220c      	movs	r2, #12
 8000a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	e009      	b.n	8000a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a18:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <_sbrk+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <_sbrk+0x64>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	4a05      	ldr	r2, [pc, #20]	@ (8000a3c <_sbrk+0x64>)
 8000a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	24080000 	.word	0x24080000
 8000a38:	00000400 	.word	0x00000400
 8000a3c:	24000110 	.word	0x24000110
 8000a40:	24000298 	.word	0x24000298

08000a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a48:	4b37      	ldr	r3, [pc, #220]	@ (8000b28 <SystemInit+0xe4>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a4e:	4a36      	ldr	r2, [pc, #216]	@ (8000b28 <SystemInit+0xe4>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a58:	4b34      	ldr	r3, [pc, #208]	@ (8000b2c <SystemInit+0xe8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f003 030f 	and.w	r3, r3, #15
 8000a60:	2b06      	cmp	r3, #6
 8000a62:	d807      	bhi.n	8000a74 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a64:	4b31      	ldr	r3, [pc, #196]	@ (8000b2c <SystemInit+0xe8>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f023 030f 	bic.w	r3, r3, #15
 8000a6c:	4a2f      	ldr	r2, [pc, #188]	@ (8000b2c <SystemInit+0xe8>)
 8000a6e:	f043 0307 	orr.w	r3, r3, #7
 8000a72:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a74:	4b2e      	ldr	r3, [pc, #184]	@ (8000b30 <SystemInit+0xec>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a2d      	ldr	r2, [pc, #180]	@ (8000b30 <SystemInit+0xec>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a80:	4b2b      	ldr	r3, [pc, #172]	@ (8000b30 <SystemInit+0xec>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a86:	4b2a      	ldr	r3, [pc, #168]	@ (8000b30 <SystemInit+0xec>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4929      	ldr	r1, [pc, #164]	@ (8000b30 <SystemInit+0xec>)
 8000a8c:	4b29      	ldr	r3, [pc, #164]	@ (8000b34 <SystemInit+0xf0>)
 8000a8e:	4013      	ands	r3, r2
 8000a90:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a92:	4b26      	ldr	r3, [pc, #152]	@ (8000b2c <SystemInit+0xe8>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f003 0308 	and.w	r3, r3, #8
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d007      	beq.n	8000aae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a9e:	4b23      	ldr	r3, [pc, #140]	@ (8000b2c <SystemInit+0xe8>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f023 030f 	bic.w	r3, r3, #15
 8000aa6:	4a21      	ldr	r2, [pc, #132]	@ (8000b2c <SystemInit+0xe8>)
 8000aa8:	f043 0307 	orr.w	r3, r3, #7
 8000aac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aae:	4b20      	ldr	r3, [pc, #128]	@ (8000b30 <SystemInit+0xec>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b30 <SystemInit+0xec>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aba:	4b1d      	ldr	r3, [pc, #116]	@ (8000b30 <SystemInit+0xec>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <SystemInit+0xec>)
 8000ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8000b38 <SystemInit+0xf4>)
 8000ac4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <SystemInit+0xec>)
 8000ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8000b3c <SystemInit+0xf8>)
 8000aca:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000acc:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <SystemInit+0xec>)
 8000ace:	4a1c      	ldr	r2, [pc, #112]	@ (8000b40 <SystemInit+0xfc>)
 8000ad0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <SystemInit+0xec>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <SystemInit+0xec>)
 8000ada:	4a19      	ldr	r2, [pc, #100]	@ (8000b40 <SystemInit+0xfc>)
 8000adc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ade:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <SystemInit+0xec>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <SystemInit+0xec>)
 8000ae6:	4a16      	ldr	r2, [pc, #88]	@ (8000b40 <SystemInit+0xfc>)
 8000ae8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <SystemInit+0xec>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <SystemInit+0xec>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0e      	ldr	r2, [pc, #56]	@ (8000b30 <SystemInit+0xec>)
 8000af6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000afa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <SystemInit+0xec>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <SystemInit+0x100>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <SystemInit+0x104>)
 8000b08:	4013      	ands	r3, r2
 8000b0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b0e:	d202      	bcs.n	8000b16 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <SystemInit+0x108>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <SystemInit+0x10c>)
 8000b18:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b1c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00
 8000b2c:	52002000 	.word	0x52002000
 8000b30:	58024400 	.word	0x58024400
 8000b34:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b38:	02020200 	.word	0x02020200
 8000b3c:	01ff0000 	.word	0x01ff0000
 8000b40:	01010280 	.word	0x01010280
 8000b44:	5c001000 	.word	0x5c001000
 8000b48:	ffff0000 	.word	0xffff0000
 8000b4c:	51008108 	.word	0x51008108
 8000b50:	52004000 	.word	0x52004000

08000b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b58:	f7ff ff74 	bl	8000a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b5c:	480c      	ldr	r0, [pc, #48]	@ (8000b90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b5e:	490d      	ldr	r1, [pc, #52]	@ (8000b94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b60:	4a0d      	ldr	r2, [pc, #52]	@ (8000b98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b64:	e002      	b.n	8000b6c <LoopCopyDataInit>

08000b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6a:	3304      	adds	r3, #4

08000b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b70:	d3f9      	bcc.n	8000b66 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b72:	4a0a      	ldr	r2, [pc, #40]	@ (8000b9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ba0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b78:	e001      	b.n	8000b7e <LoopFillZerobss>

08000b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b7c:	3204      	adds	r2, #4

08000b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b80:	d3fb      	bcc.n	8000b7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b82:	f003 ff97 	bl	8004ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b86:	f7ff fca1 	bl	80004cc <main>
  bx  lr
 8000b8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b8c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b90:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b94:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000b98:	080057a8 	.word	0x080057a8
  ldr r2, =_sbss
 8000b9c:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000ba0:	24000298 	.word	0x24000298

08000ba4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC3_IRQHandler>
	...

08000ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bae:	2003      	movs	r0, #3
 8000bb0:	f000 f98c 	bl	8000ecc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bb4:	f001 fa8a 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <HAL_Init+0x68>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	0a1b      	lsrs	r3, r3, #8
 8000bc0:	f003 030f 	and.w	r3, r3, #15
 8000bc4:	4913      	ldr	r1, [pc, #76]	@ (8000c14 <HAL_Init+0x6c>)
 8000bc6:	5ccb      	ldrb	r3, [r1, r3]
 8000bc8:	f003 031f 	and.w	r3, r3, #31
 8000bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <HAL_Init+0x68>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	4a0e      	ldr	r2, [pc, #56]	@ (8000c14 <HAL_Init+0x6c>)
 8000bdc:	5cd3      	ldrb	r3, [r2, r3]
 8000bde:	f003 031f 	and.w	r3, r3, #31
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	fa22 f303 	lsr.w	r3, r2, r3
 8000be8:	4a0b      	ldr	r2, [pc, #44]	@ (8000c18 <HAL_Init+0x70>)
 8000bea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bec:	4a0b      	ldr	r2, [pc, #44]	@ (8000c1c <HAL_Init+0x74>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf2:	200f      	movs	r0, #15
 8000bf4:	f000 f814 	bl	8000c20 <HAL_InitTick>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e002      	b.n	8000c08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c02:	f7ff fe07 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	58024400 	.word	0x58024400
 8000c14:	08005708 	.word	0x08005708
 8000c18:	24000004 	.word	0x24000004
 8000c1c:	24000000 	.word	0x24000000

08000c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c28:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <HAL_InitTick+0x60>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d101      	bne.n	8000c34 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e021      	b.n	8000c78 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c34:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <HAL_InitTick+0x64>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <HAL_InitTick+0x60>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f971 	bl	8000f32 <HAL_SYSTICK_Config>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00e      	b.n	8000c78 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d80a      	bhi.n	8000c76 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f000 f93b 	bl	8000ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c6c:	4a06      	ldr	r2, [pc, #24]	@ (8000c88 <HAL_InitTick+0x68>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e000      	b.n	8000c78 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2400000c 	.word	0x2400000c
 8000c84:	24000000 	.word	0x24000000
 8000c88:	24000008 	.word	0x24000008

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	@ (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	2400000c 	.word	0x2400000c
 8000cb0:	24000114 	.word	0x24000114

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	@ (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	24000114 	.word	0x24000114

08000ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd4:	f7ff ffee 	bl	8000cb4 <HAL_GetTick>
 8000cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce4:	d005      	beq.n	8000cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <HAL_Delay+0x44>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4413      	add	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf2:	bf00      	nop
 8000cf4:	f7ff ffde 	bl	8000cb4 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d8f7      	bhi.n	8000cf4 <HAL_Delay+0x28>
  {
  }
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2400000c 	.word	0x2400000c

08000d14 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <HAL_GetREVID+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	0c1b      	lsrs	r3, r3, #16
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	5c001000 	.word	0x5c001000

08000d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <__NVIC_SetPriorityGrouping+0x40>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	4313      	orrs	r3, r2
 8000d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	@ (8000d6c <__NVIC_SetPriorityGrouping+0x40>)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	60d3      	str	r3, [r2, #12]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00
 8000d70:	05fa0000 	.word	0x05fa0000

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	db0b      	blt.n	8000dba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	f003 021f 	and.w	r2, r3, #31
 8000da8:	4907      	ldr	r1, [pc, #28]	@ (8000dc8 <__NVIC_EnableIRQ+0x38>)
 8000daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dae:	095b      	lsrs	r3, r3, #5
 8000db0:	2001      	movs	r0, #1
 8000db2:	fa00 f202 	lsl.w	r2, r0, r2
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000e100 	.word	0xe000e100

08000dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	db0a      	blt.n	8000df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	490c      	ldr	r1, [pc, #48]	@ (8000e18 <__NVIC_SetPriority+0x4c>)
 8000de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dea:	0112      	lsls	r2, r2, #4
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	440b      	add	r3, r1
 8000df0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df4:	e00a      	b.n	8000e0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4908      	ldr	r1, [pc, #32]	@ (8000e1c <__NVIC_SetPriority+0x50>)
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	3b04      	subs	r3, #4
 8000e04:	0112      	lsls	r2, r2, #4
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	761a      	strb	r2, [r3, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	@ 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f1c3 0307 	rsb	r3, r3, #7
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf28      	it	cs
 8000e3e:	2304      	movcs	r3, #4
 8000e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3304      	adds	r3, #4
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d902      	bls.n	8000e50 <NVIC_EncodePriority+0x30>
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3b03      	subs	r3, #3
 8000e4e:	e000      	b.n	8000e52 <NVIC_EncodePriority+0x32>
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43d9      	mvns	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	4313      	orrs	r3, r2
         );
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3724      	adds	r7, #36	@ 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e98:	d301      	bcc.n	8000e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00f      	b.n	8000ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <SysTick_Config+0x40>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f7ff ff8e 	bl	8000dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb0:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <SysTick_Config+0x40>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb6:	4b04      	ldr	r3, [pc, #16]	@ (8000ec8 <SysTick_Config+0x40>)
 8000eb8:	2207      	movs	r2, #7
 8000eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	e000e010 	.word	0xe000e010

08000ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff ff29 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef0:	f7ff ff40 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000ef4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	6978      	ldr	r0, [r7, #20]
 8000efc:	f7ff ff90 	bl	8000e20 <NVIC_EncodePriority>
 8000f00:	4602      	mov	r2, r0
 8000f02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff5f 	bl	8000dcc <__NVIC_SetPriority>
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff33 	bl	8000d90 <__NVIC_EnableIRQ>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ffa4 	bl	8000e88 <SysTick_Config>
 8000f40:	4603      	mov	r3, r0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f50:	f3bf 8f5f 	dmb	sy
}
 8000f54:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000f56:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <HAL_MPU_Disable+0x28>)
 8000f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f5a:	4a06      	ldr	r2, [pc, #24]	@ (8000f74 <HAL_MPU_Disable+0x28>)
 8000f5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f60:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000f62:	4b05      	ldr	r3, [pc, #20]	@ (8000f78 <HAL_MPU_Disable+0x2c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	605a      	str	r2, [r3, #4]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00
 8000f78:	e000ed90 	.word	0xe000ed90

08000f7c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000f84:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb4 <HAL_MPU_Enable+0x38>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <HAL_MPU_Enable+0x3c>)
 8000f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f92:	4a09      	ldr	r2, [pc, #36]	@ (8000fb8 <HAL_MPU_Enable+0x3c>)
 8000f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f98:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000f9a:	f3bf 8f4f 	dsb	sy
}
 8000f9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa0:	f3bf 8f6f 	isb	sy
}
 8000fa4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed90 	.word	0xe000ed90
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	785a      	ldrb	r2, [r3, #1]
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001038 <HAL_MPU_ConfigRegion+0x7c>)
 8000fca:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <HAL_MPU_ConfigRegion+0x7c>)
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	4a19      	ldr	r2, [pc, #100]	@ (8001038 <HAL_MPU_ConfigRegion+0x7c>)
 8000fd2:	f023 0301 	bic.w	r3, r3, #1
 8000fd6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000fd8:	4a17      	ldr	r2, [pc, #92]	@ (8001038 <HAL_MPU_ConfigRegion+0x7c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7b1b      	ldrb	r3, [r3, #12]
 8000fe4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7adb      	ldrb	r3, [r3, #11]
 8000fea:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7a9b      	ldrb	r3, [r3, #10]
 8000ff2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ff4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	7b5b      	ldrb	r3, [r3, #13]
 8000ffa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ffc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7b9b      	ldrb	r3, [r3, #14]
 8001002:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001004:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7bdb      	ldrb	r3, [r3, #15]
 800100a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800100c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7a5b      	ldrb	r3, [r3, #9]
 8001012:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001014:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	7a1b      	ldrb	r3, [r3, #8]
 800101a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800101c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	7812      	ldrb	r2, [r2, #0]
 8001022:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001024:	4a04      	ldr	r2, [pc, #16]	@ (8001038 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001026:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001028:	6113      	str	r3, [r2, #16]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed90 	.word	0xe000ed90

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	@ 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800104a:	4b89      	ldr	r3, [pc, #548]	@ (8001270 <HAL_GPIO_Init+0x234>)
 800104c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800104e:	e194      	b.n	800137a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	2101      	movs	r1, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 8186 	beq.w	8001374 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b01      	cmp	r3, #1
 8001072:	d005      	beq.n	8001080 <HAL_GPIO_Init+0x44>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d130      	bne.n	80010e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010b6:	2201      	movs	r2, #1
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	091b      	lsrs	r3, r3, #4
 80010cc:	f003 0201 	and.w	r2, r3, #1
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	d017      	beq.n	800111e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	2203      	movs	r2, #3
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d123      	bne.n	8001172 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	691a      	ldr	r2, [r3, #16]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3208      	adds	r2, #8
 800116c:	69b9      	ldr	r1, [r7, #24]
 800116e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0203 	and.w	r2, r3, #3
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 80e0 	beq.w	8001374 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001274 <HAL_GPIO_Init+0x238>)
 80011b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001274 <HAL_GPIO_Init+0x238>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001274 <HAL_GPIO_Init+0x238>)
 80011c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d2:	4a29      	ldr	r2, [pc, #164]	@ (8001278 <HAL_GPIO_Init+0x23c>)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a20      	ldr	r2, [pc, #128]	@ (800127c <HAL_GPIO_Init+0x240>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d052      	beq.n	80012a4 <HAL_GPIO_Init+0x268>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a1f      	ldr	r2, [pc, #124]	@ (8001280 <HAL_GPIO_Init+0x244>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d031      	beq.n	800126a <HAL_GPIO_Init+0x22e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a1e      	ldr	r2, [pc, #120]	@ (8001284 <HAL_GPIO_Init+0x248>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d02b      	beq.n	8001266 <HAL_GPIO_Init+0x22a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a1d      	ldr	r2, [pc, #116]	@ (8001288 <HAL_GPIO_Init+0x24c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d025      	beq.n	8001262 <HAL_GPIO_Init+0x226>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a1c      	ldr	r2, [pc, #112]	@ (800128c <HAL_GPIO_Init+0x250>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d01f      	beq.n	800125e <HAL_GPIO_Init+0x222>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a1b      	ldr	r2, [pc, #108]	@ (8001290 <HAL_GPIO_Init+0x254>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d019      	beq.n	800125a <HAL_GPIO_Init+0x21e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a1a      	ldr	r2, [pc, #104]	@ (8001294 <HAL_GPIO_Init+0x258>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x21a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a19      	ldr	r2, [pc, #100]	@ (8001298 <HAL_GPIO_Init+0x25c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x216>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a18      	ldr	r2, [pc, #96]	@ (800129c <HAL_GPIO_Init+0x260>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x212>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a17      	ldr	r2, [pc, #92]	@ (80012a0 <HAL_GPIO_Init+0x264>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x20e>
 8001246:	2309      	movs	r3, #9
 8001248:	e02d      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 800124a:	230a      	movs	r3, #10
 800124c:	e02b      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 800124e:	2308      	movs	r3, #8
 8001250:	e029      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 8001252:	2307      	movs	r3, #7
 8001254:	e027      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 8001256:	2306      	movs	r3, #6
 8001258:	e025      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 800125a:	2305      	movs	r3, #5
 800125c:	e023      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 800125e:	2304      	movs	r3, #4
 8001260:	e021      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 8001262:	2303      	movs	r3, #3
 8001264:	e01f      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 8001266:	2302      	movs	r3, #2
 8001268:	e01d      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 800126a:	2301      	movs	r3, #1
 800126c:	e01b      	b.n	80012a6 <HAL_GPIO_Init+0x26a>
 800126e:	bf00      	nop
 8001270:	58000080 	.word	0x58000080
 8001274:	58024400 	.word	0x58024400
 8001278:	58000400 	.word	0x58000400
 800127c:	58020000 	.word	0x58020000
 8001280:	58020400 	.word	0x58020400
 8001284:	58020800 	.word	0x58020800
 8001288:	58020c00 	.word	0x58020c00
 800128c:	58021000 	.word	0x58021000
 8001290:	58021400 	.word	0x58021400
 8001294:	58021800 	.word	0x58021800
 8001298:	58021c00 	.word	0x58021c00
 800129c:	58022000 	.word	0x58022000
 80012a0:	58022400 	.word	0x58022400
 80012a4:	2300      	movs	r3, #0
 80012a6:	69fa      	ldr	r2, [r7, #28]
 80012a8:	f002 0203 	and.w	r2, r2, #3
 80012ac:	0092      	lsls	r2, r2, #2
 80012ae:	4093      	lsls	r3, r2
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b6:	4938      	ldr	r1, [pc, #224]	@ (8001398 <HAL_GPIO_Init+0x35c>)
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3302      	adds	r3, #2
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80012ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001318:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	3301      	adds	r3, #1
 8001378:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	f47f ae63 	bne.w	8001050 <HAL_GPIO_Init+0x14>
  }
}
 800138a:	bf00      	nop
 800138c:	bf00      	nop
 800138e:	3724      	adds	r7, #36	@ 0x24
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	58000400 	.word	0x58000400

0800139c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
 80013a8:	4613      	mov	r3, r2
 80013aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80013b8:	e003      	b.n	80013c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013ba:	887b      	ldrh	r3, [r7, #2]
 80013bc:	041a      	lsls	r2, r3, #16
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	619a      	str	r2, [r3, #24]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b085      	sub	sp, #20
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	460b      	mov	r3, r1
 80013d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013e0:	887a      	ldrh	r2, [r7, #2]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4013      	ands	r3, r2
 80013e6:	041a      	lsls	r2, r3, #16
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	887b      	ldrh	r3, [r7, #2]
 80013ee:	400b      	ands	r3, r1
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	619a      	str	r2, [r3, #24]
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800140c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001410:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	4013      	ands	r3, r2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d008      	beq.n	800142e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800141c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	4618      	mov	r0, r3
 800142a:	f003 f987 	bl	800473c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001440:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <HAL_PWREx_ConfigSupply+0x70>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b04      	cmp	r3, #4
 800144a:	d00a      	beq.n	8001462 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800144c:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <HAL_PWREx_ConfigSupply+0x70>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	429a      	cmp	r2, r3
 8001458:	d001      	beq.n	800145e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e01f      	b.n	800149e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e01d      	b.n	800149e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001462:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <HAL_PWREx_ConfigSupply+0x70>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	f023 0207 	bic.w	r2, r3, #7
 800146a:	490f      	ldr	r1, [pc, #60]	@ (80014a8 <HAL_PWREx_ConfigSupply+0x70>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4313      	orrs	r3, r2
 8001470:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001472:	f7ff fc1f 	bl	8000cb4 <HAL_GetTick>
 8001476:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001478:	e009      	b.n	800148e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800147a:	f7ff fc1b 	bl	8000cb4 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001488:	d901      	bls.n	800148e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e007      	b.n	800149e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_PWREx_ConfigSupply+0x70>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800149a:	d1ee      	bne.n	800147a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	58024800 	.word	0x58024800

080014ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	@ 0x30
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	f000 bc48 	b.w	8001d50 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 8088 	beq.w	80015de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ce:	4b99      	ldr	r3, [pc, #612]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80014d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014d8:	4b96      	ldr	r3, [pc, #600]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80014da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80014de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e0:	2b10      	cmp	r3, #16
 80014e2:	d007      	beq.n	80014f4 <HAL_RCC_OscConfig+0x48>
 80014e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e6:	2b18      	cmp	r3, #24
 80014e8:	d111      	bne.n	800150e <HAL_RCC_OscConfig+0x62>
 80014ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d10c      	bne.n	800150e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	4b8f      	ldr	r3, [pc, #572]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d06d      	beq.n	80015dc <HAL_RCC_OscConfig+0x130>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d169      	bne.n	80015dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	f000 bc21 	b.w	8001d50 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x7a>
 8001518:	4b86      	ldr	r3, [pc, #536]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a85      	ldr	r2, [pc, #532]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800151e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	e02e      	b.n	8001584 <HAL_RCC_OscConfig+0xd8>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x9c>
 800152e:	4b81      	ldr	r3, [pc, #516]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a80      	ldr	r2, [pc, #512]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001534:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b7e      	ldr	r3, [pc, #504]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a7d      	ldr	r2, [pc, #500]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001540:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e01d      	b.n	8001584 <HAL_RCC_OscConfig+0xd8>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0xc0>
 8001552:	4b78      	ldr	r3, [pc, #480]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a77      	ldr	r2, [pc, #476]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	4b75      	ldr	r3, [pc, #468]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a74      	ldr	r2, [pc, #464]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e00b      	b.n	8001584 <HAL_RCC_OscConfig+0xd8>
 800156c:	4b71      	ldr	r3, [pc, #452]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a70      	ldr	r2, [pc, #448]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b6e      	ldr	r3, [pc, #440]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a6d      	ldr	r2, [pc, #436]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800157e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d013      	beq.n	80015b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158c:	f7ff fb92 	bl	8000cb4 <HAL_GetTick>
 8001590:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fb8e 	bl	8000cb4 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	@ 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e3d4      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015a6:	4b63      	ldr	r3, [pc, #396]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0xe8>
 80015b2:	e014      	b.n	80015de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff fb7e 	bl	8000cb4 <HAL_GetTick>
 80015b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fb7a 	bl	8000cb4 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	@ 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e3c0      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015ce:	4b59      	ldr	r3, [pc, #356]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x110>
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80ca 	beq.w	8001780 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ec:	4b51      	ldr	r3, [pc, #324]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80015f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015f6:	4b4f      	ldr	r3, [pc, #316]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80015f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d007      	beq.n	8001612 <HAL_RCC_OscConfig+0x166>
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	2b18      	cmp	r3, #24
 8001606:	d156      	bne.n	80016b6 <HAL_RCC_OscConfig+0x20a>
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d151      	bne.n	80016b6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001612:	4b48      	ldr	r3, [pc, #288]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	2b00      	cmp	r3, #0
 800161c:	d005      	beq.n	800162a <HAL_RCC_OscConfig+0x17e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e392      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800162a:	4b42      	ldr	r3, [pc, #264]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 0219 	bic.w	r2, r3, #25
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	493f      	ldr	r1, [pc, #252]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001638:	4313      	orrs	r3, r2
 800163a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff fb3a 	bl	8000cb4 <HAL_GetTick>
 8001640:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001644:	f7ff fb36 	bl	8000cb4 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e37c      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001656:	4b37      	ldr	r3, [pc, #220]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001662:	f7ff fb57 	bl	8000d14 <HAL_GetREVID>
 8001666:	4603      	mov	r3, r0
 8001668:	f241 0203 	movw	r2, #4099	@ 0x1003
 800166c:	4293      	cmp	r3, r2
 800166e:	d817      	bhi.n	80016a0 <HAL_RCC_OscConfig+0x1f4>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	2b40      	cmp	r3, #64	@ 0x40
 8001676:	d108      	bne.n	800168a <HAL_RCC_OscConfig+0x1de>
 8001678:	4b2e      	ldr	r3, [pc, #184]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001680:	4a2c      	ldr	r2, [pc, #176]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001682:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001686:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001688:	e07a      	b.n	8001780 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168a:	4b2a      	ldr	r3, [pc, #168]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	031b      	lsls	r3, r3, #12
 8001698:	4926      	ldr	r1, [pc, #152]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800169a:	4313      	orrs	r3, r2
 800169c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800169e:	e06f      	b.n	8001780 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a0:	4b24      	ldr	r3, [pc, #144]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	061b      	lsls	r3, r3, #24
 80016ae:	4921      	ldr	r1, [pc, #132]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b4:	e064      	b.n	8001780 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d047      	beq.n	800174e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016be:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f023 0219 	bic.w	r2, r3, #25
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	491a      	ldr	r1, [pc, #104]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff faf0 	bl	8000cb4 <HAL_GetTick>
 80016d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d8:	f7ff faec 	bl	8000cb4 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e332      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ea:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f6:	f7ff fb0d 	bl	8000d14 <HAL_GetREVID>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001700:	4293      	cmp	r3, r2
 8001702:	d819      	bhi.n	8001738 <HAL_RCC_OscConfig+0x28c>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	2b40      	cmp	r3, #64	@ 0x40
 800170a:	d108      	bne.n	800171e <HAL_RCC_OscConfig+0x272>
 800170c:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001714:	4a07      	ldr	r2, [pc, #28]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800171a:	6053      	str	r3, [r2, #4]
 800171c:	e030      	b.n	8001780 <HAL_RCC_OscConfig+0x2d4>
 800171e:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	031b      	lsls	r3, r3, #12
 800172c:	4901      	ldr	r1, [pc, #4]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800172e:	4313      	orrs	r3, r2
 8001730:	604b      	str	r3, [r1, #4]
 8001732:	e025      	b.n	8001780 <HAL_RCC_OscConfig+0x2d4>
 8001734:	58024400 	.word	0x58024400
 8001738:	4b9a      	ldr	r3, [pc, #616]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	061b      	lsls	r3, r3, #24
 8001746:	4997      	ldr	r1, [pc, #604]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001748:	4313      	orrs	r3, r2
 800174a:	604b      	str	r3, [r1, #4]
 800174c:	e018      	b.n	8001780 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800174e:	4b95      	ldr	r3, [pc, #596]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a94      	ldr	r2, [pc, #592]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175a:	f7ff faab 	bl	8000cb4 <HAL_GetTick>
 800175e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001762:	f7ff faa7 	bl	8000cb4 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e2ed      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001774:	4b8b      	ldr	r3, [pc, #556]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f0      	bne.n	8001762 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0310 	and.w	r3, r3, #16
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80a9 	beq.w	80018e0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800178e:	4b85      	ldr	r3, [pc, #532]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001796:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001798:	4b82      	ldr	r3, [pc, #520]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800179a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d007      	beq.n	80017b4 <HAL_RCC_OscConfig+0x308>
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2b18      	cmp	r3, #24
 80017a8:	d13a      	bne.n	8001820 <HAL_RCC_OscConfig+0x374>
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d135      	bne.n	8001820 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017b4:	4b7b      	ldr	r3, [pc, #492]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_OscConfig+0x320>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	2b80      	cmp	r3, #128	@ 0x80
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e2c1      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017cc:	f7ff faa2 	bl	8000d14 <HAL_GetREVID>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d817      	bhi.n	800180a <HAL_RCC_OscConfig+0x35e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	2b20      	cmp	r3, #32
 80017e0:	d108      	bne.n	80017f4 <HAL_RCC_OscConfig+0x348>
 80017e2:	4b70      	ldr	r3, [pc, #448]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80017ea:	4a6e      	ldr	r2, [pc, #440]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80017ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80017f0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017f2:	e075      	b.n	80018e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017f4:	4b6b      	ldr	r3, [pc, #428]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	069b      	lsls	r3, r3, #26
 8001802:	4968      	ldr	r1, [pc, #416]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001808:	e06a      	b.n	80018e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800180a:	4b66      	ldr	r3, [pc, #408]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	061b      	lsls	r3, r3, #24
 8001818:	4962      	ldr	r1, [pc, #392]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800181a:	4313      	orrs	r3, r2
 800181c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800181e:	e05f      	b.n	80018e0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d042      	beq.n	80018ae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001828:	4b5e      	ldr	r3, [pc, #376]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a5d      	ldr	r2, [pc, #372]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800182e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001834:	f7ff fa3e 	bl	8000cb4 <HAL_GetTick>
 8001838:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800183c:	f7ff fa3a 	bl	8000cb4 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e280      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800184e:	4b55      	ldr	r3, [pc, #340]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800185a:	f7ff fa5b 	bl	8000d14 <HAL_GetREVID>
 800185e:	4603      	mov	r3, r0
 8001860:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001864:	4293      	cmp	r3, r2
 8001866:	d817      	bhi.n	8001898 <HAL_RCC_OscConfig+0x3ec>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	2b20      	cmp	r3, #32
 800186e:	d108      	bne.n	8001882 <HAL_RCC_OscConfig+0x3d6>
 8001870:	4b4c      	ldr	r3, [pc, #304]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001878:	4a4a      	ldr	r2, [pc, #296]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800187a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800187e:	6053      	str	r3, [r2, #4]
 8001880:	e02e      	b.n	80018e0 <HAL_RCC_OscConfig+0x434>
 8001882:	4b48      	ldr	r3, [pc, #288]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	069b      	lsls	r3, r3, #26
 8001890:	4944      	ldr	r1, [pc, #272]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]
 8001896:	e023      	b.n	80018e0 <HAL_RCC_OscConfig+0x434>
 8001898:	4b42      	ldr	r3, [pc, #264]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	061b      	lsls	r3, r3, #24
 80018a6:	493f      	ldr	r1, [pc, #252]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	60cb      	str	r3, [r1, #12]
 80018ac:	e018      	b.n	80018e0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80018ae:	4b3d      	ldr	r3, [pc, #244]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a3c      	ldr	r2, [pc, #240]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80018b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80018b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7ff f9fb 	bl	8000cb4 <HAL_GetTick>
 80018be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80018c2:	f7ff f9f7 	bl	8000cb4 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e23d      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018d4:	4b33      	ldr	r3, [pc, #204]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f0      	bne.n	80018c2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0308 	and.w	r3, r3, #8
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d036      	beq.n	800195a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d019      	beq.n	8001928 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f4:	4b2b      	ldr	r3, [pc, #172]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80018f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018f8:	4a2a      	ldr	r2, [pc, #168]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001900:	f7ff f9d8 	bl	8000cb4 <HAL_GetTick>
 8001904:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001908:	f7ff f9d4 	bl	8000cb4 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e21a      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800191a:	4b22      	ldr	r3, [pc, #136]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800191c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x45c>
 8001926:	e018      	b.n	800195a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001928:	4b1e      	ldr	r3, [pc, #120]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800192a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800192c:	4a1d      	ldr	r2, [pc, #116]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800192e:	f023 0301 	bic.w	r3, r3, #1
 8001932:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001934:	f7ff f9be 	bl	8000cb4 <HAL_GetTick>
 8001938:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193c:	f7ff f9ba 	bl	8000cb4 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e200      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800194e:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0320 	and.w	r3, r3, #32
 8001962:	2b00      	cmp	r3, #0
 8001964:	d039      	beq.n	80019da <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d01c      	beq.n	80019a8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a0c      	ldr	r2, [pc, #48]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001974:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001978:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800197a:	f7ff f99b 	bl	8000cb4 <HAL_GetTick>
 800197e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001982:	f7ff f997 	bl	8000cb4 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e1dd      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001994:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x4d6>
 80019a0:	e01b      	b.n	80019da <HAL_RCC_OscConfig+0x52e>
 80019a2:	bf00      	nop
 80019a4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019a8:	4b9b      	ldr	r3, [pc, #620]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a9a      	ldr	r2, [pc, #616]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 80019ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019b4:	f7ff f97e 	bl	8000cb4 <HAL_GetTick>
 80019b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019bc:	f7ff f97a 	bl	8000cb4 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e1c0      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019ce:	4b92      	ldr	r3, [pc, #584]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 8081 	beq.w	8001aea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80019e8:	4b8c      	ldr	r3, [pc, #560]	@ (8001c1c <HAL_RCC_OscConfig+0x770>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a8b      	ldr	r2, [pc, #556]	@ (8001c1c <HAL_RCC_OscConfig+0x770>)
 80019ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019f4:	f7ff f95e 	bl	8000cb4 <HAL_GetTick>
 80019f8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fc:	f7ff f95a 	bl	8000cb4 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	@ 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e1a0      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a0e:	4b83      	ldr	r3, [pc, #524]	@ (8001c1c <HAL_RCC_OscConfig+0x770>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d106      	bne.n	8001a30 <HAL_RCC_OscConfig+0x584>
 8001a22:	4b7d      	ldr	r3, [pc, #500]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a26:	4a7c      	ldr	r2, [pc, #496]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a2e:	e02d      	b.n	8001a8c <HAL_RCC_OscConfig+0x5e0>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10c      	bne.n	8001a52 <HAL_RCC_OscConfig+0x5a6>
 8001a38:	4b77      	ldr	r3, [pc, #476]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3c:	4a76      	ldr	r2, [pc, #472]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a3e:	f023 0301 	bic.w	r3, r3, #1
 8001a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a44:	4b74      	ldr	r3, [pc, #464]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a48:	4a73      	ldr	r2, [pc, #460]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a4a:	f023 0304 	bic.w	r3, r3, #4
 8001a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a50:	e01c      	b.n	8001a8c <HAL_RCC_OscConfig+0x5e0>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0x5c8>
 8001a5a:	4b6f      	ldr	r3, [pc, #444]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5e:	4a6e      	ldr	r2, [pc, #440]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a66:	4b6c      	ldr	r3, [pc, #432]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6a:	4a6b      	ldr	r2, [pc, #428]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a72:	e00b      	b.n	8001a8c <HAL_RCC_OscConfig+0x5e0>
 8001a74:	4b68      	ldr	r3, [pc, #416]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a78:	4a67      	ldr	r2, [pc, #412]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a7a:	f023 0301 	bic.w	r3, r3, #1
 8001a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a80:	4b65      	ldr	r3, [pc, #404]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a84:	4a64      	ldr	r2, [pc, #400]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a86:	f023 0304 	bic.w	r3, r3, #4
 8001a8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d015      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a94:	f7ff f90e 	bl	8000cb4 <HAL_GetTick>
 8001a98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9c:	f7ff f90a 	bl	8000cb4 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e14e      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ab2:	4b59      	ldr	r3, [pc, #356]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0ee      	beq.n	8001a9c <HAL_RCC_OscConfig+0x5f0>
 8001abe:	e014      	b.n	8001aea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac0:	f7ff f8f8 	bl	8000cb4 <HAL_GetTick>
 8001ac4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac8:	f7ff f8f4 	bl	8000cb4 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e138      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ade:	4b4e      	ldr	r3, [pc, #312]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1ee      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 812d 	beq.w	8001d4e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001af4:	4b48      	ldr	r3, [pc, #288]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001afc:	2b18      	cmp	r3, #24
 8001afe:	f000 80bd 	beq.w	8001c7c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	f040 809e 	bne.w	8001c48 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0c:	4b42      	ldr	r3, [pc, #264]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a41      	ldr	r2, [pc, #260]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff f8cc 	bl	8000cb4 <HAL_GetTick>
 8001b1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b20:	f7ff f8c8 	bl	8000cb4 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e10e      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b32:	4b39      	ldr	r3, [pc, #228]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b3e:	4b36      	ldr	r3, [pc, #216]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b42:	4b37      	ldr	r3, [pc, #220]	@ (8001c20 <HAL_RCC_OscConfig+0x774>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b4e:	0112      	lsls	r2, r2, #4
 8001b50:	430a      	orrs	r2, r1
 8001b52:	4931      	ldr	r1, [pc, #196]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	628b      	str	r3, [r1, #40]	@ 0x28
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b66:	3b01      	subs	r3, #1
 8001b68:	025b      	lsls	r3, r3, #9
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b72:	3b01      	subs	r3, #1
 8001b74:	041b      	lsls	r3, r3, #16
 8001b76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b80:	3b01      	subs	r3, #1
 8001b82:	061b      	lsls	r3, r3, #24
 8001b84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001b88:	4923      	ldr	r1, [pc, #140]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001b8e:	4b22      	ldr	r3, [pc, #136]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b92:	4a21      	ldr	r2, [pc, #132]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b9e:	4b21      	ldr	r3, [pc, #132]	@ (8001c24 <HAL_RCC_OscConfig+0x778>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ba6:	00d2      	lsls	r2, r2, #3
 8001ba8:	491b      	ldr	r1, [pc, #108]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001bae:	4b1a      	ldr	r3, [pc, #104]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb2:	f023 020c 	bic.w	r2, r3, #12
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	4917      	ldr	r1, [pc, #92]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001bc0:	4b15      	ldr	r3, [pc, #84]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc4:	f023 0202 	bic.w	r2, r3, #2
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bcc:	4912      	ldr	r1, [pc, #72]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001bd2:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd6:	4a10      	ldr	r2, [pc, #64]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001bde:	4b0e      	ldr	r3, [pc, #56]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be2:	4a0d      	ldr	r2, [pc, #52]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001bea:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bee:	4a0a      	ldr	r2, [pc, #40]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001bf6:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bfa:	4a07      	ldr	r2, [pc, #28]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c02:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a04      	ldr	r2, [pc, #16]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001c08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0e:	f7ff f851 	bl	8000cb4 <HAL_GetTick>
 8001c12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c14:	e011      	b.n	8001c3a <HAL_RCC_OscConfig+0x78e>
 8001c16:	bf00      	nop
 8001c18:	58024400 	.word	0x58024400
 8001c1c:	58024800 	.word	0x58024800
 8001c20:	fffffc0c 	.word	0xfffffc0c
 8001c24:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff f844 	bl	8000cb4 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e08a      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c3a:	4b47      	ldr	r3, [pc, #284]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x77c>
 8001c46:	e082      	b.n	8001d4e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c48:	4b43      	ldr	r3, [pc, #268]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a42      	ldr	r2, [pc, #264]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001c4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff f82e 	bl	8000cb4 <HAL_GetTick>
 8001c58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7ff f82a 	bl	8000cb4 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e070      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x7b0>
 8001c7a:	e068      	b.n	8001d4e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c7c:	4b36      	ldr	r3, [pc, #216]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c82:	4b35      	ldr	r3, [pc, #212]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d031      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	f003 0203 	and.w	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d12a      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d122      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d11a      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	0a5b      	lsrs	r3, r3, #9
 8001cc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d111      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	0c1b      	lsrs	r3, r3, #16
 8001cd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cdc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d108      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	0e1b      	lsrs	r3, r3, #24
 8001ce6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e02b      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001cf8:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cfc:	08db      	lsrs	r3, r3, #3
 8001cfe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d02:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d01f      	beq.n	8001d4e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001d0e:	4b12      	ldr	r3, [pc, #72]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d12:	4a11      	ldr	r2, [pc, #68]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001d14:	f023 0301 	bic.w	r3, r3, #1
 8001d18:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d1a:	f7fe ffcb 	bl	8000cb4 <HAL_GetTick>
 8001d1e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001d20:	bf00      	nop
 8001d22:	f7fe ffc7 	bl	8000cb4 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d0f9      	beq.n	8001d22 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001d30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d32:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <HAL_RCC_OscConfig+0x8b0>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d3a:	00d2      	lsls	r2, r2, #3
 8001d3c:	4906      	ldr	r1, [pc, #24]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001d42:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d46:	4a04      	ldr	r2, [pc, #16]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3730      	adds	r7, #48	@ 0x30
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	58024400 	.word	0x58024400
 8001d5c:	ffff0007 	.word	0xffff0007

08001d60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e19c      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d74:	4b8a      	ldr	r3, [pc, #552]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d910      	bls.n	8001da4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d82:	4b87      	ldr	r3, [pc, #540]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 020f 	bic.w	r2, r3, #15
 8001d8a:	4985      	ldr	r1, [pc, #532]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d92:	4b83      	ldr	r3, [pc, #524]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e184      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d010      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	4b7b      	ldr	r3, [pc, #492]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d908      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001dc0:	4b78      	ldr	r3, [pc, #480]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	4975      	ldr	r1, [pc, #468]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d010      	beq.n	8001e00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	4b70      	ldr	r3, [pc, #448]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d908      	bls.n	8001e00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001dee:	4b6d      	ldr	r3, [pc, #436]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	496a      	ldr	r1, [pc, #424]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d010      	beq.n	8001e2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699a      	ldr	r2, [r3, #24]
 8001e10:	4b64      	ldr	r3, [pc, #400]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d908      	bls.n	8001e2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e1c:	4b61      	ldr	r3, [pc, #388]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	495e      	ldr	r1, [pc, #376]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0320 	and.w	r3, r3, #32
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d010      	beq.n	8001e5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69da      	ldr	r2, [r3, #28]
 8001e3e:	4b59      	ldr	r3, [pc, #356]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d908      	bls.n	8001e5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001e4a:	4b56      	ldr	r3, [pc, #344]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4953      	ldr	r1, [pc, #332]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d010      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	4b4d      	ldr	r3, [pc, #308]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d908      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e78:	4b4a      	ldr	r3, [pc, #296]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f023 020f 	bic.w	r2, r3, #15
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4947      	ldr	r1, [pc, #284]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d055      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001e96:	4b43      	ldr	r3, [pc, #268]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	4940      	ldr	r1, [pc, #256]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d107      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eb0:	4b3c      	ldr	r3, [pc, #240]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d121      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0f6      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d107      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ec8:	4b36      	ldr	r3, [pc, #216]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d115      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0ea      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ee0:	4b30      	ldr	r3, [pc, #192]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d109      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0de      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0d6      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f00:	4b28      	ldr	r3, [pc, #160]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	f023 0207 	bic.w	r2, r3, #7
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	4925      	ldr	r1, [pc, #148]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f12:	f7fe fecf 	bl	8000cb4 <HAL_GetTick>
 8001f16:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1a:	f7fe fecb 	bl	8000cb4 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e0be      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f30:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d1eb      	bne.n	8001f1a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d010      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	4b14      	ldr	r3, [pc, #80]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d208      	bcs.n	8001f70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f5e:	4b11      	ldr	r3, [pc, #68]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f023 020f 	bic.w	r2, r3, #15
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	490e      	ldr	r1, [pc, #56]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f70:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d214      	bcs.n	8001fa8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7e:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 020f 	bic.w	r2, r3, #15
 8001f86:	4906      	ldr	r1, [pc, #24]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b04      	ldr	r3, [pc, #16]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e086      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>
 8001fa0:	52002000 	.word	0x52002000
 8001fa4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d010      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	4b3f      	ldr	r3, [pc, #252]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d208      	bcs.n	8001fd6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fc4:	4b3c      	ldr	r3, [pc, #240]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	4939      	ldr	r1, [pc, #228]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d010      	beq.n	8002004 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	4b34      	ldr	r3, [pc, #208]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d208      	bcs.n	8002004 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ff2:	4b31      	ldr	r3, [pc, #196]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	492e      	ldr	r1, [pc, #184]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8002000:	4313      	orrs	r3, r2
 8002002:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b00      	cmp	r3, #0
 800200e:	d010      	beq.n	8002032 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	4b28      	ldr	r3, [pc, #160]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800201c:	429a      	cmp	r2, r3
 800201e:	d208      	bcs.n	8002032 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002020:	4b25      	ldr	r3, [pc, #148]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4922      	ldr	r1, [pc, #136]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 800202e:	4313      	orrs	r3, r2
 8002030:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0320 	and.w	r3, r3, #32
 800203a:	2b00      	cmp	r3, #0
 800203c:	d010      	beq.n	8002060 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69da      	ldr	r2, [r3, #28]
 8002042:	4b1d      	ldr	r3, [pc, #116]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800204a:	429a      	cmp	r2, r3
 800204c:	d208      	bcs.n	8002060 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800204e:	4b1a      	ldr	r3, [pc, #104]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4917      	ldr	r1, [pc, #92]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 800205c:	4313      	orrs	r3, r2
 800205e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002060:	f000 f834 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8002064:	4602      	mov	r2, r0
 8002066:	4b14      	ldr	r3, [pc, #80]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	4912      	ldr	r1, [pc, #72]	@ (80020bc <HAL_RCC_ClockConfig+0x35c>)
 8002072:	5ccb      	ldrb	r3, [r1, r3]
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
 800207c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800207e:	4b0e      	ldr	r3, [pc, #56]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	4a0d      	ldr	r2, [pc, #52]	@ (80020bc <HAL_RCC_ClockConfig+0x35c>)
 8002088:	5cd3      	ldrb	r3, [r2, r3]
 800208a:	f003 031f 	and.w	r3, r3, #31
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
 8002094:	4a0a      	ldr	r2, [pc, #40]	@ (80020c0 <HAL_RCC_ClockConfig+0x360>)
 8002096:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002098:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <HAL_RCC_ClockConfig+0x364>)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800209e:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <HAL_RCC_ClockConfig+0x368>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fdbc 	bl	8000c20 <HAL_InitTick>
 80020a8:	4603      	mov	r3, r0
 80020aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	58024400 	.word	0x58024400
 80020bc:	08005708 	.word	0x08005708
 80020c0:	24000004 	.word	0x24000004
 80020c4:	24000000 	.word	0x24000000
 80020c8:	24000008 	.word	0x24000008

080020cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	@ 0x24
 80020d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020d2:	4bb3      	ldr	r3, [pc, #716]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020da:	2b18      	cmp	r3, #24
 80020dc:	f200 8155 	bhi.w	800238a <HAL_RCC_GetSysClockFreq+0x2be>
 80020e0:	a201      	add	r2, pc, #4	@ (adr r2, 80020e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80020e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e6:	bf00      	nop
 80020e8:	0800214d 	.word	0x0800214d
 80020ec:	0800238b 	.word	0x0800238b
 80020f0:	0800238b 	.word	0x0800238b
 80020f4:	0800238b 	.word	0x0800238b
 80020f8:	0800238b 	.word	0x0800238b
 80020fc:	0800238b 	.word	0x0800238b
 8002100:	0800238b 	.word	0x0800238b
 8002104:	0800238b 	.word	0x0800238b
 8002108:	08002173 	.word	0x08002173
 800210c:	0800238b 	.word	0x0800238b
 8002110:	0800238b 	.word	0x0800238b
 8002114:	0800238b 	.word	0x0800238b
 8002118:	0800238b 	.word	0x0800238b
 800211c:	0800238b 	.word	0x0800238b
 8002120:	0800238b 	.word	0x0800238b
 8002124:	0800238b 	.word	0x0800238b
 8002128:	08002179 	.word	0x08002179
 800212c:	0800238b 	.word	0x0800238b
 8002130:	0800238b 	.word	0x0800238b
 8002134:	0800238b 	.word	0x0800238b
 8002138:	0800238b 	.word	0x0800238b
 800213c:	0800238b 	.word	0x0800238b
 8002140:	0800238b 	.word	0x0800238b
 8002144:	0800238b 	.word	0x0800238b
 8002148:	0800217f 	.word	0x0800217f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800214c:	4b94      	ldr	r3, [pc, #592]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	2b00      	cmp	r3, #0
 8002156:	d009      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002158:	4b91      	ldr	r3, [pc, #580]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	08db      	lsrs	r3, r3, #3
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	4a90      	ldr	r2, [pc, #576]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
 8002168:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800216a:	e111      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800216c:	4b8d      	ldr	r3, [pc, #564]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800216e:	61bb      	str	r3, [r7, #24]
      break;
 8002170:	e10e      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002172:	4b8d      	ldr	r3, [pc, #564]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002174:	61bb      	str	r3, [r7, #24]
      break;
 8002176:	e10b      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002178:	4b8c      	ldr	r3, [pc, #560]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800217a:	61bb      	str	r3, [r7, #24]
      break;
 800217c:	e108      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800217e:	4b88      	ldr	r3, [pc, #544]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002188:	4b85      	ldr	r3, [pc, #532]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002192:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002194:	4b82      	ldr	r3, [pc, #520]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800219e:	4b80      	ldr	r3, [pc, #512]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a2:	08db      	lsrs	r3, r3, #3
 80021a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80e1 	beq.w	8002384 <HAL_RCC_GetSysClockFreq+0x2b8>
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	f000 8083 	beq.w	80022d0 <HAL_RCC_GetSysClockFreq+0x204>
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	f200 80a1 	bhi.w	8002314 <HAL_RCC_GetSysClockFreq+0x248>
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x114>
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d056      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x1c0>
 80021de:	e099      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021e0:	4b6f      	ldr	r3, [pc, #444]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d02d      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80021ec:	4b6c      	ldr	r3, [pc, #432]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	4a6b      	ldr	r2, [pc, #428]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
 80021fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	ee07 3a90 	vmov	s15, r3
 8002204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	ee07 3a90 	vmov	s15, r3
 800220e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002216:	4b62      	ldr	r3, [pc, #392]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800221e:	ee07 3a90 	vmov	s15, r3
 8002222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002226:	ed97 6a02 	vldr	s12, [r7, #8]
 800222a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80023b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800222e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800223a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800223e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002242:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002246:	e087      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	ee07 3a90 	vmov	s15, r3
 800224e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002252:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80023b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800225a:	4b51      	ldr	r3, [pc, #324]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002262:	ee07 3a90 	vmov	s15, r3
 8002266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800226a:	ed97 6a02 	vldr	s12, [r7, #8]
 800226e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80023b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800227a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800227e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002286:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800228a:	e065      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	ee07 3a90 	vmov	s15, r3
 8002292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002296:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80023b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800229a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800229e:	4b40      	ldr	r3, [pc, #256]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80022b2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80023b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022ce:	e043      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	ee07 3a90 	vmov	s15, r3
 80022d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80023bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80022de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022e2:	4b2f      	ldr	r3, [pc, #188]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ea:	ee07 3a90 	vmov	s15, r3
 80022ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80022f6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80023b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800230a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800230e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002312:	e021      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	ee07 3a90 	vmov	s15, r3
 800231a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800231e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80023b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002326:	4b1e      	ldr	r3, [pc, #120]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800232e:	ee07 3a90 	vmov	s15, r3
 8002332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002336:	ed97 6a02 	vldr	s12, [r7, #8]
 800233a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80023b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800233e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800234a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800234e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002352:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002356:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002358:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235c:	0a5b      	lsrs	r3, r3, #9
 800235e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002362:	3301      	adds	r3, #1
 8002364:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	ee07 3a90 	vmov	s15, r3
 800236c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002370:	edd7 6a07 	vldr	s13, [r7, #28]
 8002374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800237c:	ee17 3a90 	vmov	r3, s15
 8002380:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002382:	e005      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	61bb      	str	r3, [r7, #24]
      break;
 8002388:	e002      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800238a:	4b07      	ldr	r3, [pc, #28]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800238c:	61bb      	str	r3, [r7, #24]
      break;
 800238e:	bf00      	nop
  }

  return sysclockfreq;
 8002390:	69bb      	ldr	r3, [r7, #24]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	@ 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	58024400 	.word	0x58024400
 80023a4:	03d09000 	.word	0x03d09000
 80023a8:	003d0900 	.word	0x003d0900
 80023ac:	017d7840 	.word	0x017d7840
 80023b0:	46000000 	.word	0x46000000
 80023b4:	4c742400 	.word	0x4c742400
 80023b8:	4a742400 	.word	0x4a742400
 80023bc:	4bbebc20 	.word	0x4bbebc20

080023c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023c4:	b0ca      	sub	sp, #296	@ 0x128
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023cc:	2300      	movs	r3, #0
 80023ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023d2:	2300      	movs	r3, #0
 80023d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80023e4:	2500      	movs	r5, #0
 80023e6:	ea54 0305 	orrs.w	r3, r4, r5
 80023ea:	d049      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80023ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80023f6:	d02f      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80023f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80023fc:	d828      	bhi.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80023fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002402:	d01a      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002404:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002408:	d822      	bhi.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800240e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002412:	d007      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002414:	e01c      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002416:	4bb8      	ldr	r3, [pc, #736]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241a:	4ab7      	ldr	r2, [pc, #732]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800241c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002420:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002422:	e01a      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002428:	3308      	adds	r3, #8
 800242a:	2102      	movs	r1, #2
 800242c:	4618      	mov	r0, r3
 800242e:	f001 f9d1 	bl	80037d4 <RCCEx_PLL2_Config>
 8002432:	4603      	mov	r3, r0
 8002434:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002438:	e00f      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800243a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800243e:	3328      	adds	r3, #40	@ 0x28
 8002440:	2102      	movs	r1, #2
 8002442:	4618      	mov	r0, r3
 8002444:	f001 fa78 	bl	8003938 <RCCEx_PLL3_Config>
 8002448:	4603      	mov	r3, r0
 800244a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800244e:	e004      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002456:	e000      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800245a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10a      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002462:	4ba5      	ldr	r3, [pc, #660]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002466:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800246a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800246e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002470:	4aa1      	ldr	r2, [pc, #644]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002472:	430b      	orrs	r3, r1
 8002474:	6513      	str	r3, [r2, #80]	@ 0x50
 8002476:	e003      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002478:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800247c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002488:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800248c:	f04f 0900 	mov.w	r9, #0
 8002490:	ea58 0309 	orrs.w	r3, r8, r9
 8002494:	d047      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800249a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249c:	2b04      	cmp	r3, #4
 800249e:	d82a      	bhi.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80024a0:	a201      	add	r2, pc, #4	@ (adr r2, 80024a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80024a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a6:	bf00      	nop
 80024a8:	080024bd 	.word	0x080024bd
 80024ac:	080024cb 	.word	0x080024cb
 80024b0:	080024e1 	.word	0x080024e1
 80024b4:	080024ff 	.word	0x080024ff
 80024b8:	080024ff 	.word	0x080024ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024bc:	4b8e      	ldr	r3, [pc, #568]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c0:	4a8d      	ldr	r2, [pc, #564]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024c8:	e01a      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80024ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024ce:	3308      	adds	r3, #8
 80024d0:	2100      	movs	r1, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f001 f97e 	bl	80037d4 <RCCEx_PLL2_Config>
 80024d8:	4603      	mov	r3, r0
 80024da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024de:	e00f      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80024e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024e4:	3328      	adds	r3, #40	@ 0x28
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f001 fa25 	bl	8003938 <RCCEx_PLL3_Config>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024f4:	e004      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80024fc:	e000      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80024fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002500:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10a      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002508:	4b7b      	ldr	r3, [pc, #492]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800250a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800250c:	f023 0107 	bic.w	r1, r3, #7
 8002510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002516:	4a78      	ldr	r2, [pc, #480]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002518:	430b      	orrs	r3, r1
 800251a:	6513      	str	r3, [r2, #80]	@ 0x50
 800251c:	e003      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800251e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002522:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002532:	f04f 0b00 	mov.w	fp, #0
 8002536:	ea5a 030b 	orrs.w	r3, sl, fp
 800253a:	d04c      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800253c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002542:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002546:	d030      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800254c:	d829      	bhi.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800254e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002550:	d02d      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002552:	2bc0      	cmp	r3, #192	@ 0xc0
 8002554:	d825      	bhi.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002556:	2b80      	cmp	r3, #128	@ 0x80
 8002558:	d018      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800255a:	2b80      	cmp	r3, #128	@ 0x80
 800255c:	d821      	bhi.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002562:	2b40      	cmp	r3, #64	@ 0x40
 8002564:	d007      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002566:	e01c      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002568:	4b63      	ldr	r3, [pc, #396]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	4a62      	ldr	r2, [pc, #392]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800256e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002572:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002574:	e01c      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800257a:	3308      	adds	r3, #8
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f001 f928 	bl	80037d4 <RCCEx_PLL2_Config>
 8002584:	4603      	mov	r3, r0
 8002586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800258a:	e011      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800258c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002590:	3328      	adds	r3, #40	@ 0x28
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f001 f9cf 	bl	8003938 <RCCEx_PLL3_Config>
 800259a:	4603      	mov	r3, r0
 800259c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80025a0:	e006      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80025a8:	e002      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80025aa:	bf00      	nop
 80025ac:	e000      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80025ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10a      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80025b8:	4b4f      	ldr	r3, [pc, #316]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025bc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80025c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c6:	4a4c      	ldr	r2, [pc, #304]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025c8:	430b      	orrs	r3, r1
 80025ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80025cc:	e003      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80025d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80025e2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80025ec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80025f0:	460b      	mov	r3, r1
 80025f2:	4313      	orrs	r3, r2
 80025f4:	d053      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80025f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80025fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002602:	d035      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002604:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002608:	d82e      	bhi.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800260a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800260e:	d031      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002610:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002614:	d828      	bhi.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002616:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800261a:	d01a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800261c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002620:	d822      	bhi.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002626:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800262a:	d007      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800262c:	e01c      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800262e:	4b32      	ldr	r3, [pc, #200]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002632:	4a31      	ldr	r2, [pc, #196]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002638:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800263a:	e01c      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800263c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002640:	3308      	adds	r3, #8
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f001 f8c5 	bl	80037d4 <RCCEx_PLL2_Config>
 800264a:	4603      	mov	r3, r0
 800264c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002650:	e011      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002656:	3328      	adds	r3, #40	@ 0x28
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f001 f96c 	bl	8003938 <RCCEx_PLL3_Config>
 8002660:	4603      	mov	r3, r0
 8002662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002666:	e006      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800266e:	e002      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002670:	bf00      	nop
 8002672:	e000      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10b      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800267e:	4b1e      	ldr	r3, [pc, #120]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002682:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800268a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800268e:	4a1a      	ldr	r2, [pc, #104]	@ (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002690:	430b      	orrs	r3, r1
 8002692:	6593      	str	r3, [r2, #88]	@ 0x58
 8002694:	e003      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800269a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800269e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80026aa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80026ae:	2300      	movs	r3, #0
 80026b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80026b4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80026b8:	460b      	mov	r3, r1
 80026ba:	4313      	orrs	r3, r2
 80026bc:	d056      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80026be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80026c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026ca:	d038      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80026cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026d0:	d831      	bhi.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80026d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80026d6:	d034      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80026d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80026dc:	d82b      	bhi.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80026de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026e2:	d01d      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80026e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026e8:	d825      	bhi.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d006      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80026ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026f2:	d00a      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80026f4:	e01f      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80026f6:	bf00      	nop
 80026f8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026fc:	4ba2      	ldr	r3, [pc, #648]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002700:	4aa1      	ldr	r2, [pc, #644]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002706:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002708:	e01c      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800270a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800270e:	3308      	adds	r3, #8
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f001 f85e 	bl	80037d4 <RCCEx_PLL2_Config>
 8002718:	4603      	mov	r3, r0
 800271a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800271e:	e011      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002724:	3328      	adds	r3, #40	@ 0x28
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f001 f905 	bl	8003938 <RCCEx_PLL3_Config>
 800272e:	4603      	mov	r3, r0
 8002730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002734:	e006      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800273c:	e002      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800273e:	bf00      	nop
 8002740:	e000      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10b      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800274c:	4b8e      	ldr	r3, [pc, #568]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800274e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002750:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002758:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800275c:	4a8a      	ldr	r2, [pc, #552]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800275e:	430b      	orrs	r3, r1
 8002760:	6593      	str	r3, [r2, #88]	@ 0x58
 8002762:	e003      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002768:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800276c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002778:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002782:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002786:	460b      	mov	r3, r1
 8002788:	4313      	orrs	r3, r2
 800278a:	d03a      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800278c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002792:	2b30      	cmp	r3, #48	@ 0x30
 8002794:	d01f      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002796:	2b30      	cmp	r3, #48	@ 0x30
 8002798:	d819      	bhi.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800279a:	2b20      	cmp	r3, #32
 800279c:	d00c      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800279e:	2b20      	cmp	r3, #32
 80027a0:	d815      	bhi.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d019      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80027a6:	2b10      	cmp	r3, #16
 80027a8:	d111      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027aa:	4b77      	ldr	r3, [pc, #476]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ae:	4a76      	ldr	r2, [pc, #472]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80027b6:	e011      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80027b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027bc:	3308      	adds	r3, #8
 80027be:	2102      	movs	r1, #2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 f807 	bl	80037d4 <RCCEx_PLL2_Config>
 80027c6:	4603      	mov	r3, r0
 80027c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80027cc:	e006      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80027d4:	e002      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80027d6:	bf00      	nop
 80027d8:	e000      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80027da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10a      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80027e4:	4b68      	ldr	r3, [pc, #416]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80027ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f2:	4a65      	ldr	r2, [pc, #404]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027f4:	430b      	orrs	r3, r1
 80027f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027f8:	e003      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800280e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002812:	2300      	movs	r3, #0
 8002814:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002818:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800281c:	460b      	mov	r3, r1
 800281e:	4313      	orrs	r3, r2
 8002820:	d051      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002828:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800282c:	d035      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800282e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002832:	d82e      	bhi.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002834:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002838:	d031      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800283a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800283e:	d828      	bhi.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002840:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002844:	d01a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002846:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800284a:	d822      	bhi.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002854:	d007      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002856:	e01c      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002858:	4b4b      	ldr	r3, [pc, #300]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	4a4a      	ldr	r2, [pc, #296]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800285e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002862:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002864:	e01c      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800286a:	3308      	adds	r3, #8
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f000 ffb0 	bl	80037d4 <RCCEx_PLL2_Config>
 8002874:	4603      	mov	r3, r0
 8002876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800287a:	e011      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800287c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002880:	3328      	adds	r3, #40	@ 0x28
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f001 f857 	bl	8003938 <RCCEx_PLL3_Config>
 800288a:	4603      	mov	r3, r0
 800288c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002890:	e006      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002898:	e002      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800289a:	bf00      	nop
 800289c:	e000      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800289e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80028a8:	4b37      	ldr	r3, [pc, #220]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80028b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028b6:	4a34      	ldr	r2, [pc, #208]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028b8:	430b      	orrs	r3, r1
 80028ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80028bc:	e003      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80028c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80028d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80028d6:	2300      	movs	r3, #0
 80028d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80028dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80028e0:	460b      	mov	r3, r1
 80028e2:	4313      	orrs	r3, r2
 80028e4:	d056      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80028e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028f0:	d033      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80028f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028f6:	d82c      	bhi.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80028f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80028fc:	d02f      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80028fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002902:	d826      	bhi.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002904:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002908:	d02b      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800290a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800290e:	d820      	bhi.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002910:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002914:	d012      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002916:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800291a:	d81a      	bhi.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800291c:	2b00      	cmp	r3, #0
 800291e:	d022      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002924:	d115      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800292a:	3308      	adds	r3, #8
 800292c:	2101      	movs	r1, #1
 800292e:	4618      	mov	r0, r3
 8002930:	f000 ff50 	bl	80037d4 <RCCEx_PLL2_Config>
 8002934:	4603      	mov	r3, r0
 8002936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800293a:	e015      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800293c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002940:	3328      	adds	r3, #40	@ 0x28
 8002942:	2101      	movs	r1, #1
 8002944:	4618      	mov	r0, r3
 8002946:	f000 fff7 	bl	8003938 <RCCEx_PLL3_Config>
 800294a:	4603      	mov	r3, r0
 800294c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002950:	e00a      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002958:	e006      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800295a:	bf00      	nop
 800295c:	e004      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800295e:	bf00      	nop
 8002960:	e002      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002962:	bf00      	nop
 8002964:	e000      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10d      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002970:	4b05      	ldr	r3, [pc, #20]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002974:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800297c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800297e:	4a02      	ldr	r2, [pc, #8]	@ (8002988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002980:	430b      	orrs	r3, r1
 8002982:	6513      	str	r3, [r2, #80]	@ 0x50
 8002984:	e006      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002986:	bf00      	nop
 8002988:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800298c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002990:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80029a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80029a4:	2300      	movs	r3, #0
 80029a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80029aa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4313      	orrs	r3, r2
 80029b2:	d055      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80029b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80029bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029c0:	d033      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80029c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029c6:	d82c      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80029c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029cc:	d02f      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029d2:	d826      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80029d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80029d8:	d02b      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80029da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80029de:	d820      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80029e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029e4:	d012      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80029e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029ea:	d81a      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d022      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80029f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029f4:	d115      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029fa:	3308      	adds	r3, #8
 80029fc:	2101      	movs	r1, #1
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 fee8 	bl	80037d4 <RCCEx_PLL2_Config>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002a0a:	e015      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a10:	3328      	adds	r3, #40	@ 0x28
 8002a12:	2101      	movs	r1, #1
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 ff8f 	bl	8003938 <RCCEx_PLL3_Config>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002a20:	e00a      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a28:	e006      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a2a:	bf00      	nop
 8002a2c:	e004      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a2e:	bf00      	nop
 8002a30:	e002      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a32:	bf00      	nop
 8002a34:	e000      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10b      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002a40:	4ba3      	ldr	r3, [pc, #652]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a44:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002a50:	4a9f      	ldr	r2, [pc, #636]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a52:	430b      	orrs	r3, r1
 8002a54:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a56:	e003      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a68:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a70:	2300      	movs	r3, #0
 8002a72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002a76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	d037      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a8a:	d00e      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002a8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a90:	d816      	bhi.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d018      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002a96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a9a:	d111      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a9c:	4b8c      	ldr	r3, [pc, #560]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa0:	4a8b      	ldr	r2, [pc, #556]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002aa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002aa8:	e00f      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aae:	3308      	adds	r3, #8
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fe8e 	bl	80037d4 <RCCEx_PLL2_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002abe:	e004      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ac6:	e000      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10a      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ad2:	4b7f      	ldr	r3, [pc, #508]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae0:	4a7b      	ldr	r2, [pc, #492]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ae2:	430b      	orrs	r3, r1
 8002ae4:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ae6:	e003      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002aec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002afc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b00:	2300      	movs	r3, #0
 8002b02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002b06:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	d039      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d81c      	bhi.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002b20 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b20:	08002b5d 	.word	0x08002b5d
 8002b24:	08002b31 	.word	0x08002b31
 8002b28:	08002b3f 	.word	0x08002b3f
 8002b2c:	08002b5d 	.word	0x08002b5d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b30:	4b67      	ldr	r3, [pc, #412]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b34:	4a66      	ldr	r2, [pc, #408]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002b3c:	e00f      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b42:	3308      	adds	r3, #8
 8002b44:	2102      	movs	r1, #2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 fe44 	bl	80037d4 <RCCEx_PLL2_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002b52:	e004      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b5a:	e000      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10a      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002b66:	4b5a      	ldr	r3, [pc, #360]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6a:	f023 0103 	bic.w	r1, r3, #3
 8002b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b74:	4a56      	ldr	r2, [pc, #344]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b76:	430b      	orrs	r3, r1
 8002b78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b7a:	e003      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002b90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b94:	2300      	movs	r3, #0
 8002b96:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b9a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f000 809f 	beq.w	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ba6:	4b4b      	ldr	r3, [pc, #300]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a4a      	ldr	r2, [pc, #296]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bb2:	f7fe f87f 	bl	8000cb4 <HAL_GetTick>
 8002bb6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bba:	e00b      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbc:	f7fe f87a 	bl	8000cb4 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b64      	cmp	r3, #100	@ 0x64
 8002bca:	d903      	bls.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002bd2:	e005      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bd4:	4b3f      	ldr	r3, [pc, #252]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0ed      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002be0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d179      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002be8:	4b39      	ldr	r3, [pc, #228]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bf0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002bf4:	4053      	eors	r3, r2
 8002bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d015      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bfe:	4b34      	ldr	r3, [pc, #208]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c06:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c0a:	4b31      	ldr	r3, [pc, #196]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0e:	4a30      	ldr	r2, [pc, #192]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c14:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c16:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1a:	4a2d      	ldr	r2, [pc, #180]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c20:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002c22:	4a2b      	ldr	r2, [pc, #172]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c28:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002c32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c36:	d118      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fe f83c 	bl	8000cb4 <HAL_GetTick>
 8002c3c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c40:	e00d      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7fe f837 	bl	8000cb4 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002c4c:	1ad2      	subs	r2, r2, r3
 8002c4e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d903      	bls.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002c5c:	e005      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0eb      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d129      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002c7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c82:	d10e      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002c84:	4b12      	ldr	r3, [pc, #72]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002c94:	091a      	lsrs	r2, r3, #4
 8002c96:	4b10      	ldr	r3, [pc, #64]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	6113      	str	r3, [r2, #16]
 8002ca0:	e005      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ca8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002cac:	6113      	str	r3, [r2, #16]
 8002cae:	4b08      	ldr	r3, [pc, #32]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cb0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbe:	4a04      	ldr	r2, [pc, #16]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc4:	e00e      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002cce:	e009      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002cd0:	58024400 	.word	0x58024400
 8002cd4:	58024800 	.word	0x58024800
 8002cd8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ce0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cec:	f002 0301 	and.w	r3, r2, #1
 8002cf0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002cfa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f000 8089 	beq.w	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d0c:	2b28      	cmp	r3, #40	@ 0x28
 8002d0e:	d86b      	bhi.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002d10:	a201      	add	r2, pc, #4	@ (adr r2, 8002d18 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d16:	bf00      	nop
 8002d18:	08002df1 	.word	0x08002df1
 8002d1c:	08002de9 	.word	0x08002de9
 8002d20:	08002de9 	.word	0x08002de9
 8002d24:	08002de9 	.word	0x08002de9
 8002d28:	08002de9 	.word	0x08002de9
 8002d2c:	08002de9 	.word	0x08002de9
 8002d30:	08002de9 	.word	0x08002de9
 8002d34:	08002de9 	.word	0x08002de9
 8002d38:	08002dbd 	.word	0x08002dbd
 8002d3c:	08002de9 	.word	0x08002de9
 8002d40:	08002de9 	.word	0x08002de9
 8002d44:	08002de9 	.word	0x08002de9
 8002d48:	08002de9 	.word	0x08002de9
 8002d4c:	08002de9 	.word	0x08002de9
 8002d50:	08002de9 	.word	0x08002de9
 8002d54:	08002de9 	.word	0x08002de9
 8002d58:	08002dd3 	.word	0x08002dd3
 8002d5c:	08002de9 	.word	0x08002de9
 8002d60:	08002de9 	.word	0x08002de9
 8002d64:	08002de9 	.word	0x08002de9
 8002d68:	08002de9 	.word	0x08002de9
 8002d6c:	08002de9 	.word	0x08002de9
 8002d70:	08002de9 	.word	0x08002de9
 8002d74:	08002de9 	.word	0x08002de9
 8002d78:	08002df1 	.word	0x08002df1
 8002d7c:	08002de9 	.word	0x08002de9
 8002d80:	08002de9 	.word	0x08002de9
 8002d84:	08002de9 	.word	0x08002de9
 8002d88:	08002de9 	.word	0x08002de9
 8002d8c:	08002de9 	.word	0x08002de9
 8002d90:	08002de9 	.word	0x08002de9
 8002d94:	08002de9 	.word	0x08002de9
 8002d98:	08002df1 	.word	0x08002df1
 8002d9c:	08002de9 	.word	0x08002de9
 8002da0:	08002de9 	.word	0x08002de9
 8002da4:	08002de9 	.word	0x08002de9
 8002da8:	08002de9 	.word	0x08002de9
 8002dac:	08002de9 	.word	0x08002de9
 8002db0:	08002de9 	.word	0x08002de9
 8002db4:	08002de9 	.word	0x08002de9
 8002db8:	08002df1 	.word	0x08002df1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc0:	3308      	adds	r3, #8
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fd05 	bl	80037d4 <RCCEx_PLL2_Config>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002dd0:	e00f      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd6:	3328      	adds	r3, #40	@ 0x28
 8002dd8:	2101      	movs	r1, #1
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 fdac 	bl	8003938 <RCCEx_PLL3_Config>
 8002de0:	4603      	mov	r3, r0
 8002de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002de6:	e004      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002dee:	e000      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10a      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002dfa:	4bbf      	ldr	r3, [pc, #764]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e08:	4abb      	ldr	r2, [pc, #748]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002e0a:	430b      	orrs	r3, r1
 8002e0c:	6553      	str	r3, [r2, #84]	@ 0x54
 8002e0e:	e003      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e20:	f002 0302 	and.w	r3, r2, #2
 8002e24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002e2e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002e32:	460b      	mov	r3, r1
 8002e34:	4313      	orrs	r3, r2
 8002e36:	d041      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e3e:	2b05      	cmp	r3, #5
 8002e40:	d824      	bhi.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002e42:	a201      	add	r2, pc, #4	@ (adr r2, 8002e48 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e95 	.word	0x08002e95
 8002e4c:	08002e61 	.word	0x08002e61
 8002e50:	08002e77 	.word	0x08002e77
 8002e54:	08002e95 	.word	0x08002e95
 8002e58:	08002e95 	.word	0x08002e95
 8002e5c:	08002e95 	.word	0x08002e95
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e64:	3308      	adds	r3, #8
 8002e66:	2101      	movs	r1, #1
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fcb3 	bl	80037d4 <RCCEx_PLL2_Config>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002e74:	e00f      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e7a:	3328      	adds	r3, #40	@ 0x28
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fd5a 	bl	8003938 <RCCEx_PLL3_Config>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002e8a:	e004      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e92:	e000      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10a      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002e9e:	4b96      	ldr	r3, [pc, #600]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea2:	f023 0107 	bic.w	r1, r3, #7
 8002ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eaa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002eac:	4a92      	ldr	r2, [pc, #584]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	6553      	str	r3, [r2, #84]	@ 0x54
 8002eb2:	e003      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec4:	f002 0304 	and.w	r3, r2, #4
 8002ec8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ed2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	d044      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ee4:	2b05      	cmp	r3, #5
 8002ee6:	d825      	bhi.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eee:	bf00      	nop
 8002ef0:	08002f3d 	.word	0x08002f3d
 8002ef4:	08002f09 	.word	0x08002f09
 8002ef8:	08002f1f 	.word	0x08002f1f
 8002efc:	08002f3d 	.word	0x08002f3d
 8002f00:	08002f3d 	.word	0x08002f3d
 8002f04:	08002f3d 	.word	0x08002f3d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f0c:	3308      	adds	r3, #8
 8002f0e:	2101      	movs	r1, #1
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 fc5f 	bl	80037d4 <RCCEx_PLL2_Config>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002f1c:	e00f      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f22:	3328      	adds	r3, #40	@ 0x28
 8002f24:	2101      	movs	r1, #1
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fd06 	bl	8003938 <RCCEx_PLL3_Config>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002f32:	e004      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f3a:	e000      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002f3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10b      	bne.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f46:	4b6c      	ldr	r3, [pc, #432]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4a:	f023 0107 	bic.w	r1, r3, #7
 8002f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f56:	4a68      	ldr	r2, [pc, #416]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f5c:	e003      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6e:	f002 0320 	and.w	r3, r2, #32
 8002f72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002f76:	2300      	movs	r3, #0
 8002f78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002f80:	460b      	mov	r3, r1
 8002f82:	4313      	orrs	r3, r2
 8002f84:	d055      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f92:	d033      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f98:	d82c      	bhi.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f9e:	d02f      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fa4:	d826      	bhi.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002fa6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002faa:	d02b      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002fac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002fb0:	d820      	bhi.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002fb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fb6:	d012      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002fb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fbc:	d81a      	bhi.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d022      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8002fc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fc6:	d115      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fcc:	3308      	adds	r3, #8
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fbff 	bl	80037d4 <RCCEx_PLL2_Config>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002fdc:	e015      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fe2:	3328      	adds	r3, #40	@ 0x28
 8002fe4:	2102      	movs	r1, #2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fca6 	bl	8003938 <RCCEx_PLL3_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002ff2:	e00a      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ffa:	e006      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002ffc:	bf00      	nop
 8002ffe:	e004      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003000:	bf00      	nop
 8003002:	e002      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003004:	bf00      	nop
 8003006:	e000      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800300a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10b      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003012:	4b39      	ldr	r3, [pc, #228]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003016:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800301a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003022:	4a35      	ldr	r2, [pc, #212]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003024:	430b      	orrs	r3, r1
 8003026:	6553      	str	r3, [r2, #84]	@ 0x54
 8003028:	e003      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800302a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800302e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800303e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003042:	2300      	movs	r3, #0
 8003044:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003048:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800304c:	460b      	mov	r3, r1
 800304e:	4313      	orrs	r3, r2
 8003050:	d058      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003056:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800305a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800305e:	d033      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003060:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003064:	d82c      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800306a:	d02f      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800306c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003070:	d826      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003072:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003076:	d02b      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003078:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800307c:	d820      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800307e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003082:	d012      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003084:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003088:	d81a      	bhi.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d022      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800308e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003092:	d115      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003098:	3308      	adds	r3, #8
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f000 fb99 	bl	80037d4 <RCCEx_PLL2_Config>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80030a8:	e015      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ae:	3328      	adds	r3, #40	@ 0x28
 80030b0:	2102      	movs	r1, #2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fc40 	bl	8003938 <RCCEx_PLL3_Config>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80030be:	e00a      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030c6:	e006      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80030c8:	bf00      	nop
 80030ca:	e004      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80030cc:	bf00      	nop
 80030ce:	e002      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80030d0:	bf00      	nop
 80030d2:	e000      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80030d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10e      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030de:	4b06      	ldr	r3, [pc, #24]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80030e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030ee:	4a02      	ldr	r2, [pc, #8]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030f0:	430b      	orrs	r3, r1
 80030f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80030f4:	e006      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80030f6:	bf00      	nop
 80030f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003100:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003110:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003114:	2300      	movs	r3, #0
 8003116:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800311a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800311e:	460b      	mov	r3, r1
 8003120:	4313      	orrs	r3, r2
 8003122:	d055      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003128:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800312c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003130:	d033      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003132:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003136:	d82c      	bhi.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800313c:	d02f      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800313e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003142:	d826      	bhi.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003144:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003148:	d02b      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800314a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800314e:	d820      	bhi.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003150:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003154:	d012      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003156:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800315a:	d81a      	bhi.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d022      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003160:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003164:	d115      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800316a:	3308      	adds	r3, #8
 800316c:	2100      	movs	r1, #0
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fb30 	bl	80037d4 <RCCEx_PLL2_Config>
 8003174:	4603      	mov	r3, r0
 8003176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800317a:	e015      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800317c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003180:	3328      	adds	r3, #40	@ 0x28
 8003182:	2102      	movs	r1, #2
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fbd7 	bl	8003938 <RCCEx_PLL3_Config>
 800318a:	4603      	mov	r3, r0
 800318c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003190:	e00a      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003198:	e006      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800319a:	bf00      	nop
 800319c:	e004      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800319e:	bf00      	nop
 80031a0:	e002      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80031a2:	bf00      	nop
 80031a4:	e000      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80031a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10b      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80031b0:	4ba1      	ldr	r3, [pc, #644]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80031b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80031c0:	4a9d      	ldr	r2, [pc, #628]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031c2:	430b      	orrs	r3, r1
 80031c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80031c6:	e003      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80031d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	f002 0308 	and.w	r3, r2, #8
 80031dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031e0:	2300      	movs	r3, #0
 80031e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80031ea:	460b      	mov	r3, r1
 80031ec:	4313      	orrs	r3, r2
 80031ee:	d01e      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80031f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031fc:	d10c      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80031fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003202:	3328      	adds	r3, #40	@ 0x28
 8003204:	2102      	movs	r1, #2
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fb96 	bl	8003938 <RCCEx_PLL3_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003218:	4b87      	ldr	r3, [pc, #540]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800321a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003224:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003228:	4a83      	ldr	r2, [pc, #524]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800322a:	430b      	orrs	r3, r1
 800322c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800322e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003236:	f002 0310 	and.w	r3, r2, #16
 800323a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800323e:	2300      	movs	r3, #0
 8003240:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003244:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003248:	460b      	mov	r3, r1
 800324a:	4313      	orrs	r3, r2
 800324c:	d01e      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800324e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003252:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800325a:	d10c      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800325c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003260:	3328      	adds	r3, #40	@ 0x28
 8003262:	2102      	movs	r1, #2
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fb67 	bl	8003938 <RCCEx_PLL3_Config>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003276:	4b70      	ldr	r3, [pc, #448]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800327e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003282:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003286:	4a6c      	ldr	r2, [pc, #432]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003288:	430b      	orrs	r3, r1
 800328a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800328c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003298:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800329c:	2300      	movs	r3, #0
 800329e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80032a6:	460b      	mov	r3, r1
 80032a8:	4313      	orrs	r3, r2
 80032aa:	d03e      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80032ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80032b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032b8:	d022      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80032ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80032be:	d81b      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c8:	d00b      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80032ca:	e015      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d0:	3308      	adds	r3, #8
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fa7d 	bl	80037d4 <RCCEx_PLL2_Config>
 80032da:	4603      	mov	r3, r0
 80032dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80032e0:	e00f      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e6:	3328      	adds	r3, #40	@ 0x28
 80032e8:	2102      	movs	r1, #2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fb24 	bl	8003938 <RCCEx_PLL3_Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80032f6:	e004      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032fe:	e000      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10b      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800330a:	4b4b      	ldr	r3, [pc, #300]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800330c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003316:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800331a:	4a47      	ldr	r2, [pc, #284]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800331c:	430b      	orrs	r3, r1
 800331e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003320:	e003      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003326:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800332a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003332:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003336:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003338:	2300      	movs	r3, #0
 800333a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800333c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003340:	460b      	mov	r3, r1
 8003342:	4313      	orrs	r3, r2
 8003344:	d03b      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003352:	d01f      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003354:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003358:	d818      	bhi.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800335a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800335e:	d003      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003360:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003364:	d007      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003366:	e011      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003368:	4b33      	ldr	r3, [pc, #204]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800336a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336c:	4a32      	ldr	r2, [pc, #200]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800336e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003372:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003374:	e00f      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800337a:	3328      	adds	r3, #40	@ 0x28
 800337c:	2101      	movs	r1, #1
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fada 	bl	8003938 <RCCEx_PLL3_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800338a:	e004      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003392:	e000      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10b      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800339e:	4b26      	ldr	r3, [pc, #152]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80033a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ae:	4a22      	ldr	r2, [pc, #136]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033b0:	430b      	orrs	r3, r1
 80033b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80033b4:	e003      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80033be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80033ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80033cc:	2300      	movs	r3, #0
 80033ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80033d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80033d4:	460b      	mov	r3, r1
 80033d6:	4313      	orrs	r3, r2
 80033d8:	d034      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80033da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80033e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e8:	d007      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80033ea:	e011      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ec:	4b12      	ldr	r3, [pc, #72]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f0:	4a11      	ldr	r2, [pc, #68]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80033f8:	e00e      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fe:	3308      	adds	r3, #8
 8003400:	2102      	movs	r1, #2
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f9e6 	bl	80037d4 <RCCEx_PLL2_Config>
 8003408:	4603      	mov	r3, r0
 800340a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800340e:	e003      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003418:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10d      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003420:	4b05      	ldr	r3, [pc, #20]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003424:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800342c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800342e:	4a02      	ldr	r2, [pc, #8]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003430:	430b      	orrs	r3, r1
 8003432:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003434:	e006      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003436:	bf00      	nop
 8003438:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003440:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003450:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003452:	2300      	movs	r3, #0
 8003454:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003456:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800345a:	460b      	mov	r3, r1
 800345c:	4313      	orrs	r3, r2
 800345e:	d00c      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003464:	3328      	adds	r3, #40	@ 0x28
 8003466:	2102      	movs	r1, #2
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fa65 	bl	8003938 <RCCEx_PLL3_Config>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800347a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003482:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003486:	663b      	str	r3, [r7, #96]	@ 0x60
 8003488:	2300      	movs	r3, #0
 800348a:	667b      	str	r3, [r7, #100]	@ 0x64
 800348c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003490:	460b      	mov	r3, r1
 8003492:	4313      	orrs	r3, r2
 8003494:	d038      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800349e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034a2:	d018      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80034a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034a8:	d811      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80034aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034ae:	d014      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80034b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034b4:	d80b      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d011      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80034ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034be:	d106      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c0:	4bc3      	ldr	r3, [pc, #780]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c4:	4ac2      	ldr	r2, [pc, #776]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80034cc:	e008      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034d4:	e004      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80034d6:	bf00      	nop
 80034d8:	e002      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80034da:	bf00      	nop
 80034dc:	e000      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80034de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10b      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034e8:	4bb9      	ldr	r3, [pc, #740]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ec:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80034f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034f8:	4ab5      	ldr	r2, [pc, #724]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034fa:	430b      	orrs	r3, r1
 80034fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80034fe:	e003      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003500:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003504:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003510:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003514:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003516:	2300      	movs	r3, #0
 8003518:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800351a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800351e:	460b      	mov	r3, r1
 8003520:	4313      	orrs	r3, r2
 8003522:	d009      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003524:	4baa      	ldr	r3, [pc, #680]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003528:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800352c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003532:	4aa7      	ldr	r2, [pc, #668]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003534:	430b      	orrs	r3, r1
 8003536:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003544:	653b      	str	r3, [r7, #80]	@ 0x50
 8003546:	2300      	movs	r3, #0
 8003548:	657b      	str	r3, [r7, #84]	@ 0x54
 800354a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800354e:	460b      	mov	r3, r1
 8003550:	4313      	orrs	r3, r2
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003554:	4b9e      	ldr	r3, [pc, #632]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800355c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003560:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003564:	4a9a      	ldr	r2, [pc, #616]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003566:	430b      	orrs	r3, r1
 8003568:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800356a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003572:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003576:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003578:	2300      	movs	r3, #0
 800357a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800357c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003580:	460b      	mov	r3, r1
 8003582:	4313      	orrs	r3, r2
 8003584:	d009      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003586:	4b92      	ldr	r3, [pc, #584]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800358a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800358e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003594:	4a8e      	ldr	r2, [pc, #568]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003596:	430b      	orrs	r3, r1
 8003598:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800359a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80035a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80035a8:	2300      	movs	r3, #0
 80035aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80035b0:	460b      	mov	r3, r1
 80035b2:	4313      	orrs	r3, r2
 80035b4:	d00e      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035b6:	4b86      	ldr	r3, [pc, #536]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	4a85      	ldr	r2, [pc, #532]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80035c0:	6113      	str	r3, [r2, #16]
 80035c2:	4b83      	ldr	r3, [pc, #524]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035c4:	6919      	ldr	r1, [r3, #16]
 80035c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80035ce:	4a80      	ldr	r2, [pc, #512]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80035d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035dc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80035e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035e2:	2300      	movs	r3, #0
 80035e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80035ea:	460b      	mov	r3, r1
 80035ec:	4313      	orrs	r3, r2
 80035ee:	d009      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80035f0:	4b77      	ldr	r3, [pc, #476]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80035f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035fe:	4a74      	ldr	r2, [pc, #464]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003600:	430b      	orrs	r3, r1
 8003602:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003610:	633b      	str	r3, [r7, #48]	@ 0x30
 8003612:	2300      	movs	r3, #0
 8003614:	637b      	str	r3, [r7, #52]	@ 0x34
 8003616:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800361a:	460b      	mov	r3, r1
 800361c:	4313      	orrs	r3, r2
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003620:	4b6b      	ldr	r3, [pc, #428]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003624:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003630:	4a67      	ldr	r2, [pc, #412]	@ (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003632:	430b      	orrs	r3, r1
 8003634:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363e:	2100      	movs	r1, #0
 8003640:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003648:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800364c:	460b      	mov	r3, r1
 800364e:	4313      	orrs	r3, r2
 8003650:	d011      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003656:	3308      	adds	r3, #8
 8003658:	2100      	movs	r1, #0
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f8ba 	bl	80037d4 <RCCEx_PLL2_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003672:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367e:	2100      	movs	r1, #0
 8003680:	6239      	str	r1, [r7, #32]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	627b      	str	r3, [r7, #36]	@ 0x24
 8003688:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800368c:	460b      	mov	r3, r1
 800368e:	4313      	orrs	r3, r2
 8003690:	d011      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003696:	3308      	adds	r3, #8
 8003698:	2101      	movs	r1, #1
 800369a:	4618      	mov	r0, r3
 800369c:	f000 f89a 	bl	80037d4 <RCCEx_PLL2_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80036a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80036b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036be:	2100      	movs	r1, #0
 80036c0:	61b9      	str	r1, [r7, #24]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80036cc:	460b      	mov	r3, r1
 80036ce:	4313      	orrs	r3, r2
 80036d0:	d011      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d6:	3308      	adds	r3, #8
 80036d8:	2102      	movs	r1, #2
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 f87a 	bl	80037d4 <RCCEx_PLL2_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80036e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80036f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	2100      	movs	r1, #0
 8003700:	6139      	str	r1, [r7, #16]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800370c:	460b      	mov	r3, r1
 800370e:	4313      	orrs	r3, r2
 8003710:	d011      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003716:	3328      	adds	r3, #40	@ 0x28
 8003718:	2100      	movs	r1, #0
 800371a:	4618      	mov	r0, r3
 800371c:	f000 f90c 	bl	8003938 <RCCEx_PLL3_Config>
 8003720:	4603      	mov	r3, r0
 8003722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003732:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373e:	2100      	movs	r1, #0
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800374c:	460b      	mov	r3, r1
 800374e:	4313      	orrs	r3, r2
 8003750:	d011      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003756:	3328      	adds	r3, #40	@ 0x28
 8003758:	2101      	movs	r1, #1
 800375a:	4618      	mov	r0, r3
 800375c:	f000 f8ec 	bl	8003938 <RCCEx_PLL3_Config>
 8003760:	4603      	mov	r3, r0
 8003762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800376e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003772:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377e:	2100      	movs	r1, #0
 8003780:	6039      	str	r1, [r7, #0]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	607b      	str	r3, [r7, #4]
 8003788:	e9d7 1200 	ldrd	r1, r2, [r7]
 800378c:	460b      	mov	r3, r1
 800378e:	4313      	orrs	r3, r2
 8003790:	d011      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003796:	3328      	adds	r3, #40	@ 0x28
 8003798:	2102      	movs	r1, #2
 800379a:	4618      	mov	r0, r3
 800379c:	f000 f8cc 	bl	8003938 <RCCEx_PLL3_Config>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80037a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80037b6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	e000      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80037ca:	46bd      	mov	sp, r7
 80037cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037d0:	58024400 	.word	0x58024400

080037d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80037e2:	4b53      	ldr	r3, [pc, #332]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 80037e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	2b03      	cmp	r3, #3
 80037ec:	d101      	bne.n	80037f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e099      	b.n	8003926 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80037f2:	4b4f      	ldr	r3, [pc, #316]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a4e      	ldr	r2, [pc, #312]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 80037f8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037fe:	f7fd fa59 	bl	8000cb4 <HAL_GetTick>
 8003802:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003804:	e008      	b.n	8003818 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003806:	f7fd fa55 	bl	8000cb4 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e086      	b.n	8003926 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003818:	4b45      	ldr	r3, [pc, #276]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1f0      	bne.n	8003806 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003824:	4b42      	ldr	r3, [pc, #264]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 8003826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003828:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	031b      	lsls	r3, r3, #12
 8003832:	493f      	ldr	r1, [pc, #252]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 8003834:	4313      	orrs	r3, r2
 8003836:	628b      	str	r3, [r1, #40]	@ 0x28
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	3b01      	subs	r3, #1
 800383e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	3b01      	subs	r3, #1
 8003848:	025b      	lsls	r3, r3, #9
 800384a:	b29b      	uxth	r3, r3
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	3b01      	subs	r3, #1
 8003854:	041b      	lsls	r3, r3, #16
 8003856:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	3b01      	subs	r3, #1
 8003862:	061b      	lsls	r3, r3, #24
 8003864:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003868:	4931      	ldr	r1, [pc, #196]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 800386a:	4313      	orrs	r3, r2
 800386c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800386e:	4b30      	ldr	r3, [pc, #192]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 8003870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003872:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	492d      	ldr	r1, [pc, #180]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 800387c:	4313      	orrs	r3, r2
 800387e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003880:	4b2b      	ldr	r3, [pc, #172]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 8003882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003884:	f023 0220 	bic.w	r2, r3, #32
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	4928      	ldr	r1, [pc, #160]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 800388e:	4313      	orrs	r3, r2
 8003890:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003892:	4b27      	ldr	r3, [pc, #156]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 8003894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003896:	4a26      	ldr	r2, [pc, #152]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 8003898:	f023 0310 	bic.w	r3, r3, #16
 800389c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800389e:	4b24      	ldr	r3, [pc, #144]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 80038a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038a2:	4b24      	ldr	r3, [pc, #144]	@ (8003934 <RCCEx_PLL2_Config+0x160>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	69d2      	ldr	r2, [r2, #28]
 80038aa:	00d2      	lsls	r2, r2, #3
 80038ac:	4920      	ldr	r1, [pc, #128]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80038b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 80038b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 80038b8:	f043 0310 	orr.w	r3, r3, #16
 80038bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d106      	bne.n	80038d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80038c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 80038c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c8:	4a19      	ldr	r2, [pc, #100]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 80038ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80038ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80038d0:	e00f      	b.n	80038f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d106      	bne.n	80038e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80038d8:	4b15      	ldr	r3, [pc, #84]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 80038da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038dc:	4a14      	ldr	r2, [pc, #80]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 80038de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80038e4:	e005      	b.n	80038f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80038e6:	4b12      	ldr	r3, [pc, #72]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 80038e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ea:	4a11      	ldr	r2, [pc, #68]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 80038ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80038f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80038f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 80038f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038fe:	f7fd f9d9 	bl	8000cb4 <HAL_GetTick>
 8003902:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003904:	e008      	b.n	8003918 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003906:	f7fd f9d5 	bl	8000cb4 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e006      	b.n	8003926 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003918:	4b05      	ldr	r3, [pc, #20]	@ (8003930 <RCCEx_PLL2_Config+0x15c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003924:	7bfb      	ldrb	r3, [r7, #15]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	58024400 	.word	0x58024400
 8003934:	ffff0007 	.word	0xffff0007

08003938 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003946:	4b53      	ldr	r3, [pc, #332]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 8003948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	2b03      	cmp	r3, #3
 8003950:	d101      	bne.n	8003956 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e099      	b.n	8003a8a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003956:	4b4f      	ldr	r3, [pc, #316]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a4e      	ldr	r2, [pc, #312]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 800395c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003960:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003962:	f7fd f9a7 	bl	8000cb4 <HAL_GetTick>
 8003966:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003968:	e008      	b.n	800397c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800396a:	f7fd f9a3 	bl	8000cb4 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d901      	bls.n	800397c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e086      	b.n	8003a8a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800397c:	4b45      	ldr	r3, [pc, #276]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f0      	bne.n	800396a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003988:	4b42      	ldr	r3, [pc, #264]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 800398a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	051b      	lsls	r3, r3, #20
 8003996:	493f      	ldr	r1, [pc, #252]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 8003998:	4313      	orrs	r3, r2
 800399a:	628b      	str	r3, [r1, #40]	@ 0x28
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	025b      	lsls	r3, r3, #9
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	041b      	lsls	r3, r3, #16
 80039ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	061b      	lsls	r3, r3, #24
 80039c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80039cc:	4931      	ldr	r1, [pc, #196]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80039d2:	4b30      	ldr	r3, [pc, #192]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 80039d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	492d      	ldr	r1, [pc, #180]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80039e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 80039e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	4928      	ldr	r1, [pc, #160]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80039f6:	4b27      	ldr	r3, [pc, #156]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 80039f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fa:	4a26      	ldr	r2, [pc, #152]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 80039fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003a02:	4b24      	ldr	r3, [pc, #144]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 8003a04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a06:	4b24      	ldr	r3, [pc, #144]	@ (8003a98 <RCCEx_PLL3_Config+0x160>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	69d2      	ldr	r2, [r2, #28]
 8003a0e:	00d2      	lsls	r2, r2, #3
 8003a10:	4920      	ldr	r1, [pc, #128]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003a16:	4b1f      	ldr	r3, [pc, #124]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 8003a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 8003a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d106      	bne.n	8003a36 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003a28:	4b1a      	ldr	r3, [pc, #104]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 8003a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2c:	4a19      	ldr	r2, [pc, #100]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 8003a2e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003a34:	e00f      	b.n	8003a56 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d106      	bne.n	8003a4a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003a3c:	4b15      	ldr	r3, [pc, #84]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 8003a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a40:	4a14      	ldr	r2, [pc, #80]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 8003a42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003a48:	e005      	b.n	8003a56 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003a4a:	4b12      	ldr	r3, [pc, #72]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 8003a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4e:	4a11      	ldr	r2, [pc, #68]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 8003a50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a54:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003a56:	4b0f      	ldr	r3, [pc, #60]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a0e      	ldr	r2, [pc, #56]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 8003a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a62:	f7fd f927 	bl	8000cb4 <HAL_GetTick>
 8003a66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003a68:	e008      	b.n	8003a7c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003a6a:	f7fd f923 	bl	8000cb4 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e006      	b.n	8003a8a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003a7c:	4b05      	ldr	r3, [pc, #20]	@ (8003a94 <RCCEx_PLL3_Config+0x15c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	58024400 	.word	0x58024400
 8003a98:	ffff0007 	.word	0xffff0007

08003a9c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e10f      	b.n	8003cce <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a87      	ldr	r2, [pc, #540]	@ (8003cd8 <HAL_SPI_Init+0x23c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00f      	beq.n	8003ade <HAL_SPI_Init+0x42>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a86      	ldr	r2, [pc, #536]	@ (8003cdc <HAL_SPI_Init+0x240>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00a      	beq.n	8003ade <HAL_SPI_Init+0x42>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a84      	ldr	r2, [pc, #528]	@ (8003ce0 <HAL_SPI_Init+0x244>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d005      	beq.n	8003ade <HAL_SPI_Init+0x42>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	2b0f      	cmp	r3, #15
 8003ad8:	d901      	bls.n	8003ade <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e0f7      	b.n	8003cce <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fd08 	bl	80044f4 <SPI_GetPacketSize>
 8003ae4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a7b      	ldr	r2, [pc, #492]	@ (8003cd8 <HAL_SPI_Init+0x23c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d00c      	beq.n	8003b0a <HAL_SPI_Init+0x6e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a79      	ldr	r2, [pc, #484]	@ (8003cdc <HAL_SPI_Init+0x240>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d007      	beq.n	8003b0a <HAL_SPI_Init+0x6e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a78      	ldr	r2, [pc, #480]	@ (8003ce0 <HAL_SPI_Init+0x244>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d002      	beq.n	8003b0a <HAL_SPI_Init+0x6e>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d811      	bhi.n	8003b2e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003b0e:	4a72      	ldr	r2, [pc, #456]	@ (8003cd8 <HAL_SPI_Init+0x23c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d009      	beq.n	8003b28 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a70      	ldr	r2, [pc, #448]	@ (8003cdc <HAL_SPI_Init+0x240>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d004      	beq.n	8003b28 <HAL_SPI_Init+0x8c>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a6f      	ldr	r2, [pc, #444]	@ (8003ce0 <HAL_SPI_Init+0x244>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d104      	bne.n	8003b32 <HAL_SPI_Init+0x96>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b10      	cmp	r3, #16
 8003b2c:	d901      	bls.n	8003b32 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e0cd      	b.n	8003cce <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fc fdd6 	bl	80006f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0201 	bic.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8003b6e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b78:	d119      	bne.n	8003bae <HAL_SPI_Init+0x112>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b82:	d103      	bne.n	8003b8c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10c      	bne.n	8003bae <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003b98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b9c:	d107      	bne.n	8003bae <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003bac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00f      	beq.n	8003bda <HAL_SPI_Init+0x13e>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b06      	cmp	r3, #6
 8003bc0:	d90b      	bls.n	8003bda <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	e007      	b.n	8003bea <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003be8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69da      	ldr	r2, [r3, #28]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bfc:	ea42 0103 	orr.w	r1, r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c4a:	ea42 0103 	orr.w	r1, r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d113      	bne.n	8003c8a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c74:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c88:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0201 	bic.w	r2, r2, #1
 8003c98:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00a      	beq.n	8003cbc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40013000 	.word	0x40013000
 8003cdc:	40003800 	.word	0x40003800
 8003ce0:	40003c00 	.word	0x40003c00

08003ce4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08e      	sub	sp, #56	@ 0x38
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3320      	adds	r3, #32
 8003cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3330      	adds	r3, #48	@ 0x30
 8003d00:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d0e:	f7fc ffd1 	bl	8000cb4 <HAL_GetTick>
 8003d12:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8003d14:	887b      	ldrh	r3, [r7, #2]
 8003d16:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8003d18:	887b      	ldrh	r3, [r7, #2]
 8003d1a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d001      	beq.n	8003d2c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e310      	b.n	800434e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d005      	beq.n	8003d3e <HAL_SPI_TransmitReceive+0x5a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <HAL_SPI_TransmitReceive+0x5a>
 8003d38:	887b      	ldrh	r3, [r7, #2]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e305      	b.n	800434e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_SPI_TransmitReceive+0x6c>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e2fe      	b.n	800434e <HAL_SPI_TransmitReceive+0x66a>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2205      	movs	r2, #5
 8003d5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	887a      	ldrh	r2, [r7, #2]
 8003d72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	887a      	ldrh	r2, [r7, #2]
 8003d7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	887a      	ldrh	r2, [r7, #2]
 8003d88:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	887a      	ldrh	r2, [r7, #2]
 8003d90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8003dae:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a70      	ldr	r2, [pc, #448]	@ (8003f78 <HAL_SPI_TransmitReceive+0x294>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d009      	beq.n	8003dce <HAL_SPI_TransmitReceive+0xea>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a6f      	ldr	r2, [pc, #444]	@ (8003f7c <HAL_SPI_TransmitReceive+0x298>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d004      	beq.n	8003dce <HAL_SPI_TransmitReceive+0xea>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a6d      	ldr	r2, [pc, #436]	@ (8003f80 <HAL_SPI_TransmitReceive+0x29c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d102      	bne.n	8003dd4 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8003dce:	2310      	movs	r3, #16
 8003dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dd2:	e001      	b.n	8003dd8 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8003dd4:	2308      	movs	r3, #8
 8003dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	4b69      	ldr	r3, [pc, #420]	@ (8003f84 <HAL_SPI_TransmitReceive+0x2a0>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	8879      	ldrh	r1, [r7, #2]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	6812      	ldr	r2, [r2, #0]
 8003de8:	430b      	orrs	r3, r1
 8003dea:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e04:	d107      	bne.n	8003e16 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	2b0f      	cmp	r3, #15
 8003e1c:	f240 80a2 	bls.w	8003f64 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8003e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e22:	089b      	lsrs	r3, r3, #2
 8003e24:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003e26:	e094      	b.n	8003f52 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d120      	bne.n	8003e78 <HAL_SPI_TransmitReceive+0x194>
 8003e36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01d      	beq.n	8003e78 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8003e3c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003e3e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8003e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e42:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d217      	bcs.n	8003e78 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6812      	ldr	r2, [r2, #0]
 8003e52:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e58:	1d1a      	adds	r2, r3, #4
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003e76:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8003e80:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d065      	beq.n	8003f52 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d118      	bne.n	8003ec6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e9c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e9e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ea4:	1d1a      	adds	r2, r3, #4
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003ec2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003ec4:	e045      	b.n	8003f52 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8003ec6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003ec8:	8bfb      	ldrh	r3, [r7, #30]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d21d      	bcs.n	8003f0a <HAL_SPI_TransmitReceive+0x226>
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d018      	beq.n	8003f0a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ee0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ee2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ee8:	1d1a      	adds	r2, r3, #4
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8003f06:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003f08:	e023      	b.n	8003f52 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f0a:	f7fc fed3 	bl	8000cb4 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d803      	bhi.n	8003f22 <HAL_SPI_TransmitReceive+0x23e>
 8003f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f20:	d102      	bne.n	8003f28 <HAL_SPI_TransmitReceive+0x244>
 8003f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d114      	bne.n	8003f52 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 fa15 	bl	8004358 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e1fd      	b.n	800434e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003f52:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f47f af67 	bne.w	8003e28 <HAL_SPI_TransmitReceive+0x144>
 8003f5a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f47f af63 	bne.w	8003e28 <HAL_SPI_TransmitReceive+0x144>
 8003f62:	e1ce      	b.n	8004302 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2b07      	cmp	r3, #7
 8003f6a:	f240 81c2 	bls.w	80042f2 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8003f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f70:	085b      	lsrs	r3, r3, #1
 8003f72:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003f74:	e0c9      	b.n	800410a <HAL_SPI_TransmitReceive+0x426>
 8003f76:	bf00      	nop
 8003f78:	40013000 	.word	0x40013000
 8003f7c:	40003800 	.word	0x40003800
 8003f80:	40003c00 	.word	0x40003c00
 8003f84:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d11f      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x2f2>
 8003f96:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d01c      	beq.n	8003fd6 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8003f9c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003f9e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8003fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d216      	bcs.n	8003fd6 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fac:	881a      	ldrh	r2, [r3, #0]
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb6:	1c9a      	adds	r2, r3, #2
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003fd4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8003fde:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 8092 	beq.w	800410a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d118      	bne.n	8004026 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ff8:	6a3a      	ldr	r2, [r7, #32]
 8003ffa:	8812      	ldrh	r2, [r2, #0]
 8003ffc:	b292      	uxth	r2, r2
 8003ffe:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004004:	1c9a      	adds	r2, r3, #2
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004022:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004024:	e071      	b.n	800410a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8004026:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004028:	8bfb      	ldrh	r3, [r7, #30]
 800402a:	429a      	cmp	r2, r3
 800402c:	d228      	bcs.n	8004080 <HAL_SPI_TransmitReceive+0x39c>
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d023      	beq.n	8004080 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800403c:	6a3a      	ldr	r2, [r7, #32]
 800403e:	8812      	ldrh	r2, [r2, #0]
 8004040:	b292      	uxth	r2, r2
 8004042:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004048:	1c9a      	adds	r2, r3, #2
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004052:	6a3a      	ldr	r2, [r7, #32]
 8004054:	8812      	ldrh	r2, [r2, #0]
 8004056:	b292      	uxth	r2, r2
 8004058:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800405e:	1c9a      	adds	r2, r3, #2
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b02      	subs	r3, #2
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800407c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800407e:	e044      	b.n	800410a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8004080:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004082:	2b01      	cmp	r3, #1
 8004084:	d11d      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x3de>
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d018      	beq.n	80040c2 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004094:	6a3a      	ldr	r2, [r7, #32]
 8004096:	8812      	ldrh	r2, [r2, #0]
 8004098:	b292      	uxth	r2, r2
 800409a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040a0:	1c9a      	adds	r2, r3, #2
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80040be:	853b      	strh	r3, [r7, #40]	@ 0x28
 80040c0:	e023      	b.n	800410a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040c2:	f7fc fdf7 	bl	8000cb4 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d803      	bhi.n	80040da <HAL_SPI_TransmitReceive+0x3f6>
 80040d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d8:	d102      	bne.n	80040e0 <HAL_SPI_TransmitReceive+0x3fc>
 80040da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d114      	bne.n	800410a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 f939 	bl	8004358 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e121      	b.n	800434e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800410a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800410c:	2b00      	cmp	r3, #0
 800410e:	f47f af3b 	bne.w	8003f88 <HAL_SPI_TransmitReceive+0x2a4>
 8004112:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004114:	2b00      	cmp	r3, #0
 8004116:	f47f af37 	bne.w	8003f88 <HAL_SPI_TransmitReceive+0x2a4>
 800411a:	e0f2      	b.n	8004302 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b02      	cmp	r3, #2
 8004128:	d121      	bne.n	800416e <HAL_SPI_TransmitReceive+0x48a>
 800412a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01e      	beq.n	800416e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8004130:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004132:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8004134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004136:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8004138:	429a      	cmp	r2, r3
 800413a:	d218      	bcs.n	800416e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3320      	adds	r3, #32
 8004146:	7812      	ldrb	r2, [r2, #0]
 8004148:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800416c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8004176:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80ba 	beq.w	80042f2 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b01      	cmp	r3, #1
 800418a:	d11b      	bne.n	80041c4 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004198:	7812      	ldrb	r2, [r2, #0]
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80041c0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80041c2:	e096      	b.n	80042f2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80041c4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80041c6:	8bfb      	ldrh	r3, [r7, #30]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d24a      	bcs.n	8004262 <HAL_SPI_TransmitReceive+0x57e>
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d045      	beq.n	8004262 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041e2:	7812      	ldrb	r2, [r2, #0]
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041fe:	7812      	ldrb	r2, [r2, #0]
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800421a:	7812      	ldrb	r2, [r2, #0]
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004236:	7812      	ldrb	r2, [r2, #0]
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b04      	subs	r3, #4
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800425e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004260:	e047      	b.n	80042f2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8004262:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004264:	2b03      	cmp	r3, #3
 8004266:	d820      	bhi.n	80042aa <HAL_SPI_TransmitReceive+0x5c6>
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d01b      	beq.n	80042aa <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800427e:	7812      	ldrb	r2, [r2, #0]
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80042a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80042a8:	e023      	b.n	80042f2 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042aa:	f7fc fd03 	bl	8000cb4 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d803      	bhi.n	80042c2 <HAL_SPI_TransmitReceive+0x5de>
 80042ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c0:	d102      	bne.n	80042c8 <HAL_SPI_TransmitReceive+0x5e4>
 80042c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d114      	bne.n	80042f2 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f845 	bl	8004358 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e02d      	b.n	800434e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80042f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f47f af11 	bne.w	800411c <HAL_SPI_TransmitReceive+0x438>
 80042fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f47f af0d 	bne.w	800411c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004308:	2200      	movs	r2, #0
 800430a:	2108      	movs	r1, #8
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f8c3 	bl	8004498 <SPI_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800431e:	f043 0220 	orr.w	r2, r3, #32
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f815 	bl	8004358 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e000      	b.n	800434e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800434c:	2300      	movs	r3, #0
  }
}
 800434e:	4618      	mov	r0, r3
 8004350:	3730      	adds	r7, #48	@ 0x30
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop

08004358 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0208 	orr.w	r2, r2, #8
 8004376:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0210 	orr.w	r2, r2, #16
 8004386:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0201 	bic.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6919      	ldr	r1, [r3, #16]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4b3c      	ldr	r3, [pc, #240]	@ (8004494 <SPI_CloseTransfer+0x13c>)
 80043a4:	400b      	ands	r3, r1
 80043a6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80043b6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d014      	beq.n	80043ee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00f      	beq.n	80043ee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043d4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699a      	ldr	r2, [r3, #24]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f042 0220 	orr.w	r2, r2, #32
 80043ec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d014      	beq.n	8004424 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00f      	beq.n	8004424 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800440a:	f043 0204 	orr.w	r2, r3, #4
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004422:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00f      	beq.n	800444e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004434:	f043 0201 	orr.w	r2, r3, #1
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699a      	ldr	r2, [r3, #24]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800444c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00f      	beq.n	8004478 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800445e:	f043 0208 	orr.w	r2, r3, #8
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004476:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8004488:	bf00      	nop
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	fffffc90 	.word	0xfffffc90

08004498 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	4613      	mov	r3, r2
 80044a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80044a8:	e010      	b.n	80044cc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044aa:	f7fc fc03 	bl	8000cb4 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d803      	bhi.n	80044c2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c0:	d102      	bne.n	80044c8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e00f      	b.n	80044ec <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695a      	ldr	r2, [r3, #20]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	4013      	ands	r3, r2
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	429a      	cmp	r2, r3
 80044da:	bf0c      	ite	eq
 80044dc:	2301      	moveq	r3, #1
 80044de:	2300      	movne	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	461a      	mov	r2, r3
 80044e4:	79fb      	ldrb	r3, [r7, #7]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d0df      	beq.n	80044aa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	3301      	adds	r3, #1
 8004504:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	3301      	adds	r3, #1
 800450c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	3307      	adds	r3, #7
 8004512:	08db      	lsrs	r3, r3, #3
 8004514:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	fb02 f303 	mul.w	r3, r2, r3
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
	...

0800452c <ADS131A0xReset>:



/*****begin low level functions*************************************************/
// merform hardware reset of ADC
void ADS131A0xReset(void) {
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, ADC_RST__Pin, GPIO_PIN_RESET);
 8004530:	2200      	movs	r2, #0
 8004532:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004536:	4808      	ldr	r0, [pc, #32]	@ (8004558 <ADS131A0xReset+0x2c>)
 8004538:	f7fc ff30 	bl	800139c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800453c:	2005      	movs	r0, #5
 800453e:	f7fc fbc5 	bl	8000ccc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, ADC_RST__Pin, GPIO_PIN_SET);
 8004542:	2201      	movs	r2, #1
 8004544:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004548:	4803      	ldr	r0, [pc, #12]	@ (8004558 <ADS131A0xReset+0x2c>)
 800454a:	f7fc ff27 	bl	800139c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800454e:	2014      	movs	r0, #20
 8004550:	f7fc fbbc 	bl	8000ccc <HAL_Delay>
}
 8004554:	bf00      	nop
 8004556:	bd80      	pop	{r7, pc}
 8004558:	58021800 	.word	0x58021800

0800455c <ADS131A0xSetCS>:
// manage CS pin
void ADS131A0xSetCS(uint8_t state)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	71fb      	strb	r3, [r7, #7]
	if (0 == state) {
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d105      	bne.n	8004578 <ADS131A0xSetCS+0x1c>
		HAL_GPIO_WritePin(ADS131A0x_CS_GPIO_Port, ADS131A0x_CS_Pin, GPIO_PIN_RESET);
 800456c:	2200      	movs	r2, #0
 800456e:	2110      	movs	r1, #16
 8004570:	480a      	ldr	r0, [pc, #40]	@ (800459c <ADS131A0xSetCS+0x40>)
 8004572:	f7fc ff13 	bl	800139c <HAL_GPIO_WritePin>
	else if (1 == state) {
		HAL_GPIO_WritePin(ADS131A0x_CS_GPIO_Port, ADS131A0x_CS_Pin, GPIO_PIN_SET);
	}
	else
		assert(0);		//Aborts program
}
 8004576:	e00e      	b.n	8004596 <ADS131A0xSetCS+0x3a>
	else if (1 == state) {
 8004578:	79fb      	ldrb	r3, [r7, #7]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d105      	bne.n	800458a <ADS131A0xSetCS+0x2e>
		HAL_GPIO_WritePin(ADS131A0x_CS_GPIO_Port, ADS131A0x_CS_Pin, GPIO_PIN_SET);
 800457e:	2201      	movs	r2, #1
 8004580:	2110      	movs	r1, #16
 8004582:	4806      	ldr	r0, [pc, #24]	@ (800459c <ADS131A0xSetCS+0x40>)
 8004584:	f7fc ff0a 	bl	800139c <HAL_GPIO_WritePin>
}
 8004588:	e005      	b.n	8004596 <ADS131A0xSetCS+0x3a>
		assert(0);		//Aborts program
 800458a:	4b05      	ldr	r3, [pc, #20]	@ (80045a0 <ADS131A0xSetCS+0x44>)
 800458c:	4a05      	ldr	r2, [pc, #20]	@ (80045a4 <ADS131A0xSetCS+0x48>)
 800458e:	2127      	movs	r1, #39	@ 0x27
 8004590:	4805      	ldr	r0, [pc, #20]	@ (80045a8 <ADS131A0xSetCS+0x4c>)
 8004592:	f000 f905 	bl	80047a0 <__assert_func>
}
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	58020000 	.word	0x58020000
 80045a0:	080056e8 	.word	0x080056e8
 80045a4:	08005718 	.word	0x08005718
 80045a8:	080056ec 	.word	0x080056ec

080045ac <ADS131A0xXferWord>:

// receive 32 bit, simultaneously send data
void ADS131A0xXferWord(uint8_t* txData, uint8_t* rxData) {
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
	ADS131A0xSetCS(0);
 80045b6:	2000      	movs	r0, #0
 80045b8:	f7ff ffd0 	bl	800455c <ADS131A0xSetCS>
	while(hspi1.State == HAL_SPI_STATE_BUSY);
 80045bc:	bf00      	nop
 80045be:	4b0a      	ldr	r3, [pc, #40]	@ (80045e8 <ADS131A0xXferWord+0x3c>)
 80045c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d0f9      	beq.n	80045be <ADS131A0xXferWord+0x12>
	HAL_SPI_TransmitReceive(&hspi1, txData, rxData, ADS131A0x_WORD_SIZE, 100);
 80045ca:	2364      	movs	r3, #100	@ 0x64
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	2304      	movs	r3, #4
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4804      	ldr	r0, [pc, #16]	@ (80045e8 <ADS131A0xXferWord+0x3c>)
 80045d6:	f7ff fb85 	bl	8003ce4 <HAL_SPI_TransmitReceive>
	ADS131A0xSetCS(1);
 80045da:	2001      	movs	r0, #1
 80045dc:	f7ff ffbe 	bl	800455c <ADS131A0xSetCS>
}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	24000088 	.word	0x24000088

080045ec <ADS131A0xSendCmd>:
uint16_t ADS131A0xSendCmd(uint16_t cmd) {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	4603      	mov	r3, r0
 80045f4:	80fb      	strh	r3, [r7, #6]

	uint8_t txData[ADS131A0x_WORD_SIZE] = {0};
 80045f6:	2300      	movs	r3, #0
 80045f8:	613b      	str	r3, [r7, #16]
	uint8_t zeros[ADS131A0x_WORD_SIZE] = {0};
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
	static uint8_t rxData[ADS131A0x_WORD_SIZE];
	uint16_t res = 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	82fb      	strh	r3, [r7, #22]
	//split 16bit cmd in 8bit array
	txData[1] = (cmd & 0xff);
 8004602:	88fb      	ldrh	r3, [r7, #6]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	747b      	strb	r3, [r7, #17]
	txData[0] = (cmd >> 8);
 8004608:	88fb      	ldrh	r3, [r7, #6]
 800460a:	0a1b      	lsrs	r3, r3, #8
 800460c:	b29b      	uxth	r3, r3
 800460e:	b2db      	uxtb	r3, r3
 8004610:	743b      	strb	r3, [r7, #16]
	//Send the command
	ADS131A0xXferWord(txData, rxData);
 8004612:	f107 0310 	add.w	r3, r7, #16
 8004616:	490c      	ldr	r1, [pc, #48]	@ (8004648 <ADS131A0xSendCmd+0x5c>)
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff ffc7 	bl	80045ac <ADS131A0xXferWord>
	//The response of the previous cmd is in the next response
	//So send another empty cmd to get the response
	ADS131A0xXferWord(zeros, rxData);
 800461e:	f107 030c 	add.w	r3, r7, #12
 8004622:	4909      	ldr	r1, [pc, #36]	@ (8004648 <ADS131A0xSendCmd+0x5c>)
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff ffc1 	bl	80045ac <ADS131A0xXferWord>
	//Collapse response
	res = (((uint16_t)rxData[0] << 8) | rxData[1]);
 800462a:	4b07      	ldr	r3, [pc, #28]	@ (8004648 <ADS131A0xSendCmd+0x5c>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	b21a      	sxth	r2, r3
 8004632:	4b05      	ldr	r3, [pc, #20]	@ (8004648 <ADS131A0xSendCmd+0x5c>)
 8004634:	785b      	ldrb	r3, [r3, #1]
 8004636:	b21b      	sxth	r3, r3
 8004638:	4313      	orrs	r3, r2
 800463a:	b21b      	sxth	r3, r3
 800463c:	82fb      	strh	r3, [r7, #22]

	//uint8_t ucBuf[128] = {};
	//snprintf((char*)ucBuf, sizeof(ucBuf), "CMD %lu Cmd: %x, Response: %x ;\r\n", osKernelSysTick(), cmd, res);
	//CDC_Transmit_FS(ucBuf, strlen((const char *)ucBuf));

	return res;
 800463e:	8afb      	ldrh	r3, [r7, #22]

}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	24000144 	.word	0x24000144

0800464c <ADS131A0xReadRegister>:
/*****begin higher level functions***********************************************/



// read one register and return the result
uint16_t ADS131A0xReadRegister(uint8_t RegAddress) {
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	71fb      	strb	r3, [r7, #7]

	static uint16_t value = 0;

	uint16_t word = ADS131A0x_CMD_RREG | (RegAddress << 8);
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	021b      	lsls	r3, r3, #8
 800465a:	b21b      	sxth	r3, r3
 800465c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004660:	b21b      	sxth	r3, r3
 8004662:	81fb      	strh	r3, [r7, #14]

	value = ADS131A0xSendCmd(word);
 8004664:	89fb      	ldrh	r3, [r7, #14]
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff ffc0 	bl	80045ec <ADS131A0xSendCmd>
 800466c:	4603      	mov	r3, r0
 800466e:	461a      	mov	r2, r3
 8004670:	4b03      	ldr	r3, [pc, #12]	@ (8004680 <ADS131A0xReadRegister+0x34>)
 8004672:	801a      	strh	r2, [r3, #0]

	//uint8_t ucBuf[128] = {};
	//snprintf((char*)ucBuf, sizeof(ucBuf), "RREG %lu Addr: %x, Word: %x, Value: %x ;\r\n", osKernelSysTick(), RegAddress, word, value);
	//CDC_Transmit_FS(ucBuf, strlen((const char *)ucBuf));

	return value;
 8004674:	4b02      	ldr	r3, [pc, #8]	@ (8004680 <ADS131A0xReadRegister+0x34>)
 8004676:	881b      	ldrh	r3, [r3, #0]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	24000148 	.word	0x24000148

08004684 <ADS131A0xWriteRegister>:
//write single register function
uint16_t ADS131A0xWriteRegister(uint8_t addr, uint8_t data) {
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	460a      	mov	r2, r1
 800468e:	71fb      	strb	r3, [r7, #7]
 8004690:	4613      	mov	r3, r2
 8004692:	71bb      	strb	r3, [r7, #6]

	uint16_t word = ADS131A0x_CMD_WREG | (addr<<8) | data;
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	021b      	lsls	r3, r3, #8
 8004698:	b21b      	sxth	r3, r3
 800469a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800469e:	b21a      	sxth	r2, r3
 80046a0:	79bb      	ldrb	r3, [r7, #6]
 80046a2:	b21b      	sxth	r3, r3
 80046a4:	4313      	orrs	r3, r2
 80046a6:	b21b      	sxth	r3, r3
 80046a8:	81fb      	strh	r3, [r7, #14]

	uint16_t value = ADS131A0xSendCmd(word);
 80046aa:	89fb      	ldrh	r3, [r7, #14]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff ff9d 	bl	80045ec <ADS131A0xSendCmd>
 80046b2:	4603      	mov	r3, r0
 80046b4:	81bb      	strh	r3, [r7, #12]

	//uint8_t ucBuf[128] = {};
	//snprintf((char*)ucBuf, sizeof(ucBuf), "WREG %lu Addr: %x,Value: %x, ret_val: %x;\r\n", osKernelSysTick(), addr, data, value);
	//CDC_Transmit_FS(ucBuf, strlen((const char *)ucBuf));

	return value;
 80046b6:	89bb      	ldrh	r3, [r7, #12]

}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <ADS131A0xInit>:
// write a number of consecutive registers from a given array pointer
void ADS131A0xWriteMultiRegister(uint8_t addr, int NumRegs, uint8_t* pdata) {
	//TODO: implement function
}

void ADS131A0xInit(void){
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0

	uint16_t res_unlocked;

	ADS131A0xReset();
 80046c6:	f7ff ff31 	bl	800452c <ADS131A0xReset>

	uint16_t status = ADS131A0xSendCmd(0x0000);
 80046ca:	2000      	movs	r0, #0
 80046cc:	f7ff ff8e 	bl	80045ec <ADS131A0xSendCmd>
 80046d0:	4603      	mov	r3, r0
 80046d2:	80fb      	strh	r3, [r7, #6]

	//device ready
	if(status == 0xff04) {
 80046d4:	88fb      	ldrh	r3, [r7, #6]
 80046d6:	f64f 7204 	movw	r2, #65284	@ 0xff04
 80046da:	4293      	cmp	r3, r2
 80046dc:	d11e      	bne.n	800471c <ADS131A0xInit+0x5c>
		//Unlock device
		res_unlocked = ADS131A0xSendCmd(ADS131A0x_CMD_UNLOCK);
 80046de:	f240 6055 	movw	r0, #1621	@ 0x655
 80046e2:	f7ff ff83 	bl	80045ec <ADS131A0xSendCmd>
 80046e6:	4603      	mov	r3, r0
 80046e8:	80bb      	strh	r3, [r7, #4]

		while (!res_unlocked == ADS131A0x_CMD_UNLOCK)
 80046ea:	bf00      	nop
		{

		}
			//Read/write regs and check results
			ADS131A0xReadRegister(ADS131A0x_REG_A_SYS_CFG);
 80046ec:	200b      	movs	r0, #11
 80046ee:	f7ff ffad 	bl	800464c <ADS131A0xReadRegister>

			ADS131A0xWriteRegister(ADS131A0x_REG_A_SYS_CFG, 0xE8);
 80046f2:	21e8      	movs	r1, #232	@ 0xe8
 80046f4:	200b      	movs	r0, #11
 80046f6:	f7ff ffc5 	bl	8004684 <ADS131A0xWriteRegister>

			ADS131A0xReadRegister(ADS131A0x_REG_A_SYS_CFG);
 80046fa:	200b      	movs	r0, #11
 80046fc:	f7ff ffa6 	bl	800464c <ADS131A0xReadRegister>

			ADS131A0xWriteRegister(ADS131A0x_REG_CLK1, 0x02);
 8004700:	2102      	movs	r1, #2
 8004702:	200d      	movs	r0, #13
 8004704:	f7ff ffbe 	bl	8004684 <ADS131A0xWriteRegister>

			ADS131A0xWriteRegister(ADS131A0x_REG_CLK2, 0x25);
 8004708:	2125      	movs	r1, #37	@ 0x25
 800470a:	200e      	movs	r0, #14
 800470c:	f7ff ffba 	bl	8004684 <ADS131A0xWriteRegister>

			ADS131A0xWriteRegister(ADS131A0x_REG_ADC_ENA, 0x0F);
 8004710:	210f      	movs	r1, #15
 8004712:	200f      	movs	r0, #15
 8004714:	f7ff ffb6 	bl	8004684 <ADS131A0xWriteRegister>

			while (!res_unlocked == ADS131A0x_CMD_WAKEUP)
 8004718:	bf00      	nop
					{

					}
			//ADS131A0xSendCmd(ADS131A0x_CMD_LOCK);
			while (!res_unlocked == ADS131A0x_CMD_UNLOCK)
 800471a:	bf00      	nop
	else {
		//TODO: report error
	}


}
 800471c:	bf00      	nop
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <StartExtADC>:
	//snprintf((char*)ucBuf, sizeof(ucBuf), "%lu, status: %x, ch1: %x, ch2: %x, ch3: %x, ch4: %x ;\r\n", osKernelSysTick(), ch.Status, ch.Ch1, ch.Ch2, ch.Ch3, ch.Ch4);
	//CDC_Transmit_FS(ucBuf, strlen((const char *)ucBuf));

	return ch;
}
void StartExtADC(void) {
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
	ADS131A0xInit();
 8004728:	f7ff ffca 	bl	80046c0 <ADS131A0xInit>
	ADS131A0x_Init_Done = 1;
 800472c:	4b02      	ldr	r3, [pc, #8]	@ (8004738 <StartExtADC+0x14>)
 800472e:	2201      	movs	r2, #1
 8004730:	701a      	strb	r2, [r3, #0]
}
 8004732:	bf00      	nop
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	24000141 	.word	0x24000141

0800473c <HAL_GPIO_EXTI_Callback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
	if(hspi -> Instance == SPI2){
		// Nothing to do here
	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af02      	add	r7, sp, #8
 8004742:	4603      	mov	r3, r0
 8004744:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == ADS131A0x_DRDY_Pin && ADS131A0x_Init_Done == 1) {
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800474c:	d118      	bne.n	8004780 <HAL_GPIO_EXTI_Callback+0x44>
 800474e:	4b0e      	ldr	r3, [pc, #56]	@ (8004788 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d114      	bne.n	8004780 <HAL_GPIO_EXTI_Callback+0x44>
		ADS131A0x_Ready_flag = 1;
 8004756:	4b0d      	ldr	r3, [pc, #52]	@ (800478c <HAL_GPIO_EXTI_Callback+0x50>)
 8004758:	2201      	movs	r2, #1
 800475a:	701a      	strb	r2, [r3, #0]
		ADS131A0xSetCS(0);
 800475c:	2000      	movs	r0, #0
 800475e:	f7ff fefd 	bl	800455c <ADS131A0xSetCS>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1); // Toggle The Output (LED) Pin
 8004762:	2102      	movs	r1, #2
 8004764:	480a      	ldr	r0, [pc, #40]	@ (8004790 <HAL_GPIO_EXTI_Callback+0x54>)
 8004766:	f7fc fe32 	bl	80013ce <HAL_GPIO_TogglePin>
		HAL_SPI_TransmitReceive(&hspi1, &emptyTxBuffer[0], &ADS131A0x_DataBuf[0], ADS131A0x_WORD_SIZE*5, 100);
 800476a:	2364      	movs	r3, #100	@ 0x64
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	2314      	movs	r3, #20
 8004770:	4a08      	ldr	r2, [pc, #32]	@ (8004794 <HAL_GPIO_EXTI_Callback+0x58>)
 8004772:	4909      	ldr	r1, [pc, #36]	@ (8004798 <HAL_GPIO_EXTI_Callback+0x5c>)
 8004774:	4809      	ldr	r0, [pc, #36]	@ (800479c <HAL_GPIO_EXTI_Callback+0x60>)
 8004776:	f7ff fab5 	bl	8003ce4 <HAL_SPI_TransmitReceive>
		ADS131A0xSetCS(1);
 800477a:	2001      	movs	r0, #1
 800477c:	f7ff feee 	bl	800455c <ADS131A0xSetCS>
	}
}
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	24000141 	.word	0x24000141
 800478c:	24000140 	.word	0x24000140
 8004790:	58021000 	.word	0x58021000
 8004794:	2400012c 	.word	0x2400012c
 8004798:	24000118 	.word	0x24000118
 800479c:	24000088 	.word	0x24000088

080047a0 <__assert_func>:
 80047a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80047a2:	4614      	mov	r4, r2
 80047a4:	461a      	mov	r2, r3
 80047a6:	4b09      	ldr	r3, [pc, #36]	@ (80047cc <__assert_func+0x2c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4605      	mov	r5, r0
 80047ac:	68d8      	ldr	r0, [r3, #12]
 80047ae:	b954      	cbnz	r4, 80047c6 <__assert_func+0x26>
 80047b0:	4b07      	ldr	r3, [pc, #28]	@ (80047d0 <__assert_func+0x30>)
 80047b2:	461c      	mov	r4, r3
 80047b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80047b8:	9100      	str	r1, [sp, #0]
 80047ba:	462b      	mov	r3, r5
 80047bc:	4905      	ldr	r1, [pc, #20]	@ (80047d4 <__assert_func+0x34>)
 80047be:	f000 f8b1 	bl	8004924 <fiprintf>
 80047c2:	f000 f99e 	bl	8004b02 <abort>
 80047c6:	4b04      	ldr	r3, [pc, #16]	@ (80047d8 <__assert_func+0x38>)
 80047c8:	e7f4      	b.n	80047b4 <__assert_func+0x14>
 80047ca:	bf00      	nop
 80047cc:	2400001c 	.word	0x2400001c
 80047d0:	08005762 	.word	0x08005762
 80047d4:	08005734 	.word	0x08005734
 80047d8:	08005727 	.word	0x08005727

080047dc <std>:
 80047dc:	2300      	movs	r3, #0
 80047de:	b510      	push	{r4, lr}
 80047e0:	4604      	mov	r4, r0
 80047e2:	e9c0 3300 	strd	r3, r3, [r0]
 80047e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047ea:	6083      	str	r3, [r0, #8]
 80047ec:	8181      	strh	r1, [r0, #12]
 80047ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80047f0:	81c2      	strh	r2, [r0, #14]
 80047f2:	6183      	str	r3, [r0, #24]
 80047f4:	4619      	mov	r1, r3
 80047f6:	2208      	movs	r2, #8
 80047f8:	305c      	adds	r0, #92	@ 0x5c
 80047fa:	f000 f906 	bl	8004a0a <memset>
 80047fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004834 <std+0x58>)
 8004800:	6263      	str	r3, [r4, #36]	@ 0x24
 8004802:	4b0d      	ldr	r3, [pc, #52]	@ (8004838 <std+0x5c>)
 8004804:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004806:	4b0d      	ldr	r3, [pc, #52]	@ (800483c <std+0x60>)
 8004808:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800480a:	4b0d      	ldr	r3, [pc, #52]	@ (8004840 <std+0x64>)
 800480c:	6323      	str	r3, [r4, #48]	@ 0x30
 800480e:	4b0d      	ldr	r3, [pc, #52]	@ (8004844 <std+0x68>)
 8004810:	6224      	str	r4, [r4, #32]
 8004812:	429c      	cmp	r4, r3
 8004814:	d006      	beq.n	8004824 <std+0x48>
 8004816:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800481a:	4294      	cmp	r4, r2
 800481c:	d002      	beq.n	8004824 <std+0x48>
 800481e:	33d0      	adds	r3, #208	@ 0xd0
 8004820:	429c      	cmp	r4, r3
 8004822:	d105      	bne.n	8004830 <std+0x54>
 8004824:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800482c:	f000 b966 	b.w	8004afc <__retarget_lock_init_recursive>
 8004830:	bd10      	pop	{r4, pc}
 8004832:	bf00      	nop
 8004834:	08004985 	.word	0x08004985
 8004838:	080049a7 	.word	0x080049a7
 800483c:	080049df 	.word	0x080049df
 8004840:	08004a03 	.word	0x08004a03
 8004844:	2400014c 	.word	0x2400014c

08004848 <stdio_exit_handler>:
 8004848:	4a02      	ldr	r2, [pc, #8]	@ (8004854 <stdio_exit_handler+0xc>)
 800484a:	4903      	ldr	r1, [pc, #12]	@ (8004858 <stdio_exit_handler+0x10>)
 800484c:	4803      	ldr	r0, [pc, #12]	@ (800485c <stdio_exit_handler+0x14>)
 800484e:	f000 b87b 	b.w	8004948 <_fwalk_sglue>
 8004852:	bf00      	nop
 8004854:	24000010 	.word	0x24000010
 8004858:	080053a9 	.word	0x080053a9
 800485c:	24000020 	.word	0x24000020

08004860 <cleanup_stdio>:
 8004860:	6841      	ldr	r1, [r0, #4]
 8004862:	4b0c      	ldr	r3, [pc, #48]	@ (8004894 <cleanup_stdio+0x34>)
 8004864:	4299      	cmp	r1, r3
 8004866:	b510      	push	{r4, lr}
 8004868:	4604      	mov	r4, r0
 800486a:	d001      	beq.n	8004870 <cleanup_stdio+0x10>
 800486c:	f000 fd9c 	bl	80053a8 <_fflush_r>
 8004870:	68a1      	ldr	r1, [r4, #8]
 8004872:	4b09      	ldr	r3, [pc, #36]	@ (8004898 <cleanup_stdio+0x38>)
 8004874:	4299      	cmp	r1, r3
 8004876:	d002      	beq.n	800487e <cleanup_stdio+0x1e>
 8004878:	4620      	mov	r0, r4
 800487a:	f000 fd95 	bl	80053a8 <_fflush_r>
 800487e:	68e1      	ldr	r1, [r4, #12]
 8004880:	4b06      	ldr	r3, [pc, #24]	@ (800489c <cleanup_stdio+0x3c>)
 8004882:	4299      	cmp	r1, r3
 8004884:	d004      	beq.n	8004890 <cleanup_stdio+0x30>
 8004886:	4620      	mov	r0, r4
 8004888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800488c:	f000 bd8c 	b.w	80053a8 <_fflush_r>
 8004890:	bd10      	pop	{r4, pc}
 8004892:	bf00      	nop
 8004894:	2400014c 	.word	0x2400014c
 8004898:	240001b4 	.word	0x240001b4
 800489c:	2400021c 	.word	0x2400021c

080048a0 <global_stdio_init.part.0>:
 80048a0:	b510      	push	{r4, lr}
 80048a2:	4b0b      	ldr	r3, [pc, #44]	@ (80048d0 <global_stdio_init.part.0+0x30>)
 80048a4:	4c0b      	ldr	r4, [pc, #44]	@ (80048d4 <global_stdio_init.part.0+0x34>)
 80048a6:	4a0c      	ldr	r2, [pc, #48]	@ (80048d8 <global_stdio_init.part.0+0x38>)
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	4620      	mov	r0, r4
 80048ac:	2200      	movs	r2, #0
 80048ae:	2104      	movs	r1, #4
 80048b0:	f7ff ff94 	bl	80047dc <std>
 80048b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80048b8:	2201      	movs	r2, #1
 80048ba:	2109      	movs	r1, #9
 80048bc:	f7ff ff8e 	bl	80047dc <std>
 80048c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80048c4:	2202      	movs	r2, #2
 80048c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048ca:	2112      	movs	r1, #18
 80048cc:	f7ff bf86 	b.w	80047dc <std>
 80048d0:	24000284 	.word	0x24000284
 80048d4:	2400014c 	.word	0x2400014c
 80048d8:	08004849 	.word	0x08004849

080048dc <__sfp_lock_acquire>:
 80048dc:	4801      	ldr	r0, [pc, #4]	@ (80048e4 <__sfp_lock_acquire+0x8>)
 80048de:	f000 b90e 	b.w	8004afe <__retarget_lock_acquire_recursive>
 80048e2:	bf00      	nop
 80048e4:	2400028d 	.word	0x2400028d

080048e8 <__sfp_lock_release>:
 80048e8:	4801      	ldr	r0, [pc, #4]	@ (80048f0 <__sfp_lock_release+0x8>)
 80048ea:	f000 b909 	b.w	8004b00 <__retarget_lock_release_recursive>
 80048ee:	bf00      	nop
 80048f0:	2400028d 	.word	0x2400028d

080048f4 <__sinit>:
 80048f4:	b510      	push	{r4, lr}
 80048f6:	4604      	mov	r4, r0
 80048f8:	f7ff fff0 	bl	80048dc <__sfp_lock_acquire>
 80048fc:	6a23      	ldr	r3, [r4, #32]
 80048fe:	b11b      	cbz	r3, 8004908 <__sinit+0x14>
 8004900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004904:	f7ff bff0 	b.w	80048e8 <__sfp_lock_release>
 8004908:	4b04      	ldr	r3, [pc, #16]	@ (800491c <__sinit+0x28>)
 800490a:	6223      	str	r3, [r4, #32]
 800490c:	4b04      	ldr	r3, [pc, #16]	@ (8004920 <__sinit+0x2c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1f5      	bne.n	8004900 <__sinit+0xc>
 8004914:	f7ff ffc4 	bl	80048a0 <global_stdio_init.part.0>
 8004918:	e7f2      	b.n	8004900 <__sinit+0xc>
 800491a:	bf00      	nop
 800491c:	08004861 	.word	0x08004861
 8004920:	24000284 	.word	0x24000284

08004924 <fiprintf>:
 8004924:	b40e      	push	{r1, r2, r3}
 8004926:	b503      	push	{r0, r1, lr}
 8004928:	4601      	mov	r1, r0
 800492a:	ab03      	add	r3, sp, #12
 800492c:	4805      	ldr	r0, [pc, #20]	@ (8004944 <fiprintf+0x20>)
 800492e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004932:	6800      	ldr	r0, [r0, #0]
 8004934:	9301      	str	r3, [sp, #4]
 8004936:	f000 fa0d 	bl	8004d54 <_vfiprintf_r>
 800493a:	b002      	add	sp, #8
 800493c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004940:	b003      	add	sp, #12
 8004942:	4770      	bx	lr
 8004944:	2400001c 	.word	0x2400001c

08004948 <_fwalk_sglue>:
 8004948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800494c:	4607      	mov	r7, r0
 800494e:	4688      	mov	r8, r1
 8004950:	4614      	mov	r4, r2
 8004952:	2600      	movs	r6, #0
 8004954:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004958:	f1b9 0901 	subs.w	r9, r9, #1
 800495c:	d505      	bpl.n	800496a <_fwalk_sglue+0x22>
 800495e:	6824      	ldr	r4, [r4, #0]
 8004960:	2c00      	cmp	r4, #0
 8004962:	d1f7      	bne.n	8004954 <_fwalk_sglue+0xc>
 8004964:	4630      	mov	r0, r6
 8004966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800496a:	89ab      	ldrh	r3, [r5, #12]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d907      	bls.n	8004980 <_fwalk_sglue+0x38>
 8004970:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004974:	3301      	adds	r3, #1
 8004976:	d003      	beq.n	8004980 <_fwalk_sglue+0x38>
 8004978:	4629      	mov	r1, r5
 800497a:	4638      	mov	r0, r7
 800497c:	47c0      	blx	r8
 800497e:	4306      	orrs	r6, r0
 8004980:	3568      	adds	r5, #104	@ 0x68
 8004982:	e7e9      	b.n	8004958 <_fwalk_sglue+0x10>

08004984 <__sread>:
 8004984:	b510      	push	{r4, lr}
 8004986:	460c      	mov	r4, r1
 8004988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800498c:	f000 f868 	bl	8004a60 <_read_r>
 8004990:	2800      	cmp	r0, #0
 8004992:	bfab      	itete	ge
 8004994:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004996:	89a3      	ldrhlt	r3, [r4, #12]
 8004998:	181b      	addge	r3, r3, r0
 800499a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800499e:	bfac      	ite	ge
 80049a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80049a2:	81a3      	strhlt	r3, [r4, #12]
 80049a4:	bd10      	pop	{r4, pc}

080049a6 <__swrite>:
 80049a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049aa:	461f      	mov	r7, r3
 80049ac:	898b      	ldrh	r3, [r1, #12]
 80049ae:	05db      	lsls	r3, r3, #23
 80049b0:	4605      	mov	r5, r0
 80049b2:	460c      	mov	r4, r1
 80049b4:	4616      	mov	r6, r2
 80049b6:	d505      	bpl.n	80049c4 <__swrite+0x1e>
 80049b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049bc:	2302      	movs	r3, #2
 80049be:	2200      	movs	r2, #0
 80049c0:	f000 f83c 	bl	8004a3c <_lseek_r>
 80049c4:	89a3      	ldrh	r3, [r4, #12]
 80049c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049ce:	81a3      	strh	r3, [r4, #12]
 80049d0:	4632      	mov	r2, r6
 80049d2:	463b      	mov	r3, r7
 80049d4:	4628      	mov	r0, r5
 80049d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049da:	f000 b853 	b.w	8004a84 <_write_r>

080049de <__sseek>:
 80049de:	b510      	push	{r4, lr}
 80049e0:	460c      	mov	r4, r1
 80049e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049e6:	f000 f829 	bl	8004a3c <_lseek_r>
 80049ea:	1c43      	adds	r3, r0, #1
 80049ec:	89a3      	ldrh	r3, [r4, #12]
 80049ee:	bf15      	itete	ne
 80049f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80049f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80049f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80049fa:	81a3      	strheq	r3, [r4, #12]
 80049fc:	bf18      	it	ne
 80049fe:	81a3      	strhne	r3, [r4, #12]
 8004a00:	bd10      	pop	{r4, pc}

08004a02 <__sclose>:
 8004a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a06:	f000 b809 	b.w	8004a1c <_close_r>

08004a0a <memset>:
 8004a0a:	4402      	add	r2, r0
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d100      	bne.n	8004a14 <memset+0xa>
 8004a12:	4770      	bx	lr
 8004a14:	f803 1b01 	strb.w	r1, [r3], #1
 8004a18:	e7f9      	b.n	8004a0e <memset+0x4>
	...

08004a1c <_close_r>:
 8004a1c:	b538      	push	{r3, r4, r5, lr}
 8004a1e:	4d06      	ldr	r5, [pc, #24]	@ (8004a38 <_close_r+0x1c>)
 8004a20:	2300      	movs	r3, #0
 8004a22:	4604      	mov	r4, r0
 8004a24:	4608      	mov	r0, r1
 8004a26:	602b      	str	r3, [r5, #0]
 8004a28:	f7fb ffa1 	bl	800096e <_close>
 8004a2c:	1c43      	adds	r3, r0, #1
 8004a2e:	d102      	bne.n	8004a36 <_close_r+0x1a>
 8004a30:	682b      	ldr	r3, [r5, #0]
 8004a32:	b103      	cbz	r3, 8004a36 <_close_r+0x1a>
 8004a34:	6023      	str	r3, [r4, #0]
 8004a36:	bd38      	pop	{r3, r4, r5, pc}
 8004a38:	24000288 	.word	0x24000288

08004a3c <_lseek_r>:
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	4d07      	ldr	r5, [pc, #28]	@ (8004a5c <_lseek_r+0x20>)
 8004a40:	4604      	mov	r4, r0
 8004a42:	4608      	mov	r0, r1
 8004a44:	4611      	mov	r1, r2
 8004a46:	2200      	movs	r2, #0
 8004a48:	602a      	str	r2, [r5, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f7fb ffb6 	bl	80009bc <_lseek>
 8004a50:	1c43      	adds	r3, r0, #1
 8004a52:	d102      	bne.n	8004a5a <_lseek_r+0x1e>
 8004a54:	682b      	ldr	r3, [r5, #0]
 8004a56:	b103      	cbz	r3, 8004a5a <_lseek_r+0x1e>
 8004a58:	6023      	str	r3, [r4, #0]
 8004a5a:	bd38      	pop	{r3, r4, r5, pc}
 8004a5c:	24000288 	.word	0x24000288

08004a60 <_read_r>:
 8004a60:	b538      	push	{r3, r4, r5, lr}
 8004a62:	4d07      	ldr	r5, [pc, #28]	@ (8004a80 <_read_r+0x20>)
 8004a64:	4604      	mov	r4, r0
 8004a66:	4608      	mov	r0, r1
 8004a68:	4611      	mov	r1, r2
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	602a      	str	r2, [r5, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f7fb ff44 	bl	80008fc <_read>
 8004a74:	1c43      	adds	r3, r0, #1
 8004a76:	d102      	bne.n	8004a7e <_read_r+0x1e>
 8004a78:	682b      	ldr	r3, [r5, #0]
 8004a7a:	b103      	cbz	r3, 8004a7e <_read_r+0x1e>
 8004a7c:	6023      	str	r3, [r4, #0]
 8004a7e:	bd38      	pop	{r3, r4, r5, pc}
 8004a80:	24000288 	.word	0x24000288

08004a84 <_write_r>:
 8004a84:	b538      	push	{r3, r4, r5, lr}
 8004a86:	4d07      	ldr	r5, [pc, #28]	@ (8004aa4 <_write_r+0x20>)
 8004a88:	4604      	mov	r4, r0
 8004a8a:	4608      	mov	r0, r1
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	2200      	movs	r2, #0
 8004a90:	602a      	str	r2, [r5, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	f7fb ff4f 	bl	8000936 <_write>
 8004a98:	1c43      	adds	r3, r0, #1
 8004a9a:	d102      	bne.n	8004aa2 <_write_r+0x1e>
 8004a9c:	682b      	ldr	r3, [r5, #0]
 8004a9e:	b103      	cbz	r3, 8004aa2 <_write_r+0x1e>
 8004aa0:	6023      	str	r3, [r4, #0]
 8004aa2:	bd38      	pop	{r3, r4, r5, pc}
 8004aa4:	24000288 	.word	0x24000288

08004aa8 <__errno>:
 8004aa8:	4b01      	ldr	r3, [pc, #4]	@ (8004ab0 <__errno+0x8>)
 8004aaa:	6818      	ldr	r0, [r3, #0]
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	2400001c 	.word	0x2400001c

08004ab4 <__libc_init_array>:
 8004ab4:	b570      	push	{r4, r5, r6, lr}
 8004ab6:	4d0d      	ldr	r5, [pc, #52]	@ (8004aec <__libc_init_array+0x38>)
 8004ab8:	4c0d      	ldr	r4, [pc, #52]	@ (8004af0 <__libc_init_array+0x3c>)
 8004aba:	1b64      	subs	r4, r4, r5
 8004abc:	10a4      	asrs	r4, r4, #2
 8004abe:	2600      	movs	r6, #0
 8004ac0:	42a6      	cmp	r6, r4
 8004ac2:	d109      	bne.n	8004ad8 <__libc_init_array+0x24>
 8004ac4:	4d0b      	ldr	r5, [pc, #44]	@ (8004af4 <__libc_init_array+0x40>)
 8004ac6:	4c0c      	ldr	r4, [pc, #48]	@ (8004af8 <__libc_init_array+0x44>)
 8004ac8:	f000 fe02 	bl	80056d0 <_init>
 8004acc:	1b64      	subs	r4, r4, r5
 8004ace:	10a4      	asrs	r4, r4, #2
 8004ad0:	2600      	movs	r6, #0
 8004ad2:	42a6      	cmp	r6, r4
 8004ad4:	d105      	bne.n	8004ae2 <__libc_init_array+0x2e>
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}
 8004ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004adc:	4798      	blx	r3
 8004ade:	3601      	adds	r6, #1
 8004ae0:	e7ee      	b.n	8004ac0 <__libc_init_array+0xc>
 8004ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae6:	4798      	blx	r3
 8004ae8:	3601      	adds	r6, #1
 8004aea:	e7f2      	b.n	8004ad2 <__libc_init_array+0x1e>
 8004aec:	080057a0 	.word	0x080057a0
 8004af0:	080057a0 	.word	0x080057a0
 8004af4:	080057a0 	.word	0x080057a0
 8004af8:	080057a4 	.word	0x080057a4

08004afc <__retarget_lock_init_recursive>:
 8004afc:	4770      	bx	lr

08004afe <__retarget_lock_acquire_recursive>:
 8004afe:	4770      	bx	lr

08004b00 <__retarget_lock_release_recursive>:
 8004b00:	4770      	bx	lr

08004b02 <abort>:
 8004b02:	b508      	push	{r3, lr}
 8004b04:	2006      	movs	r0, #6
 8004b06:	f000 fd33 	bl	8005570 <raise>
 8004b0a:	2001      	movs	r0, #1
 8004b0c:	f7fb feeb 	bl	80008e6 <_exit>

08004b10 <_free_r>:
 8004b10:	b538      	push	{r3, r4, r5, lr}
 8004b12:	4605      	mov	r5, r0
 8004b14:	2900      	cmp	r1, #0
 8004b16:	d041      	beq.n	8004b9c <_free_r+0x8c>
 8004b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b1c:	1f0c      	subs	r4, r1, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	bfb8      	it	lt
 8004b22:	18e4      	addlt	r4, r4, r3
 8004b24:	f000 f8e0 	bl	8004ce8 <__malloc_lock>
 8004b28:	4a1d      	ldr	r2, [pc, #116]	@ (8004ba0 <_free_r+0x90>)
 8004b2a:	6813      	ldr	r3, [r2, #0]
 8004b2c:	b933      	cbnz	r3, 8004b3c <_free_r+0x2c>
 8004b2e:	6063      	str	r3, [r4, #4]
 8004b30:	6014      	str	r4, [r2, #0]
 8004b32:	4628      	mov	r0, r5
 8004b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b38:	f000 b8dc 	b.w	8004cf4 <__malloc_unlock>
 8004b3c:	42a3      	cmp	r3, r4
 8004b3e:	d908      	bls.n	8004b52 <_free_r+0x42>
 8004b40:	6820      	ldr	r0, [r4, #0]
 8004b42:	1821      	adds	r1, r4, r0
 8004b44:	428b      	cmp	r3, r1
 8004b46:	bf01      	itttt	eq
 8004b48:	6819      	ldreq	r1, [r3, #0]
 8004b4a:	685b      	ldreq	r3, [r3, #4]
 8004b4c:	1809      	addeq	r1, r1, r0
 8004b4e:	6021      	streq	r1, [r4, #0]
 8004b50:	e7ed      	b.n	8004b2e <_free_r+0x1e>
 8004b52:	461a      	mov	r2, r3
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	b10b      	cbz	r3, 8004b5c <_free_r+0x4c>
 8004b58:	42a3      	cmp	r3, r4
 8004b5a:	d9fa      	bls.n	8004b52 <_free_r+0x42>
 8004b5c:	6811      	ldr	r1, [r2, #0]
 8004b5e:	1850      	adds	r0, r2, r1
 8004b60:	42a0      	cmp	r0, r4
 8004b62:	d10b      	bne.n	8004b7c <_free_r+0x6c>
 8004b64:	6820      	ldr	r0, [r4, #0]
 8004b66:	4401      	add	r1, r0
 8004b68:	1850      	adds	r0, r2, r1
 8004b6a:	4283      	cmp	r3, r0
 8004b6c:	6011      	str	r1, [r2, #0]
 8004b6e:	d1e0      	bne.n	8004b32 <_free_r+0x22>
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	6053      	str	r3, [r2, #4]
 8004b76:	4408      	add	r0, r1
 8004b78:	6010      	str	r0, [r2, #0]
 8004b7a:	e7da      	b.n	8004b32 <_free_r+0x22>
 8004b7c:	d902      	bls.n	8004b84 <_free_r+0x74>
 8004b7e:	230c      	movs	r3, #12
 8004b80:	602b      	str	r3, [r5, #0]
 8004b82:	e7d6      	b.n	8004b32 <_free_r+0x22>
 8004b84:	6820      	ldr	r0, [r4, #0]
 8004b86:	1821      	adds	r1, r4, r0
 8004b88:	428b      	cmp	r3, r1
 8004b8a:	bf04      	itt	eq
 8004b8c:	6819      	ldreq	r1, [r3, #0]
 8004b8e:	685b      	ldreq	r3, [r3, #4]
 8004b90:	6063      	str	r3, [r4, #4]
 8004b92:	bf04      	itt	eq
 8004b94:	1809      	addeq	r1, r1, r0
 8004b96:	6021      	streq	r1, [r4, #0]
 8004b98:	6054      	str	r4, [r2, #4]
 8004b9a:	e7ca      	b.n	8004b32 <_free_r+0x22>
 8004b9c:	bd38      	pop	{r3, r4, r5, pc}
 8004b9e:	bf00      	nop
 8004ba0:	24000294 	.word	0x24000294

08004ba4 <sbrk_aligned>:
 8004ba4:	b570      	push	{r4, r5, r6, lr}
 8004ba6:	4e0f      	ldr	r6, [pc, #60]	@ (8004be4 <sbrk_aligned+0x40>)
 8004ba8:	460c      	mov	r4, r1
 8004baa:	6831      	ldr	r1, [r6, #0]
 8004bac:	4605      	mov	r5, r0
 8004bae:	b911      	cbnz	r1, 8004bb6 <sbrk_aligned+0x12>
 8004bb0:	f000 fcfa 	bl	80055a8 <_sbrk_r>
 8004bb4:	6030      	str	r0, [r6, #0]
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	4628      	mov	r0, r5
 8004bba:	f000 fcf5 	bl	80055a8 <_sbrk_r>
 8004bbe:	1c43      	adds	r3, r0, #1
 8004bc0:	d103      	bne.n	8004bca <sbrk_aligned+0x26>
 8004bc2:	f04f 34ff 	mov.w	r4, #4294967295
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	bd70      	pop	{r4, r5, r6, pc}
 8004bca:	1cc4      	adds	r4, r0, #3
 8004bcc:	f024 0403 	bic.w	r4, r4, #3
 8004bd0:	42a0      	cmp	r0, r4
 8004bd2:	d0f8      	beq.n	8004bc6 <sbrk_aligned+0x22>
 8004bd4:	1a21      	subs	r1, r4, r0
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	f000 fce6 	bl	80055a8 <_sbrk_r>
 8004bdc:	3001      	adds	r0, #1
 8004bde:	d1f2      	bne.n	8004bc6 <sbrk_aligned+0x22>
 8004be0:	e7ef      	b.n	8004bc2 <sbrk_aligned+0x1e>
 8004be2:	bf00      	nop
 8004be4:	24000290 	.word	0x24000290

08004be8 <_malloc_r>:
 8004be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bec:	1ccd      	adds	r5, r1, #3
 8004bee:	f025 0503 	bic.w	r5, r5, #3
 8004bf2:	3508      	adds	r5, #8
 8004bf4:	2d0c      	cmp	r5, #12
 8004bf6:	bf38      	it	cc
 8004bf8:	250c      	movcc	r5, #12
 8004bfa:	2d00      	cmp	r5, #0
 8004bfc:	4606      	mov	r6, r0
 8004bfe:	db01      	blt.n	8004c04 <_malloc_r+0x1c>
 8004c00:	42a9      	cmp	r1, r5
 8004c02:	d904      	bls.n	8004c0e <_malloc_r+0x26>
 8004c04:	230c      	movs	r3, #12
 8004c06:	6033      	str	r3, [r6, #0]
 8004c08:	2000      	movs	r0, #0
 8004c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ce4 <_malloc_r+0xfc>
 8004c12:	f000 f869 	bl	8004ce8 <__malloc_lock>
 8004c16:	f8d8 3000 	ldr.w	r3, [r8]
 8004c1a:	461c      	mov	r4, r3
 8004c1c:	bb44      	cbnz	r4, 8004c70 <_malloc_r+0x88>
 8004c1e:	4629      	mov	r1, r5
 8004c20:	4630      	mov	r0, r6
 8004c22:	f7ff ffbf 	bl	8004ba4 <sbrk_aligned>
 8004c26:	1c43      	adds	r3, r0, #1
 8004c28:	4604      	mov	r4, r0
 8004c2a:	d158      	bne.n	8004cde <_malloc_r+0xf6>
 8004c2c:	f8d8 4000 	ldr.w	r4, [r8]
 8004c30:	4627      	mov	r7, r4
 8004c32:	2f00      	cmp	r7, #0
 8004c34:	d143      	bne.n	8004cbe <_malloc_r+0xd6>
 8004c36:	2c00      	cmp	r4, #0
 8004c38:	d04b      	beq.n	8004cd2 <_malloc_r+0xea>
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	4639      	mov	r1, r7
 8004c3e:	4630      	mov	r0, r6
 8004c40:	eb04 0903 	add.w	r9, r4, r3
 8004c44:	f000 fcb0 	bl	80055a8 <_sbrk_r>
 8004c48:	4581      	cmp	r9, r0
 8004c4a:	d142      	bne.n	8004cd2 <_malloc_r+0xea>
 8004c4c:	6821      	ldr	r1, [r4, #0]
 8004c4e:	1a6d      	subs	r5, r5, r1
 8004c50:	4629      	mov	r1, r5
 8004c52:	4630      	mov	r0, r6
 8004c54:	f7ff ffa6 	bl	8004ba4 <sbrk_aligned>
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d03a      	beq.n	8004cd2 <_malloc_r+0xea>
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	442b      	add	r3, r5
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	f8d8 3000 	ldr.w	r3, [r8]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	bb62      	cbnz	r2, 8004cc4 <_malloc_r+0xdc>
 8004c6a:	f8c8 7000 	str.w	r7, [r8]
 8004c6e:	e00f      	b.n	8004c90 <_malloc_r+0xa8>
 8004c70:	6822      	ldr	r2, [r4, #0]
 8004c72:	1b52      	subs	r2, r2, r5
 8004c74:	d420      	bmi.n	8004cb8 <_malloc_r+0xd0>
 8004c76:	2a0b      	cmp	r2, #11
 8004c78:	d917      	bls.n	8004caa <_malloc_r+0xc2>
 8004c7a:	1961      	adds	r1, r4, r5
 8004c7c:	42a3      	cmp	r3, r4
 8004c7e:	6025      	str	r5, [r4, #0]
 8004c80:	bf18      	it	ne
 8004c82:	6059      	strne	r1, [r3, #4]
 8004c84:	6863      	ldr	r3, [r4, #4]
 8004c86:	bf08      	it	eq
 8004c88:	f8c8 1000 	streq.w	r1, [r8]
 8004c8c:	5162      	str	r2, [r4, r5]
 8004c8e:	604b      	str	r3, [r1, #4]
 8004c90:	4630      	mov	r0, r6
 8004c92:	f000 f82f 	bl	8004cf4 <__malloc_unlock>
 8004c96:	f104 000b 	add.w	r0, r4, #11
 8004c9a:	1d23      	adds	r3, r4, #4
 8004c9c:	f020 0007 	bic.w	r0, r0, #7
 8004ca0:	1ac2      	subs	r2, r0, r3
 8004ca2:	bf1c      	itt	ne
 8004ca4:	1a1b      	subne	r3, r3, r0
 8004ca6:	50a3      	strne	r3, [r4, r2]
 8004ca8:	e7af      	b.n	8004c0a <_malloc_r+0x22>
 8004caa:	6862      	ldr	r2, [r4, #4]
 8004cac:	42a3      	cmp	r3, r4
 8004cae:	bf0c      	ite	eq
 8004cb0:	f8c8 2000 	streq.w	r2, [r8]
 8004cb4:	605a      	strne	r2, [r3, #4]
 8004cb6:	e7eb      	b.n	8004c90 <_malloc_r+0xa8>
 8004cb8:	4623      	mov	r3, r4
 8004cba:	6864      	ldr	r4, [r4, #4]
 8004cbc:	e7ae      	b.n	8004c1c <_malloc_r+0x34>
 8004cbe:	463c      	mov	r4, r7
 8004cc0:	687f      	ldr	r7, [r7, #4]
 8004cc2:	e7b6      	b.n	8004c32 <_malloc_r+0x4a>
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	42a3      	cmp	r3, r4
 8004cca:	d1fb      	bne.n	8004cc4 <_malloc_r+0xdc>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	6053      	str	r3, [r2, #4]
 8004cd0:	e7de      	b.n	8004c90 <_malloc_r+0xa8>
 8004cd2:	230c      	movs	r3, #12
 8004cd4:	6033      	str	r3, [r6, #0]
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	f000 f80c 	bl	8004cf4 <__malloc_unlock>
 8004cdc:	e794      	b.n	8004c08 <_malloc_r+0x20>
 8004cde:	6005      	str	r5, [r0, #0]
 8004ce0:	e7d6      	b.n	8004c90 <_malloc_r+0xa8>
 8004ce2:	bf00      	nop
 8004ce4:	24000294 	.word	0x24000294

08004ce8 <__malloc_lock>:
 8004ce8:	4801      	ldr	r0, [pc, #4]	@ (8004cf0 <__malloc_lock+0x8>)
 8004cea:	f7ff bf08 	b.w	8004afe <__retarget_lock_acquire_recursive>
 8004cee:	bf00      	nop
 8004cf0:	2400028c 	.word	0x2400028c

08004cf4 <__malloc_unlock>:
 8004cf4:	4801      	ldr	r0, [pc, #4]	@ (8004cfc <__malloc_unlock+0x8>)
 8004cf6:	f7ff bf03 	b.w	8004b00 <__retarget_lock_release_recursive>
 8004cfa:	bf00      	nop
 8004cfc:	2400028c 	.word	0x2400028c

08004d00 <__sfputc_r>:
 8004d00:	6893      	ldr	r3, [r2, #8]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	b410      	push	{r4}
 8004d08:	6093      	str	r3, [r2, #8]
 8004d0a:	da08      	bge.n	8004d1e <__sfputc_r+0x1e>
 8004d0c:	6994      	ldr	r4, [r2, #24]
 8004d0e:	42a3      	cmp	r3, r4
 8004d10:	db01      	blt.n	8004d16 <__sfputc_r+0x16>
 8004d12:	290a      	cmp	r1, #10
 8004d14:	d103      	bne.n	8004d1e <__sfputc_r+0x1e>
 8004d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d1a:	f000 bb6d 	b.w	80053f8 <__swbuf_r>
 8004d1e:	6813      	ldr	r3, [r2, #0]
 8004d20:	1c58      	adds	r0, r3, #1
 8004d22:	6010      	str	r0, [r2, #0]
 8004d24:	7019      	strb	r1, [r3, #0]
 8004d26:	4608      	mov	r0, r1
 8004d28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <__sfputs_r>:
 8004d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d30:	4606      	mov	r6, r0
 8004d32:	460f      	mov	r7, r1
 8004d34:	4614      	mov	r4, r2
 8004d36:	18d5      	adds	r5, r2, r3
 8004d38:	42ac      	cmp	r4, r5
 8004d3a:	d101      	bne.n	8004d40 <__sfputs_r+0x12>
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	e007      	b.n	8004d50 <__sfputs_r+0x22>
 8004d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d44:	463a      	mov	r2, r7
 8004d46:	4630      	mov	r0, r6
 8004d48:	f7ff ffda 	bl	8004d00 <__sfputc_r>
 8004d4c:	1c43      	adds	r3, r0, #1
 8004d4e:	d1f3      	bne.n	8004d38 <__sfputs_r+0xa>
 8004d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d54 <_vfiprintf_r>:
 8004d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d58:	460d      	mov	r5, r1
 8004d5a:	b09d      	sub	sp, #116	@ 0x74
 8004d5c:	4614      	mov	r4, r2
 8004d5e:	4698      	mov	r8, r3
 8004d60:	4606      	mov	r6, r0
 8004d62:	b118      	cbz	r0, 8004d6c <_vfiprintf_r+0x18>
 8004d64:	6a03      	ldr	r3, [r0, #32]
 8004d66:	b90b      	cbnz	r3, 8004d6c <_vfiprintf_r+0x18>
 8004d68:	f7ff fdc4 	bl	80048f4 <__sinit>
 8004d6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d6e:	07d9      	lsls	r1, r3, #31
 8004d70:	d405      	bmi.n	8004d7e <_vfiprintf_r+0x2a>
 8004d72:	89ab      	ldrh	r3, [r5, #12]
 8004d74:	059a      	lsls	r2, r3, #22
 8004d76:	d402      	bmi.n	8004d7e <_vfiprintf_r+0x2a>
 8004d78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d7a:	f7ff fec0 	bl	8004afe <__retarget_lock_acquire_recursive>
 8004d7e:	89ab      	ldrh	r3, [r5, #12]
 8004d80:	071b      	lsls	r3, r3, #28
 8004d82:	d501      	bpl.n	8004d88 <_vfiprintf_r+0x34>
 8004d84:	692b      	ldr	r3, [r5, #16]
 8004d86:	b99b      	cbnz	r3, 8004db0 <_vfiprintf_r+0x5c>
 8004d88:	4629      	mov	r1, r5
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	f000 fb72 	bl	8005474 <__swsetup_r>
 8004d90:	b170      	cbz	r0, 8004db0 <_vfiprintf_r+0x5c>
 8004d92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d94:	07dc      	lsls	r4, r3, #31
 8004d96:	d504      	bpl.n	8004da2 <_vfiprintf_r+0x4e>
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9c:	b01d      	add	sp, #116	@ 0x74
 8004d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004da2:	89ab      	ldrh	r3, [r5, #12]
 8004da4:	0598      	lsls	r0, r3, #22
 8004da6:	d4f7      	bmi.n	8004d98 <_vfiprintf_r+0x44>
 8004da8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004daa:	f7ff fea9 	bl	8004b00 <__retarget_lock_release_recursive>
 8004dae:	e7f3      	b.n	8004d98 <_vfiprintf_r+0x44>
 8004db0:	2300      	movs	r3, #0
 8004db2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004db4:	2320      	movs	r3, #32
 8004db6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004dba:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dbe:	2330      	movs	r3, #48	@ 0x30
 8004dc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004f70 <_vfiprintf_r+0x21c>
 8004dc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004dc8:	f04f 0901 	mov.w	r9, #1
 8004dcc:	4623      	mov	r3, r4
 8004dce:	469a      	mov	sl, r3
 8004dd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dd4:	b10a      	cbz	r2, 8004dda <_vfiprintf_r+0x86>
 8004dd6:	2a25      	cmp	r2, #37	@ 0x25
 8004dd8:	d1f9      	bne.n	8004dce <_vfiprintf_r+0x7a>
 8004dda:	ebba 0b04 	subs.w	fp, sl, r4
 8004dde:	d00b      	beq.n	8004df8 <_vfiprintf_r+0xa4>
 8004de0:	465b      	mov	r3, fp
 8004de2:	4622      	mov	r2, r4
 8004de4:	4629      	mov	r1, r5
 8004de6:	4630      	mov	r0, r6
 8004de8:	f7ff ffa1 	bl	8004d2e <__sfputs_r>
 8004dec:	3001      	adds	r0, #1
 8004dee:	f000 80a7 	beq.w	8004f40 <_vfiprintf_r+0x1ec>
 8004df2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004df4:	445a      	add	r2, fp
 8004df6:	9209      	str	r2, [sp, #36]	@ 0x24
 8004df8:	f89a 3000 	ldrb.w	r3, [sl]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 809f 	beq.w	8004f40 <_vfiprintf_r+0x1ec>
 8004e02:	2300      	movs	r3, #0
 8004e04:	f04f 32ff 	mov.w	r2, #4294967295
 8004e08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e0c:	f10a 0a01 	add.w	sl, sl, #1
 8004e10:	9304      	str	r3, [sp, #16]
 8004e12:	9307      	str	r3, [sp, #28]
 8004e14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e18:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e1a:	4654      	mov	r4, sl
 8004e1c:	2205      	movs	r2, #5
 8004e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e22:	4853      	ldr	r0, [pc, #332]	@ (8004f70 <_vfiprintf_r+0x21c>)
 8004e24:	f7fb fa5c 	bl	80002e0 <memchr>
 8004e28:	9a04      	ldr	r2, [sp, #16]
 8004e2a:	b9d8      	cbnz	r0, 8004e64 <_vfiprintf_r+0x110>
 8004e2c:	06d1      	lsls	r1, r2, #27
 8004e2e:	bf44      	itt	mi
 8004e30:	2320      	movmi	r3, #32
 8004e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e36:	0713      	lsls	r3, r2, #28
 8004e38:	bf44      	itt	mi
 8004e3a:	232b      	movmi	r3, #43	@ 0x2b
 8004e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e40:	f89a 3000 	ldrb.w	r3, [sl]
 8004e44:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e46:	d015      	beq.n	8004e74 <_vfiprintf_r+0x120>
 8004e48:	9a07      	ldr	r2, [sp, #28]
 8004e4a:	4654      	mov	r4, sl
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	f04f 0c0a 	mov.w	ip, #10
 8004e52:	4621      	mov	r1, r4
 8004e54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e58:	3b30      	subs	r3, #48	@ 0x30
 8004e5a:	2b09      	cmp	r3, #9
 8004e5c:	d94b      	bls.n	8004ef6 <_vfiprintf_r+0x1a2>
 8004e5e:	b1b0      	cbz	r0, 8004e8e <_vfiprintf_r+0x13a>
 8004e60:	9207      	str	r2, [sp, #28]
 8004e62:	e014      	b.n	8004e8e <_vfiprintf_r+0x13a>
 8004e64:	eba0 0308 	sub.w	r3, r0, r8
 8004e68:	fa09 f303 	lsl.w	r3, r9, r3
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	9304      	str	r3, [sp, #16]
 8004e70:	46a2      	mov	sl, r4
 8004e72:	e7d2      	b.n	8004e1a <_vfiprintf_r+0xc6>
 8004e74:	9b03      	ldr	r3, [sp, #12]
 8004e76:	1d19      	adds	r1, r3, #4
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	9103      	str	r1, [sp, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	bfbb      	ittet	lt
 8004e80:	425b      	neglt	r3, r3
 8004e82:	f042 0202 	orrlt.w	r2, r2, #2
 8004e86:	9307      	strge	r3, [sp, #28]
 8004e88:	9307      	strlt	r3, [sp, #28]
 8004e8a:	bfb8      	it	lt
 8004e8c:	9204      	strlt	r2, [sp, #16]
 8004e8e:	7823      	ldrb	r3, [r4, #0]
 8004e90:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e92:	d10a      	bne.n	8004eaa <_vfiprintf_r+0x156>
 8004e94:	7863      	ldrb	r3, [r4, #1]
 8004e96:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e98:	d132      	bne.n	8004f00 <_vfiprintf_r+0x1ac>
 8004e9a:	9b03      	ldr	r3, [sp, #12]
 8004e9c:	1d1a      	adds	r2, r3, #4
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	9203      	str	r2, [sp, #12]
 8004ea2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ea6:	3402      	adds	r4, #2
 8004ea8:	9305      	str	r3, [sp, #20]
 8004eaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004f80 <_vfiprintf_r+0x22c>
 8004eae:	7821      	ldrb	r1, [r4, #0]
 8004eb0:	2203      	movs	r2, #3
 8004eb2:	4650      	mov	r0, sl
 8004eb4:	f7fb fa14 	bl	80002e0 <memchr>
 8004eb8:	b138      	cbz	r0, 8004eca <_vfiprintf_r+0x176>
 8004eba:	9b04      	ldr	r3, [sp, #16]
 8004ebc:	eba0 000a 	sub.w	r0, r0, sl
 8004ec0:	2240      	movs	r2, #64	@ 0x40
 8004ec2:	4082      	lsls	r2, r0
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	3401      	adds	r4, #1
 8004ec8:	9304      	str	r3, [sp, #16]
 8004eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ece:	4829      	ldr	r0, [pc, #164]	@ (8004f74 <_vfiprintf_r+0x220>)
 8004ed0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ed4:	2206      	movs	r2, #6
 8004ed6:	f7fb fa03 	bl	80002e0 <memchr>
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d03f      	beq.n	8004f5e <_vfiprintf_r+0x20a>
 8004ede:	4b26      	ldr	r3, [pc, #152]	@ (8004f78 <_vfiprintf_r+0x224>)
 8004ee0:	bb1b      	cbnz	r3, 8004f2a <_vfiprintf_r+0x1d6>
 8004ee2:	9b03      	ldr	r3, [sp, #12]
 8004ee4:	3307      	adds	r3, #7
 8004ee6:	f023 0307 	bic.w	r3, r3, #7
 8004eea:	3308      	adds	r3, #8
 8004eec:	9303      	str	r3, [sp, #12]
 8004eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ef0:	443b      	add	r3, r7
 8004ef2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ef4:	e76a      	b.n	8004dcc <_vfiprintf_r+0x78>
 8004ef6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004efa:	460c      	mov	r4, r1
 8004efc:	2001      	movs	r0, #1
 8004efe:	e7a8      	b.n	8004e52 <_vfiprintf_r+0xfe>
 8004f00:	2300      	movs	r3, #0
 8004f02:	3401      	adds	r4, #1
 8004f04:	9305      	str	r3, [sp, #20]
 8004f06:	4619      	mov	r1, r3
 8004f08:	f04f 0c0a 	mov.w	ip, #10
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f12:	3a30      	subs	r2, #48	@ 0x30
 8004f14:	2a09      	cmp	r2, #9
 8004f16:	d903      	bls.n	8004f20 <_vfiprintf_r+0x1cc>
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0c6      	beq.n	8004eaa <_vfiprintf_r+0x156>
 8004f1c:	9105      	str	r1, [sp, #20]
 8004f1e:	e7c4      	b.n	8004eaa <_vfiprintf_r+0x156>
 8004f20:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f24:	4604      	mov	r4, r0
 8004f26:	2301      	movs	r3, #1
 8004f28:	e7f0      	b.n	8004f0c <_vfiprintf_r+0x1b8>
 8004f2a:	ab03      	add	r3, sp, #12
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	462a      	mov	r2, r5
 8004f30:	4b12      	ldr	r3, [pc, #72]	@ (8004f7c <_vfiprintf_r+0x228>)
 8004f32:	a904      	add	r1, sp, #16
 8004f34:	4630      	mov	r0, r6
 8004f36:	f3af 8000 	nop.w
 8004f3a:	4607      	mov	r7, r0
 8004f3c:	1c78      	adds	r0, r7, #1
 8004f3e:	d1d6      	bne.n	8004eee <_vfiprintf_r+0x19a>
 8004f40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f42:	07d9      	lsls	r1, r3, #31
 8004f44:	d405      	bmi.n	8004f52 <_vfiprintf_r+0x1fe>
 8004f46:	89ab      	ldrh	r3, [r5, #12]
 8004f48:	059a      	lsls	r2, r3, #22
 8004f4a:	d402      	bmi.n	8004f52 <_vfiprintf_r+0x1fe>
 8004f4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f4e:	f7ff fdd7 	bl	8004b00 <__retarget_lock_release_recursive>
 8004f52:	89ab      	ldrh	r3, [r5, #12]
 8004f54:	065b      	lsls	r3, r3, #25
 8004f56:	f53f af1f 	bmi.w	8004d98 <_vfiprintf_r+0x44>
 8004f5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f5c:	e71e      	b.n	8004d9c <_vfiprintf_r+0x48>
 8004f5e:	ab03      	add	r3, sp, #12
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	462a      	mov	r2, r5
 8004f64:	4b05      	ldr	r3, [pc, #20]	@ (8004f7c <_vfiprintf_r+0x228>)
 8004f66:	a904      	add	r1, sp, #16
 8004f68:	4630      	mov	r0, r6
 8004f6a:	f000 f879 	bl	8005060 <_printf_i>
 8004f6e:	e7e4      	b.n	8004f3a <_vfiprintf_r+0x1e6>
 8004f70:	08005763 	.word	0x08005763
 8004f74:	0800576d 	.word	0x0800576d
 8004f78:	00000000 	.word	0x00000000
 8004f7c:	08004d2f 	.word	0x08004d2f
 8004f80:	08005769 	.word	0x08005769

08004f84 <_printf_common>:
 8004f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f88:	4616      	mov	r6, r2
 8004f8a:	4698      	mov	r8, r3
 8004f8c:	688a      	ldr	r2, [r1, #8]
 8004f8e:	690b      	ldr	r3, [r1, #16]
 8004f90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f94:	4293      	cmp	r3, r2
 8004f96:	bfb8      	it	lt
 8004f98:	4613      	movlt	r3, r2
 8004f9a:	6033      	str	r3, [r6, #0]
 8004f9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004fa0:	4607      	mov	r7, r0
 8004fa2:	460c      	mov	r4, r1
 8004fa4:	b10a      	cbz	r2, 8004faa <_printf_common+0x26>
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	6033      	str	r3, [r6, #0]
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	0699      	lsls	r1, r3, #26
 8004fae:	bf42      	ittt	mi
 8004fb0:	6833      	ldrmi	r3, [r6, #0]
 8004fb2:	3302      	addmi	r3, #2
 8004fb4:	6033      	strmi	r3, [r6, #0]
 8004fb6:	6825      	ldr	r5, [r4, #0]
 8004fb8:	f015 0506 	ands.w	r5, r5, #6
 8004fbc:	d106      	bne.n	8004fcc <_printf_common+0x48>
 8004fbe:	f104 0a19 	add.w	sl, r4, #25
 8004fc2:	68e3      	ldr	r3, [r4, #12]
 8004fc4:	6832      	ldr	r2, [r6, #0]
 8004fc6:	1a9b      	subs	r3, r3, r2
 8004fc8:	42ab      	cmp	r3, r5
 8004fca:	dc26      	bgt.n	800501a <_printf_common+0x96>
 8004fcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004fd0:	6822      	ldr	r2, [r4, #0]
 8004fd2:	3b00      	subs	r3, #0
 8004fd4:	bf18      	it	ne
 8004fd6:	2301      	movne	r3, #1
 8004fd8:	0692      	lsls	r2, r2, #26
 8004fda:	d42b      	bmi.n	8005034 <_printf_common+0xb0>
 8004fdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	47c8      	blx	r9
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	d01e      	beq.n	8005028 <_printf_common+0xa4>
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	6922      	ldr	r2, [r4, #16]
 8004fee:	f003 0306 	and.w	r3, r3, #6
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	bf02      	ittt	eq
 8004ff6:	68e5      	ldreq	r5, [r4, #12]
 8004ff8:	6833      	ldreq	r3, [r6, #0]
 8004ffa:	1aed      	subeq	r5, r5, r3
 8004ffc:	68a3      	ldr	r3, [r4, #8]
 8004ffe:	bf0c      	ite	eq
 8005000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005004:	2500      	movne	r5, #0
 8005006:	4293      	cmp	r3, r2
 8005008:	bfc4      	itt	gt
 800500a:	1a9b      	subgt	r3, r3, r2
 800500c:	18ed      	addgt	r5, r5, r3
 800500e:	2600      	movs	r6, #0
 8005010:	341a      	adds	r4, #26
 8005012:	42b5      	cmp	r5, r6
 8005014:	d11a      	bne.n	800504c <_printf_common+0xc8>
 8005016:	2000      	movs	r0, #0
 8005018:	e008      	b.n	800502c <_printf_common+0xa8>
 800501a:	2301      	movs	r3, #1
 800501c:	4652      	mov	r2, sl
 800501e:	4641      	mov	r1, r8
 8005020:	4638      	mov	r0, r7
 8005022:	47c8      	blx	r9
 8005024:	3001      	adds	r0, #1
 8005026:	d103      	bne.n	8005030 <_printf_common+0xac>
 8005028:	f04f 30ff 	mov.w	r0, #4294967295
 800502c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005030:	3501      	adds	r5, #1
 8005032:	e7c6      	b.n	8004fc2 <_printf_common+0x3e>
 8005034:	18e1      	adds	r1, r4, r3
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	2030      	movs	r0, #48	@ 0x30
 800503a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800503e:	4422      	add	r2, r4
 8005040:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005044:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005048:	3302      	adds	r3, #2
 800504a:	e7c7      	b.n	8004fdc <_printf_common+0x58>
 800504c:	2301      	movs	r3, #1
 800504e:	4622      	mov	r2, r4
 8005050:	4641      	mov	r1, r8
 8005052:	4638      	mov	r0, r7
 8005054:	47c8      	blx	r9
 8005056:	3001      	adds	r0, #1
 8005058:	d0e6      	beq.n	8005028 <_printf_common+0xa4>
 800505a:	3601      	adds	r6, #1
 800505c:	e7d9      	b.n	8005012 <_printf_common+0x8e>
	...

08005060 <_printf_i>:
 8005060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005064:	7e0f      	ldrb	r7, [r1, #24]
 8005066:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005068:	2f78      	cmp	r7, #120	@ 0x78
 800506a:	4691      	mov	r9, r2
 800506c:	4680      	mov	r8, r0
 800506e:	460c      	mov	r4, r1
 8005070:	469a      	mov	sl, r3
 8005072:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005076:	d807      	bhi.n	8005088 <_printf_i+0x28>
 8005078:	2f62      	cmp	r7, #98	@ 0x62
 800507a:	d80a      	bhi.n	8005092 <_printf_i+0x32>
 800507c:	2f00      	cmp	r7, #0
 800507e:	f000 80d2 	beq.w	8005226 <_printf_i+0x1c6>
 8005082:	2f58      	cmp	r7, #88	@ 0x58
 8005084:	f000 80b9 	beq.w	80051fa <_printf_i+0x19a>
 8005088:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800508c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005090:	e03a      	b.n	8005108 <_printf_i+0xa8>
 8005092:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005096:	2b15      	cmp	r3, #21
 8005098:	d8f6      	bhi.n	8005088 <_printf_i+0x28>
 800509a:	a101      	add	r1, pc, #4	@ (adr r1, 80050a0 <_printf_i+0x40>)
 800509c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050a0:	080050f9 	.word	0x080050f9
 80050a4:	0800510d 	.word	0x0800510d
 80050a8:	08005089 	.word	0x08005089
 80050ac:	08005089 	.word	0x08005089
 80050b0:	08005089 	.word	0x08005089
 80050b4:	08005089 	.word	0x08005089
 80050b8:	0800510d 	.word	0x0800510d
 80050bc:	08005089 	.word	0x08005089
 80050c0:	08005089 	.word	0x08005089
 80050c4:	08005089 	.word	0x08005089
 80050c8:	08005089 	.word	0x08005089
 80050cc:	0800520d 	.word	0x0800520d
 80050d0:	08005137 	.word	0x08005137
 80050d4:	080051c7 	.word	0x080051c7
 80050d8:	08005089 	.word	0x08005089
 80050dc:	08005089 	.word	0x08005089
 80050e0:	0800522f 	.word	0x0800522f
 80050e4:	08005089 	.word	0x08005089
 80050e8:	08005137 	.word	0x08005137
 80050ec:	08005089 	.word	0x08005089
 80050f0:	08005089 	.word	0x08005089
 80050f4:	080051cf 	.word	0x080051cf
 80050f8:	6833      	ldr	r3, [r6, #0]
 80050fa:	1d1a      	adds	r2, r3, #4
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6032      	str	r2, [r6, #0]
 8005100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005104:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005108:	2301      	movs	r3, #1
 800510a:	e09d      	b.n	8005248 <_printf_i+0x1e8>
 800510c:	6833      	ldr	r3, [r6, #0]
 800510e:	6820      	ldr	r0, [r4, #0]
 8005110:	1d19      	adds	r1, r3, #4
 8005112:	6031      	str	r1, [r6, #0]
 8005114:	0606      	lsls	r6, r0, #24
 8005116:	d501      	bpl.n	800511c <_printf_i+0xbc>
 8005118:	681d      	ldr	r5, [r3, #0]
 800511a:	e003      	b.n	8005124 <_printf_i+0xc4>
 800511c:	0645      	lsls	r5, r0, #25
 800511e:	d5fb      	bpl.n	8005118 <_printf_i+0xb8>
 8005120:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005124:	2d00      	cmp	r5, #0
 8005126:	da03      	bge.n	8005130 <_printf_i+0xd0>
 8005128:	232d      	movs	r3, #45	@ 0x2d
 800512a:	426d      	negs	r5, r5
 800512c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005130:	4859      	ldr	r0, [pc, #356]	@ (8005298 <_printf_i+0x238>)
 8005132:	230a      	movs	r3, #10
 8005134:	e011      	b.n	800515a <_printf_i+0xfa>
 8005136:	6821      	ldr	r1, [r4, #0]
 8005138:	6833      	ldr	r3, [r6, #0]
 800513a:	0608      	lsls	r0, r1, #24
 800513c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005140:	d402      	bmi.n	8005148 <_printf_i+0xe8>
 8005142:	0649      	lsls	r1, r1, #25
 8005144:	bf48      	it	mi
 8005146:	b2ad      	uxthmi	r5, r5
 8005148:	2f6f      	cmp	r7, #111	@ 0x6f
 800514a:	4853      	ldr	r0, [pc, #332]	@ (8005298 <_printf_i+0x238>)
 800514c:	6033      	str	r3, [r6, #0]
 800514e:	bf14      	ite	ne
 8005150:	230a      	movne	r3, #10
 8005152:	2308      	moveq	r3, #8
 8005154:	2100      	movs	r1, #0
 8005156:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800515a:	6866      	ldr	r6, [r4, #4]
 800515c:	60a6      	str	r6, [r4, #8]
 800515e:	2e00      	cmp	r6, #0
 8005160:	bfa2      	ittt	ge
 8005162:	6821      	ldrge	r1, [r4, #0]
 8005164:	f021 0104 	bicge.w	r1, r1, #4
 8005168:	6021      	strge	r1, [r4, #0]
 800516a:	b90d      	cbnz	r5, 8005170 <_printf_i+0x110>
 800516c:	2e00      	cmp	r6, #0
 800516e:	d04b      	beq.n	8005208 <_printf_i+0x1a8>
 8005170:	4616      	mov	r6, r2
 8005172:	fbb5 f1f3 	udiv	r1, r5, r3
 8005176:	fb03 5711 	mls	r7, r3, r1, r5
 800517a:	5dc7      	ldrb	r7, [r0, r7]
 800517c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005180:	462f      	mov	r7, r5
 8005182:	42bb      	cmp	r3, r7
 8005184:	460d      	mov	r5, r1
 8005186:	d9f4      	bls.n	8005172 <_printf_i+0x112>
 8005188:	2b08      	cmp	r3, #8
 800518a:	d10b      	bne.n	80051a4 <_printf_i+0x144>
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	07df      	lsls	r7, r3, #31
 8005190:	d508      	bpl.n	80051a4 <_printf_i+0x144>
 8005192:	6923      	ldr	r3, [r4, #16]
 8005194:	6861      	ldr	r1, [r4, #4]
 8005196:	4299      	cmp	r1, r3
 8005198:	bfde      	ittt	le
 800519a:	2330      	movle	r3, #48	@ 0x30
 800519c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051a4:	1b92      	subs	r2, r2, r6
 80051a6:	6122      	str	r2, [r4, #16]
 80051a8:	f8cd a000 	str.w	sl, [sp]
 80051ac:	464b      	mov	r3, r9
 80051ae:	aa03      	add	r2, sp, #12
 80051b0:	4621      	mov	r1, r4
 80051b2:	4640      	mov	r0, r8
 80051b4:	f7ff fee6 	bl	8004f84 <_printf_common>
 80051b8:	3001      	adds	r0, #1
 80051ba:	d14a      	bne.n	8005252 <_printf_i+0x1f2>
 80051bc:	f04f 30ff 	mov.w	r0, #4294967295
 80051c0:	b004      	add	sp, #16
 80051c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	f043 0320 	orr.w	r3, r3, #32
 80051cc:	6023      	str	r3, [r4, #0]
 80051ce:	4833      	ldr	r0, [pc, #204]	@ (800529c <_printf_i+0x23c>)
 80051d0:	2778      	movs	r7, #120	@ 0x78
 80051d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	6831      	ldr	r1, [r6, #0]
 80051da:	061f      	lsls	r7, r3, #24
 80051dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80051e0:	d402      	bmi.n	80051e8 <_printf_i+0x188>
 80051e2:	065f      	lsls	r7, r3, #25
 80051e4:	bf48      	it	mi
 80051e6:	b2ad      	uxthmi	r5, r5
 80051e8:	6031      	str	r1, [r6, #0]
 80051ea:	07d9      	lsls	r1, r3, #31
 80051ec:	bf44      	itt	mi
 80051ee:	f043 0320 	orrmi.w	r3, r3, #32
 80051f2:	6023      	strmi	r3, [r4, #0]
 80051f4:	b11d      	cbz	r5, 80051fe <_printf_i+0x19e>
 80051f6:	2310      	movs	r3, #16
 80051f8:	e7ac      	b.n	8005154 <_printf_i+0xf4>
 80051fa:	4827      	ldr	r0, [pc, #156]	@ (8005298 <_printf_i+0x238>)
 80051fc:	e7e9      	b.n	80051d2 <_printf_i+0x172>
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	f023 0320 	bic.w	r3, r3, #32
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	e7f6      	b.n	80051f6 <_printf_i+0x196>
 8005208:	4616      	mov	r6, r2
 800520a:	e7bd      	b.n	8005188 <_printf_i+0x128>
 800520c:	6833      	ldr	r3, [r6, #0]
 800520e:	6825      	ldr	r5, [r4, #0]
 8005210:	6961      	ldr	r1, [r4, #20]
 8005212:	1d18      	adds	r0, r3, #4
 8005214:	6030      	str	r0, [r6, #0]
 8005216:	062e      	lsls	r6, r5, #24
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	d501      	bpl.n	8005220 <_printf_i+0x1c0>
 800521c:	6019      	str	r1, [r3, #0]
 800521e:	e002      	b.n	8005226 <_printf_i+0x1c6>
 8005220:	0668      	lsls	r0, r5, #25
 8005222:	d5fb      	bpl.n	800521c <_printf_i+0x1bc>
 8005224:	8019      	strh	r1, [r3, #0]
 8005226:	2300      	movs	r3, #0
 8005228:	6123      	str	r3, [r4, #16]
 800522a:	4616      	mov	r6, r2
 800522c:	e7bc      	b.n	80051a8 <_printf_i+0x148>
 800522e:	6833      	ldr	r3, [r6, #0]
 8005230:	1d1a      	adds	r2, r3, #4
 8005232:	6032      	str	r2, [r6, #0]
 8005234:	681e      	ldr	r6, [r3, #0]
 8005236:	6862      	ldr	r2, [r4, #4]
 8005238:	2100      	movs	r1, #0
 800523a:	4630      	mov	r0, r6
 800523c:	f7fb f850 	bl	80002e0 <memchr>
 8005240:	b108      	cbz	r0, 8005246 <_printf_i+0x1e6>
 8005242:	1b80      	subs	r0, r0, r6
 8005244:	6060      	str	r0, [r4, #4]
 8005246:	6863      	ldr	r3, [r4, #4]
 8005248:	6123      	str	r3, [r4, #16]
 800524a:	2300      	movs	r3, #0
 800524c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005250:	e7aa      	b.n	80051a8 <_printf_i+0x148>
 8005252:	6923      	ldr	r3, [r4, #16]
 8005254:	4632      	mov	r2, r6
 8005256:	4649      	mov	r1, r9
 8005258:	4640      	mov	r0, r8
 800525a:	47d0      	blx	sl
 800525c:	3001      	adds	r0, #1
 800525e:	d0ad      	beq.n	80051bc <_printf_i+0x15c>
 8005260:	6823      	ldr	r3, [r4, #0]
 8005262:	079b      	lsls	r3, r3, #30
 8005264:	d413      	bmi.n	800528e <_printf_i+0x22e>
 8005266:	68e0      	ldr	r0, [r4, #12]
 8005268:	9b03      	ldr	r3, [sp, #12]
 800526a:	4298      	cmp	r0, r3
 800526c:	bfb8      	it	lt
 800526e:	4618      	movlt	r0, r3
 8005270:	e7a6      	b.n	80051c0 <_printf_i+0x160>
 8005272:	2301      	movs	r3, #1
 8005274:	4632      	mov	r2, r6
 8005276:	4649      	mov	r1, r9
 8005278:	4640      	mov	r0, r8
 800527a:	47d0      	blx	sl
 800527c:	3001      	adds	r0, #1
 800527e:	d09d      	beq.n	80051bc <_printf_i+0x15c>
 8005280:	3501      	adds	r5, #1
 8005282:	68e3      	ldr	r3, [r4, #12]
 8005284:	9903      	ldr	r1, [sp, #12]
 8005286:	1a5b      	subs	r3, r3, r1
 8005288:	42ab      	cmp	r3, r5
 800528a:	dcf2      	bgt.n	8005272 <_printf_i+0x212>
 800528c:	e7eb      	b.n	8005266 <_printf_i+0x206>
 800528e:	2500      	movs	r5, #0
 8005290:	f104 0619 	add.w	r6, r4, #25
 8005294:	e7f5      	b.n	8005282 <_printf_i+0x222>
 8005296:	bf00      	nop
 8005298:	08005774 	.word	0x08005774
 800529c:	08005785 	.word	0x08005785

080052a0 <__sflush_r>:
 80052a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80052a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052a8:	0716      	lsls	r6, r2, #28
 80052aa:	4605      	mov	r5, r0
 80052ac:	460c      	mov	r4, r1
 80052ae:	d454      	bmi.n	800535a <__sflush_r+0xba>
 80052b0:	684b      	ldr	r3, [r1, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	dc02      	bgt.n	80052bc <__sflush_r+0x1c>
 80052b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	dd48      	ble.n	800534e <__sflush_r+0xae>
 80052bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80052be:	2e00      	cmp	r6, #0
 80052c0:	d045      	beq.n	800534e <__sflush_r+0xae>
 80052c2:	2300      	movs	r3, #0
 80052c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80052c8:	682f      	ldr	r7, [r5, #0]
 80052ca:	6a21      	ldr	r1, [r4, #32]
 80052cc:	602b      	str	r3, [r5, #0]
 80052ce:	d030      	beq.n	8005332 <__sflush_r+0x92>
 80052d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	0759      	lsls	r1, r3, #29
 80052d6:	d505      	bpl.n	80052e4 <__sflush_r+0x44>
 80052d8:	6863      	ldr	r3, [r4, #4]
 80052da:	1ad2      	subs	r2, r2, r3
 80052dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80052de:	b10b      	cbz	r3, 80052e4 <__sflush_r+0x44>
 80052e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80052e2:	1ad2      	subs	r2, r2, r3
 80052e4:	2300      	movs	r3, #0
 80052e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80052e8:	6a21      	ldr	r1, [r4, #32]
 80052ea:	4628      	mov	r0, r5
 80052ec:	47b0      	blx	r6
 80052ee:	1c43      	adds	r3, r0, #1
 80052f0:	89a3      	ldrh	r3, [r4, #12]
 80052f2:	d106      	bne.n	8005302 <__sflush_r+0x62>
 80052f4:	6829      	ldr	r1, [r5, #0]
 80052f6:	291d      	cmp	r1, #29
 80052f8:	d82b      	bhi.n	8005352 <__sflush_r+0xb2>
 80052fa:	4a2a      	ldr	r2, [pc, #168]	@ (80053a4 <__sflush_r+0x104>)
 80052fc:	410a      	asrs	r2, r1
 80052fe:	07d6      	lsls	r6, r2, #31
 8005300:	d427      	bmi.n	8005352 <__sflush_r+0xb2>
 8005302:	2200      	movs	r2, #0
 8005304:	6062      	str	r2, [r4, #4]
 8005306:	04d9      	lsls	r1, r3, #19
 8005308:	6922      	ldr	r2, [r4, #16]
 800530a:	6022      	str	r2, [r4, #0]
 800530c:	d504      	bpl.n	8005318 <__sflush_r+0x78>
 800530e:	1c42      	adds	r2, r0, #1
 8005310:	d101      	bne.n	8005316 <__sflush_r+0x76>
 8005312:	682b      	ldr	r3, [r5, #0]
 8005314:	b903      	cbnz	r3, 8005318 <__sflush_r+0x78>
 8005316:	6560      	str	r0, [r4, #84]	@ 0x54
 8005318:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800531a:	602f      	str	r7, [r5, #0]
 800531c:	b1b9      	cbz	r1, 800534e <__sflush_r+0xae>
 800531e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005322:	4299      	cmp	r1, r3
 8005324:	d002      	beq.n	800532c <__sflush_r+0x8c>
 8005326:	4628      	mov	r0, r5
 8005328:	f7ff fbf2 	bl	8004b10 <_free_r>
 800532c:	2300      	movs	r3, #0
 800532e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005330:	e00d      	b.n	800534e <__sflush_r+0xae>
 8005332:	2301      	movs	r3, #1
 8005334:	4628      	mov	r0, r5
 8005336:	47b0      	blx	r6
 8005338:	4602      	mov	r2, r0
 800533a:	1c50      	adds	r0, r2, #1
 800533c:	d1c9      	bne.n	80052d2 <__sflush_r+0x32>
 800533e:	682b      	ldr	r3, [r5, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0c6      	beq.n	80052d2 <__sflush_r+0x32>
 8005344:	2b1d      	cmp	r3, #29
 8005346:	d001      	beq.n	800534c <__sflush_r+0xac>
 8005348:	2b16      	cmp	r3, #22
 800534a:	d11e      	bne.n	800538a <__sflush_r+0xea>
 800534c:	602f      	str	r7, [r5, #0]
 800534e:	2000      	movs	r0, #0
 8005350:	e022      	b.n	8005398 <__sflush_r+0xf8>
 8005352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005356:	b21b      	sxth	r3, r3
 8005358:	e01b      	b.n	8005392 <__sflush_r+0xf2>
 800535a:	690f      	ldr	r7, [r1, #16]
 800535c:	2f00      	cmp	r7, #0
 800535e:	d0f6      	beq.n	800534e <__sflush_r+0xae>
 8005360:	0793      	lsls	r3, r2, #30
 8005362:	680e      	ldr	r6, [r1, #0]
 8005364:	bf08      	it	eq
 8005366:	694b      	ldreq	r3, [r1, #20]
 8005368:	600f      	str	r7, [r1, #0]
 800536a:	bf18      	it	ne
 800536c:	2300      	movne	r3, #0
 800536e:	eba6 0807 	sub.w	r8, r6, r7
 8005372:	608b      	str	r3, [r1, #8]
 8005374:	f1b8 0f00 	cmp.w	r8, #0
 8005378:	dde9      	ble.n	800534e <__sflush_r+0xae>
 800537a:	6a21      	ldr	r1, [r4, #32]
 800537c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800537e:	4643      	mov	r3, r8
 8005380:	463a      	mov	r2, r7
 8005382:	4628      	mov	r0, r5
 8005384:	47b0      	blx	r6
 8005386:	2800      	cmp	r0, #0
 8005388:	dc08      	bgt.n	800539c <__sflush_r+0xfc>
 800538a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800538e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005392:	81a3      	strh	r3, [r4, #12]
 8005394:	f04f 30ff 	mov.w	r0, #4294967295
 8005398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800539c:	4407      	add	r7, r0
 800539e:	eba8 0800 	sub.w	r8, r8, r0
 80053a2:	e7e7      	b.n	8005374 <__sflush_r+0xd4>
 80053a4:	dfbffffe 	.word	0xdfbffffe

080053a8 <_fflush_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	690b      	ldr	r3, [r1, #16]
 80053ac:	4605      	mov	r5, r0
 80053ae:	460c      	mov	r4, r1
 80053b0:	b913      	cbnz	r3, 80053b8 <_fflush_r+0x10>
 80053b2:	2500      	movs	r5, #0
 80053b4:	4628      	mov	r0, r5
 80053b6:	bd38      	pop	{r3, r4, r5, pc}
 80053b8:	b118      	cbz	r0, 80053c2 <_fflush_r+0x1a>
 80053ba:	6a03      	ldr	r3, [r0, #32]
 80053bc:	b90b      	cbnz	r3, 80053c2 <_fflush_r+0x1a>
 80053be:	f7ff fa99 	bl	80048f4 <__sinit>
 80053c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0f3      	beq.n	80053b2 <_fflush_r+0xa>
 80053ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80053cc:	07d0      	lsls	r0, r2, #31
 80053ce:	d404      	bmi.n	80053da <_fflush_r+0x32>
 80053d0:	0599      	lsls	r1, r3, #22
 80053d2:	d402      	bmi.n	80053da <_fflush_r+0x32>
 80053d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053d6:	f7ff fb92 	bl	8004afe <__retarget_lock_acquire_recursive>
 80053da:	4628      	mov	r0, r5
 80053dc:	4621      	mov	r1, r4
 80053de:	f7ff ff5f 	bl	80052a0 <__sflush_r>
 80053e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053e4:	07da      	lsls	r2, r3, #31
 80053e6:	4605      	mov	r5, r0
 80053e8:	d4e4      	bmi.n	80053b4 <_fflush_r+0xc>
 80053ea:	89a3      	ldrh	r3, [r4, #12]
 80053ec:	059b      	lsls	r3, r3, #22
 80053ee:	d4e1      	bmi.n	80053b4 <_fflush_r+0xc>
 80053f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053f2:	f7ff fb85 	bl	8004b00 <__retarget_lock_release_recursive>
 80053f6:	e7dd      	b.n	80053b4 <_fflush_r+0xc>

080053f8 <__swbuf_r>:
 80053f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053fa:	460e      	mov	r6, r1
 80053fc:	4614      	mov	r4, r2
 80053fe:	4605      	mov	r5, r0
 8005400:	b118      	cbz	r0, 800540a <__swbuf_r+0x12>
 8005402:	6a03      	ldr	r3, [r0, #32]
 8005404:	b90b      	cbnz	r3, 800540a <__swbuf_r+0x12>
 8005406:	f7ff fa75 	bl	80048f4 <__sinit>
 800540a:	69a3      	ldr	r3, [r4, #24]
 800540c:	60a3      	str	r3, [r4, #8]
 800540e:	89a3      	ldrh	r3, [r4, #12]
 8005410:	071a      	lsls	r2, r3, #28
 8005412:	d501      	bpl.n	8005418 <__swbuf_r+0x20>
 8005414:	6923      	ldr	r3, [r4, #16]
 8005416:	b943      	cbnz	r3, 800542a <__swbuf_r+0x32>
 8005418:	4621      	mov	r1, r4
 800541a:	4628      	mov	r0, r5
 800541c:	f000 f82a 	bl	8005474 <__swsetup_r>
 8005420:	b118      	cbz	r0, 800542a <__swbuf_r+0x32>
 8005422:	f04f 37ff 	mov.w	r7, #4294967295
 8005426:	4638      	mov	r0, r7
 8005428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	6922      	ldr	r2, [r4, #16]
 800542e:	1a98      	subs	r0, r3, r2
 8005430:	6963      	ldr	r3, [r4, #20]
 8005432:	b2f6      	uxtb	r6, r6
 8005434:	4283      	cmp	r3, r0
 8005436:	4637      	mov	r7, r6
 8005438:	dc05      	bgt.n	8005446 <__swbuf_r+0x4e>
 800543a:	4621      	mov	r1, r4
 800543c:	4628      	mov	r0, r5
 800543e:	f7ff ffb3 	bl	80053a8 <_fflush_r>
 8005442:	2800      	cmp	r0, #0
 8005444:	d1ed      	bne.n	8005422 <__swbuf_r+0x2a>
 8005446:	68a3      	ldr	r3, [r4, #8]
 8005448:	3b01      	subs	r3, #1
 800544a:	60a3      	str	r3, [r4, #8]
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	6022      	str	r2, [r4, #0]
 8005452:	701e      	strb	r6, [r3, #0]
 8005454:	6962      	ldr	r2, [r4, #20]
 8005456:	1c43      	adds	r3, r0, #1
 8005458:	429a      	cmp	r2, r3
 800545a:	d004      	beq.n	8005466 <__swbuf_r+0x6e>
 800545c:	89a3      	ldrh	r3, [r4, #12]
 800545e:	07db      	lsls	r3, r3, #31
 8005460:	d5e1      	bpl.n	8005426 <__swbuf_r+0x2e>
 8005462:	2e0a      	cmp	r6, #10
 8005464:	d1df      	bne.n	8005426 <__swbuf_r+0x2e>
 8005466:	4621      	mov	r1, r4
 8005468:	4628      	mov	r0, r5
 800546a:	f7ff ff9d 	bl	80053a8 <_fflush_r>
 800546e:	2800      	cmp	r0, #0
 8005470:	d0d9      	beq.n	8005426 <__swbuf_r+0x2e>
 8005472:	e7d6      	b.n	8005422 <__swbuf_r+0x2a>

08005474 <__swsetup_r>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	4b29      	ldr	r3, [pc, #164]	@ (800551c <__swsetup_r+0xa8>)
 8005478:	4605      	mov	r5, r0
 800547a:	6818      	ldr	r0, [r3, #0]
 800547c:	460c      	mov	r4, r1
 800547e:	b118      	cbz	r0, 8005488 <__swsetup_r+0x14>
 8005480:	6a03      	ldr	r3, [r0, #32]
 8005482:	b90b      	cbnz	r3, 8005488 <__swsetup_r+0x14>
 8005484:	f7ff fa36 	bl	80048f4 <__sinit>
 8005488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800548c:	0719      	lsls	r1, r3, #28
 800548e:	d422      	bmi.n	80054d6 <__swsetup_r+0x62>
 8005490:	06da      	lsls	r2, r3, #27
 8005492:	d407      	bmi.n	80054a4 <__swsetup_r+0x30>
 8005494:	2209      	movs	r2, #9
 8005496:	602a      	str	r2, [r5, #0]
 8005498:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800549c:	81a3      	strh	r3, [r4, #12]
 800549e:	f04f 30ff 	mov.w	r0, #4294967295
 80054a2:	e033      	b.n	800550c <__swsetup_r+0x98>
 80054a4:	0758      	lsls	r0, r3, #29
 80054a6:	d512      	bpl.n	80054ce <__swsetup_r+0x5a>
 80054a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054aa:	b141      	cbz	r1, 80054be <__swsetup_r+0x4a>
 80054ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054b0:	4299      	cmp	r1, r3
 80054b2:	d002      	beq.n	80054ba <__swsetup_r+0x46>
 80054b4:	4628      	mov	r0, r5
 80054b6:	f7ff fb2b 	bl	8004b10 <_free_r>
 80054ba:	2300      	movs	r3, #0
 80054bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80054be:	89a3      	ldrh	r3, [r4, #12]
 80054c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80054c4:	81a3      	strh	r3, [r4, #12]
 80054c6:	2300      	movs	r3, #0
 80054c8:	6063      	str	r3, [r4, #4]
 80054ca:	6923      	ldr	r3, [r4, #16]
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	89a3      	ldrh	r3, [r4, #12]
 80054d0:	f043 0308 	orr.w	r3, r3, #8
 80054d4:	81a3      	strh	r3, [r4, #12]
 80054d6:	6923      	ldr	r3, [r4, #16]
 80054d8:	b94b      	cbnz	r3, 80054ee <__swsetup_r+0x7a>
 80054da:	89a3      	ldrh	r3, [r4, #12]
 80054dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80054e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054e4:	d003      	beq.n	80054ee <__swsetup_r+0x7a>
 80054e6:	4621      	mov	r1, r4
 80054e8:	4628      	mov	r0, r5
 80054ea:	f000 f893 	bl	8005614 <__smakebuf_r>
 80054ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054f2:	f013 0201 	ands.w	r2, r3, #1
 80054f6:	d00a      	beq.n	800550e <__swsetup_r+0x9a>
 80054f8:	2200      	movs	r2, #0
 80054fa:	60a2      	str	r2, [r4, #8]
 80054fc:	6962      	ldr	r2, [r4, #20]
 80054fe:	4252      	negs	r2, r2
 8005500:	61a2      	str	r2, [r4, #24]
 8005502:	6922      	ldr	r2, [r4, #16]
 8005504:	b942      	cbnz	r2, 8005518 <__swsetup_r+0xa4>
 8005506:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800550a:	d1c5      	bne.n	8005498 <__swsetup_r+0x24>
 800550c:	bd38      	pop	{r3, r4, r5, pc}
 800550e:	0799      	lsls	r1, r3, #30
 8005510:	bf58      	it	pl
 8005512:	6962      	ldrpl	r2, [r4, #20]
 8005514:	60a2      	str	r2, [r4, #8]
 8005516:	e7f4      	b.n	8005502 <__swsetup_r+0x8e>
 8005518:	2000      	movs	r0, #0
 800551a:	e7f7      	b.n	800550c <__swsetup_r+0x98>
 800551c:	2400001c 	.word	0x2400001c

08005520 <_raise_r>:
 8005520:	291f      	cmp	r1, #31
 8005522:	b538      	push	{r3, r4, r5, lr}
 8005524:	4605      	mov	r5, r0
 8005526:	460c      	mov	r4, r1
 8005528:	d904      	bls.n	8005534 <_raise_r+0x14>
 800552a:	2316      	movs	r3, #22
 800552c:	6003      	str	r3, [r0, #0]
 800552e:	f04f 30ff 	mov.w	r0, #4294967295
 8005532:	bd38      	pop	{r3, r4, r5, pc}
 8005534:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005536:	b112      	cbz	r2, 800553e <_raise_r+0x1e>
 8005538:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800553c:	b94b      	cbnz	r3, 8005552 <_raise_r+0x32>
 800553e:	4628      	mov	r0, r5
 8005540:	f000 f830 	bl	80055a4 <_getpid_r>
 8005544:	4622      	mov	r2, r4
 8005546:	4601      	mov	r1, r0
 8005548:	4628      	mov	r0, r5
 800554a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800554e:	f000 b817 	b.w	8005580 <_kill_r>
 8005552:	2b01      	cmp	r3, #1
 8005554:	d00a      	beq.n	800556c <_raise_r+0x4c>
 8005556:	1c59      	adds	r1, r3, #1
 8005558:	d103      	bne.n	8005562 <_raise_r+0x42>
 800555a:	2316      	movs	r3, #22
 800555c:	6003      	str	r3, [r0, #0]
 800555e:	2001      	movs	r0, #1
 8005560:	e7e7      	b.n	8005532 <_raise_r+0x12>
 8005562:	2100      	movs	r1, #0
 8005564:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005568:	4620      	mov	r0, r4
 800556a:	4798      	blx	r3
 800556c:	2000      	movs	r0, #0
 800556e:	e7e0      	b.n	8005532 <_raise_r+0x12>

08005570 <raise>:
 8005570:	4b02      	ldr	r3, [pc, #8]	@ (800557c <raise+0xc>)
 8005572:	4601      	mov	r1, r0
 8005574:	6818      	ldr	r0, [r3, #0]
 8005576:	f7ff bfd3 	b.w	8005520 <_raise_r>
 800557a:	bf00      	nop
 800557c:	2400001c 	.word	0x2400001c

08005580 <_kill_r>:
 8005580:	b538      	push	{r3, r4, r5, lr}
 8005582:	4d07      	ldr	r5, [pc, #28]	@ (80055a0 <_kill_r+0x20>)
 8005584:	2300      	movs	r3, #0
 8005586:	4604      	mov	r4, r0
 8005588:	4608      	mov	r0, r1
 800558a:	4611      	mov	r1, r2
 800558c:	602b      	str	r3, [r5, #0]
 800558e:	f7fb f99a 	bl	80008c6 <_kill>
 8005592:	1c43      	adds	r3, r0, #1
 8005594:	d102      	bne.n	800559c <_kill_r+0x1c>
 8005596:	682b      	ldr	r3, [r5, #0]
 8005598:	b103      	cbz	r3, 800559c <_kill_r+0x1c>
 800559a:	6023      	str	r3, [r4, #0]
 800559c:	bd38      	pop	{r3, r4, r5, pc}
 800559e:	bf00      	nop
 80055a0:	24000288 	.word	0x24000288

080055a4 <_getpid_r>:
 80055a4:	f7fb b987 	b.w	80008b6 <_getpid>

080055a8 <_sbrk_r>:
 80055a8:	b538      	push	{r3, r4, r5, lr}
 80055aa:	4d06      	ldr	r5, [pc, #24]	@ (80055c4 <_sbrk_r+0x1c>)
 80055ac:	2300      	movs	r3, #0
 80055ae:	4604      	mov	r4, r0
 80055b0:	4608      	mov	r0, r1
 80055b2:	602b      	str	r3, [r5, #0]
 80055b4:	f7fb fa10 	bl	80009d8 <_sbrk>
 80055b8:	1c43      	adds	r3, r0, #1
 80055ba:	d102      	bne.n	80055c2 <_sbrk_r+0x1a>
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	b103      	cbz	r3, 80055c2 <_sbrk_r+0x1a>
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	bd38      	pop	{r3, r4, r5, pc}
 80055c4:	24000288 	.word	0x24000288

080055c8 <__swhatbuf_r>:
 80055c8:	b570      	push	{r4, r5, r6, lr}
 80055ca:	460c      	mov	r4, r1
 80055cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055d0:	2900      	cmp	r1, #0
 80055d2:	b096      	sub	sp, #88	@ 0x58
 80055d4:	4615      	mov	r5, r2
 80055d6:	461e      	mov	r6, r3
 80055d8:	da0d      	bge.n	80055f6 <__swhatbuf_r+0x2e>
 80055da:	89a3      	ldrh	r3, [r4, #12]
 80055dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80055e0:	f04f 0100 	mov.w	r1, #0
 80055e4:	bf14      	ite	ne
 80055e6:	2340      	movne	r3, #64	@ 0x40
 80055e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80055ec:	2000      	movs	r0, #0
 80055ee:	6031      	str	r1, [r6, #0]
 80055f0:	602b      	str	r3, [r5, #0]
 80055f2:	b016      	add	sp, #88	@ 0x58
 80055f4:	bd70      	pop	{r4, r5, r6, pc}
 80055f6:	466a      	mov	r2, sp
 80055f8:	f000 f848 	bl	800568c <_fstat_r>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	dbec      	blt.n	80055da <__swhatbuf_r+0x12>
 8005600:	9901      	ldr	r1, [sp, #4]
 8005602:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005606:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800560a:	4259      	negs	r1, r3
 800560c:	4159      	adcs	r1, r3
 800560e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005612:	e7eb      	b.n	80055ec <__swhatbuf_r+0x24>

08005614 <__smakebuf_r>:
 8005614:	898b      	ldrh	r3, [r1, #12]
 8005616:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005618:	079d      	lsls	r5, r3, #30
 800561a:	4606      	mov	r6, r0
 800561c:	460c      	mov	r4, r1
 800561e:	d507      	bpl.n	8005630 <__smakebuf_r+0x1c>
 8005620:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	6123      	str	r3, [r4, #16]
 8005628:	2301      	movs	r3, #1
 800562a:	6163      	str	r3, [r4, #20]
 800562c:	b003      	add	sp, #12
 800562e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005630:	ab01      	add	r3, sp, #4
 8005632:	466a      	mov	r2, sp
 8005634:	f7ff ffc8 	bl	80055c8 <__swhatbuf_r>
 8005638:	9f00      	ldr	r7, [sp, #0]
 800563a:	4605      	mov	r5, r0
 800563c:	4639      	mov	r1, r7
 800563e:	4630      	mov	r0, r6
 8005640:	f7ff fad2 	bl	8004be8 <_malloc_r>
 8005644:	b948      	cbnz	r0, 800565a <__smakebuf_r+0x46>
 8005646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800564a:	059a      	lsls	r2, r3, #22
 800564c:	d4ee      	bmi.n	800562c <__smakebuf_r+0x18>
 800564e:	f023 0303 	bic.w	r3, r3, #3
 8005652:	f043 0302 	orr.w	r3, r3, #2
 8005656:	81a3      	strh	r3, [r4, #12]
 8005658:	e7e2      	b.n	8005620 <__smakebuf_r+0xc>
 800565a:	89a3      	ldrh	r3, [r4, #12]
 800565c:	6020      	str	r0, [r4, #0]
 800565e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005662:	81a3      	strh	r3, [r4, #12]
 8005664:	9b01      	ldr	r3, [sp, #4]
 8005666:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800566a:	b15b      	cbz	r3, 8005684 <__smakebuf_r+0x70>
 800566c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005670:	4630      	mov	r0, r6
 8005672:	f000 f81d 	bl	80056b0 <_isatty_r>
 8005676:	b128      	cbz	r0, 8005684 <__smakebuf_r+0x70>
 8005678:	89a3      	ldrh	r3, [r4, #12]
 800567a:	f023 0303 	bic.w	r3, r3, #3
 800567e:	f043 0301 	orr.w	r3, r3, #1
 8005682:	81a3      	strh	r3, [r4, #12]
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	431d      	orrs	r5, r3
 8005688:	81a5      	strh	r5, [r4, #12]
 800568a:	e7cf      	b.n	800562c <__smakebuf_r+0x18>

0800568c <_fstat_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	4d07      	ldr	r5, [pc, #28]	@ (80056ac <_fstat_r+0x20>)
 8005690:	2300      	movs	r3, #0
 8005692:	4604      	mov	r4, r0
 8005694:	4608      	mov	r0, r1
 8005696:	4611      	mov	r1, r2
 8005698:	602b      	str	r3, [r5, #0]
 800569a:	f7fb f974 	bl	8000986 <_fstat>
 800569e:	1c43      	adds	r3, r0, #1
 80056a0:	d102      	bne.n	80056a8 <_fstat_r+0x1c>
 80056a2:	682b      	ldr	r3, [r5, #0]
 80056a4:	b103      	cbz	r3, 80056a8 <_fstat_r+0x1c>
 80056a6:	6023      	str	r3, [r4, #0]
 80056a8:	bd38      	pop	{r3, r4, r5, pc}
 80056aa:	bf00      	nop
 80056ac:	24000288 	.word	0x24000288

080056b0 <_isatty_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	4d06      	ldr	r5, [pc, #24]	@ (80056cc <_isatty_r+0x1c>)
 80056b4:	2300      	movs	r3, #0
 80056b6:	4604      	mov	r4, r0
 80056b8:	4608      	mov	r0, r1
 80056ba:	602b      	str	r3, [r5, #0]
 80056bc:	f7fb f973 	bl	80009a6 <_isatty>
 80056c0:	1c43      	adds	r3, r0, #1
 80056c2:	d102      	bne.n	80056ca <_isatty_r+0x1a>
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	b103      	cbz	r3, 80056ca <_isatty_r+0x1a>
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	bd38      	pop	{r3, r4, r5, pc}
 80056cc:	24000288 	.word	0x24000288

080056d0 <_init>:
 80056d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d2:	bf00      	nop
 80056d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056d6:	bc08      	pop	{r3}
 80056d8:	469e      	mov	lr, r3
 80056da:	4770      	bx	lr

080056dc <_fini>:
 80056dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056de:	bf00      	nop
 80056e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056e2:	bc08      	pop	{r3}
 80056e4:	469e      	mov	lr, r3
 80056e6:	4770      	bx	lr
