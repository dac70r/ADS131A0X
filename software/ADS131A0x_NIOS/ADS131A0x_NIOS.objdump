
ADS131A0x_NIOS.elf:     file format elf32-littlenios2
ADS131A0x_NIOS.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000012ec memsz 0x000012ec flags r-x
    LOAD off    0x0000230c vaddr 0x0001130c paddr 0x000124d0 align 2**12
         filesz 0x000011c4 memsz 0x000011c4 flags rw-
    LOAD off    0x00003694 vaddr 0x00013694 paddr 0x00013694 align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001144  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  000112c4  000112c4  000022c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000011c4  0001130c  000124d0  0000230c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  00013694  00013694  00003694  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  000137b8  000137b8  000034d0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000034d0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000500  00000000  00000000  000034f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000066fa  00000000  00000000  000039f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002723  00000000  00000000  0000a0f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002615  00000000  00000000  0000c815  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000070c  00000000  00000000  0000ee2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001b68  00000000  00000000  0000f538  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000018cc  00000000  00000000  000110a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0001296c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000260  00000000  00000000  000129b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00014496  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  00014499  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001449d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001449e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0001449f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  000144a3  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  000144a7  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  000144ab  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003e  00000000  00000000  000144b4  2**0
                  CONTENTS, READONLY
 26 .jdi          000044ed  00000000  00000000  000144f2  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003f161  00000000  00000000  000189df  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
000112c4 l    d  .rodata	00000000 .rodata
0001130c l    d  .rwdata	00000000 .rwdata
00013694 l    d  .bss	00000000 .bss
000137b8 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ADS131A0x_NIOS_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00013694 l     O .bss	00000004 led_state.2083
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001130c l     O .rwdata	00001060 DEBUG
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000105ac l     F .text	00000048 altera_avalon_jtag_uart_timeout
000105f4 l     F .text	000000e8 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00010c9c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000123c4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_write.c
000111dc l     F .text	00000014 alt_get_errno
000136a8 g     O .bss	00000004 alt_instruction_exception_handler
000104d8 g     F .text	0000002c alt_main
000136b8 g     O .bss	00000100 alt_irq
000124d0 g       *ABS*	00000000 __flash_rwdata_start
00010504 g     F .text	0000000c alt_putstr
00010e74 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000136b4 g     O .bss	00000004 errno
000136a0 g     O .bss	00000004 alt_argv
0001a4a4 g       *ABS*	00000000 _gp
00010510 g     F .text	00000004 usleep
0001236c g     O .rwdata	00000030 alt_fd_list
00010f8c g     F .text	00000028 memcpy
00010d14 g     F .text	00000074 alt_exception_cause_generated_bad_addr
000107f8 g     F .text	00000140 altera_avalon_jtag_uart_read
00011120 g     F .text	00000064 .hidden __udivsi3
000101f8 g     F .text	00000040 init_timer
000124a8 g     O .rwdata	00000004 alt_max_fd
000124c8 g     O .rwdata	00000004 _global_impure_ptr
000137b8 g       *ABS*	00000000 __bss_end
00010390 g     F .text	00000068 alt_iic_isr_register
00010dbc g     F .text	000000b8 alt_tick
00010378 g     F .text	00000018 alt_ic_irq_enabled
00010d88 g     F .text	00000034 alt_alarm_stop
00013698 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
0001239c g     O .rwdata	00000028 alt_dev_null
00010c98 g     F .text	00000004 alt_dcache_flush_all
000124d0 g       *ABS*	00000000 __ram_rwdata_end
000124ac g     O .rwdata	00000008 alt_dev_list
000111f0 g     F .text	000000d4 write
0001130c g       *ABS*	00000000 __ram_rodata_end
00011184 g     F .text	00000058 .hidden __umodsi3
000137b8 g       *ABS*	00000000 end
000106dc g     F .text	00000078 altera_avalon_jtag_uart_init
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00010938 g     F .text	00000170 altera_avalon_jtag_uart_write
00010180 g     F .text	0000003c _start
000136b0 g     O .bss	00000004 _alt_tick_rate
00010aa8 g     F .text	000000e8 alt_avalon_spi_command
000136ac g     O .bss	00000004 _alt_nticks
00010534 g     F .text	0000003c alt_sys_init
00010754 g     F .text	00000030 altera_avalon_jtag_uart_close
000102dc g     F .text	00000028 .hidden __mulsi3
0001130c g       *ABS*	00000000 __ram_rwdata_start
000112c4 g       *ABS*	00000000 __ram_rodata_start
00010570 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
00010c10 g     F .text	00000088 alt_busy_sleep
00010590 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
000137b8 g       *ABS*	00000000 __alt_stack_base
000105a0 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
00010ca4 g     F .text	0000006c alt_dev_llist_insert
00010ed4 g     F .text	000000b8 __sfvwrite_small_dev
00013694 g       *ABS*	00000000 __bss_start
000102a8 g     F .text	00000034 main
00010000 g       *ABS*	00000000 __alt_mem_RAM
00010288 g     F .text	00000020 delay_ms
0001369c g     O .bss	00000004 alt_envp
00010580 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
000124bc g     O .rwdata	00000004 alt_errno
00010238 g     F .text	00000050 spi_command
00011028 g     F .text	00000084 .hidden __divsi3
000112c4 g       *ABS*	00000000 __flash_rodata_start
00010514 g     F .text	00000020 alt_irq_init
00010fd0 g     F .text	00000058 _write_r
000124cc g     O .rwdata	00000004 _impure_ptr
000136a4 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
000124b4 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010304 g     F .text	00000004 alt_ic_isr_register
000124d0 g       *ABS*	00000000 _edata
000137b8 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00010784 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00010340 g     F .text	00000038 alt_ic_irq_disable
000110ac g     F .text	00000074 .hidden __modsi3
0001a000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
0001000c g       .entry	00000000 _exit
000101bc g     F .text	0000003c timer_isr
00010b90 g     F .text	00000080 alt_alarm_start
00010fb4 g     F .text	0000001c strlen
00010d10 g     F .text	00000004 alt_icache_flush_all
00010e7c g     F .text	00000058 fputs
000124a4 g     O .rwdata	00000004 alt_priority_mask
00010308 g     F .text	00000038 alt_ic_irq_enable
000124c0 g     O .rwdata	00000008 alt_alarm_list
000103f8 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1010c:	04000074 	movhi	r16,1
   10110:	840dae04 	addi	r16,r16,14008

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	0005883a 	mov	r2,zero
    mask = 1;
   10118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	20ca703a 	and	r5,r4,r3
   10120:	28000b26 	beq	r5,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   10124:	100490fa 	slli	r2,r2,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	203ff51e 	bne	r4,zero,10114 <_gp+0xffff5c70>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	18c7883a 	add	r3,r3,r3
      i++;
   10154:	10800044 	addi	r2,r2,1

    } while (1);
   10158:	003ff006 	br	1011c <_gp+0xffff5c78>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a48117 	ldw	r2,-28156(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a92914 	ori	gp,gp,42148
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	108da514 	ori	r2,r2,13972

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18cdee14 	ori	r3,r3,14264

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <_gp+0xffff5d00>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	00103f80 	call	103f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	00104d80 	call	104d8 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <_gp+0xffff5d14>

000101bc <timer_isr>:
// timer ISR - Triggers every period of the timer
void timer_isr(void *context) {
    static int led_state = 0;

    // Toggle LED state
    led_state = !led_state;
   101bc:	d0a47c17 	ldw	r2,-28176(gp)
    IOWR_ALTERA_AVALON_PIO_DATA(GPIO_BASE, led_state);
   101c0:	00c000b4 	movhi	r3,2
   101c4:	18c41004 	addi	r3,r3,4160
// timer ISR - Triggers every period of the timer
void timer_isr(void *context) {
    static int led_state = 0;

    // Toggle LED state
    led_state = !led_state;
   101c8:	1005003a 	cmpeq	r2,r2,zero
   101cc:	d0a47c15 	stw	r2,-28176(gp)
    IOWR_ALTERA_AVALON_PIO_DATA(GPIO_BASE, led_state);
   101d0:	18800035 	stwio	r2,0(r3)

    // Clear the timer interrupt
    IOWR_ALTERA_AVALON_TIMER_STATUS(0x21020, 0);
   101d4:	008000b4 	movhi	r2,2
   101d8:	10840804 	addi	r2,r2,4128
   101dc:	10000035 	stwio	zero,0(r2)

    // Prints the message on Console (UART to Console is established through a USB Blaster)
    // Such that the message appears in synchronous with the LED
    if(led_state==0){
   101e0:	d0a47c17 	ldw	r2,-28176(gp)
   101e4:	1000031e 	bne	r2,zero,101f4 <timer_isr+0x38>
    	alt_putstr("Hello from Nios II!\n");
   101e8:	01000074 	movhi	r4,1
   101ec:	2104b104 	addi	r4,r4,4804
   101f0:	00105041 	jmpi	10504 <alt_putstr>
   101f4:	f800283a 	ret

000101f8 <init_timer>:
    }
}

// Initializes and Starts the Timer
void init_timer (void) {
   101f8:	defffe04 	addi	sp,sp,-8
	IOWR_ALTERA_AVALON_TIMER_CONTROL(0x21020,
   101fc:	008000b4 	movhi	r2,2
    	alt_putstr("Hello from Nios II!\n");
    }
}

// Initializes and Starts the Timer
void init_timer (void) {
   10200:	dfc00115 	stw	ra,4(sp)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(0x21020,
   10204:	10840904 	addi	r2,r2,4132
   10208:	00c001c4 	movi	r3,7
   1020c:	10c00035 	stwio	r3,0(r2)
									 ALTERA_AVALON_TIMER_CONTROL_START_MSK |	//starts the timer
									 ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |		//timer will restart after reaching the period value
									 ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);		//timer generates an interrupt when reaching timeout value

	// Register the ISR
	alt_ic_isr_register(0, //TIMER_IRQ_INTERRUPT_CONTROLLER_ID
   10210:	01800074 	movhi	r6,1
   10214:	d8000015 	stw	zero,0(sp)
   10218:	000f883a 	mov	r7,zero
   1021c:	31806f04 	addi	r6,r6,444
   10220:	01400044 	movi	r5,1
   10224:	0009883a 	mov	r4,zero
   10228:	00103040 	call	10304 <alt_ic_isr_register>
						1, //TIMER_IRQ
						timer_isr,
						NULL,
						NULL);
}
   1022c:	dfc00117 	ldw	ra,4(sp)
   10230:	dec00204 	addi	sp,sp,8
   10234:	f800283a 	ret

00010238 <spi_command>:

// Initializes the SPI Peripheral
void spi_command (const alt_u8 * write_data, alt_u32 read_length,
		alt_u8 * read_data ) {
   10238:	defffc04 	addi	sp,sp,-16

	int spi_check = alt_avalon_spi_command(SPI_BASE,
   1023c:	200f883a 	mov	r7,r4
   10240:	010000b4 	movhi	r4,2
   10244:	d9800115 	stw	r6,4(sp)
   10248:	d9400015 	stw	r5,0(sp)
   1024c:	d8000215 	stw	zero,8(sp)
   10250:	01800104 	movi	r6,4
   10254:	000b883a 	mov	r5,zero
   10258:	21040004 	addi	r4,r4,4096
						NULL);
}

// Initializes the SPI Peripheral
void spi_command (const alt_u8 * write_data, alt_u32 read_length,
		alt_u8 * read_data ) {
   1025c:	dfc00315 	stw	ra,12(sp)

	int spi_check = alt_avalon_spi_command(SPI_BASE,
   10260:	0010aa80 	call	10aa8 <alt_avalon_spi_command>
							write_data,			// A pointer to the data buffer that contains the data to be written, 'NULL' if N/A
							read_length,		// The number of bytes to read from the SPI slave, '0' if only writing
							read_data,			// A pointer to the buffer where the received (read) data will be stored, 'NULL' if N/A
							0					// Special control flags for the SPI command
							);
	if(spi_check == 0){
   10264:	1000051e 	bne	r2,zero,1027c <spi_command+0x44>
		alt_putstr("SPI Transmit Error!\n");
   10268:	01000074 	movhi	r4,1
   1026c:	2104b704 	addi	r4,r4,4828
	}
}
   10270:	dfc00317 	ldw	ra,12(sp)
   10274:	dec00404 	addi	sp,sp,16
							read_length,		// The number of bytes to read from the SPI slave, '0' if only writing
							read_data,			// A pointer to the buffer where the received (read) data will be stored, 'NULL' if N/A
							0					// Special control flags for the SPI command
							);
	if(spi_check == 0){
		alt_putstr("SPI Transmit Error!\n");
   10278:	00105041 	jmpi	10504 <alt_putstr>
	}
}
   1027c:	dfc00317 	ldw	ra,12(sp)
   10280:	dec00404 	addi	sp,sp,16
   10284:	f800283a 	ret

00010288 <delay_ms>:

// Delay function
void delay_ms(int milliseconds) {
   10288:	deffff04 	addi	sp,sp,-4
    usleep(milliseconds * 1000);  // Convert to microseconds
   1028c:	0140fa04 	movi	r5,1000
		alt_putstr("SPI Transmit Error!\n");
	}
}

// Delay function
void delay_ms(int milliseconds) {
   10290:	dfc00015 	stw	ra,0(sp)
    usleep(milliseconds * 1000);  // Convert to microseconds
   10294:	00102dc0 	call	102dc <__mulsi3>
   10298:	1009883a 	mov	r4,r2
}
   1029c:	dfc00017 	ldw	ra,0(sp)
   102a0:	dec00104 	addi	sp,sp,4
	}
}

// Delay function
void delay_ms(int milliseconds) {
    usleep(milliseconds * 1000);  // Convert to microseconds
   102a4:	00105101 	jmpi	10510 <usleep>

000102a8 <main>:
}


int main()
{
   102a8:	defffd04 	addi	sp,sp,-12
   102ac:	dc400115 	stw	r17,4(sp)
			alt_putstr("SPI Ok!\n");
			}
		else
			alt_putstr("SPI Fault!\n");			*/
		led_state = !led_state;
		IOWR_ALTERA_AVALON_PIO_DATA(GPIO_BASE, led_state);
   102b0:	044000b4 	movhi	r17,2
    usleep(milliseconds * 1000);  // Convert to microseconds
}


int main()
{
   102b4:	dc000015 	stw	r16,0(sp)
   102b8:	dfc00215 	stw	ra,8(sp)
	alt_u32 status;
	alt_u32 opcode_null[] = {0x0000};
	alt_u8 tx_data[] = {0xA5, 0x5A};
	alt_u8 rx_data[2];
	int led_state = 0;
   102bc:	0021883a 	mov	r16,zero
			alt_putstr("SPI Ok!\n");
			}
		else
			alt_putstr("SPI Fault!\n");			*/
		led_state = !led_state;
		IOWR_ALTERA_AVALON_PIO_DATA(GPIO_BASE, led_state);
   102c0:	8c441004 	addi	r17,r17,4160
   102c4:	8400005c 	xori	r16,r16,1
   102c8:	8c000035 	stwio	r16,0(r17)
	}
}

// Delay function
void delay_ms(int milliseconds) {
    usleep(milliseconds * 1000);  // Convert to microseconds
   102cc:	010003f4 	movhi	r4,15
   102d0:	21109004 	addi	r4,r4,16960
   102d4:	00105100 	call	10510 <usleep>
   102d8:	003ffa06 	br	102c4 <_gp+0xffff5e20>

000102dc <__mulsi3>:
   102dc:	0005883a 	mov	r2,zero
   102e0:	20000726 	beq	r4,zero,10300 <__mulsi3+0x24>
   102e4:	20c0004c 	andi	r3,r4,1
   102e8:	2008d07a 	srli	r4,r4,1
   102ec:	18000126 	beq	r3,zero,102f4 <__mulsi3+0x18>
   102f0:	1145883a 	add	r2,r2,r5
   102f4:	294b883a 	add	r5,r5,r5
   102f8:	203ffa1e 	bne	r4,zero,102e4 <_gp+0xffff5e40>
   102fc:	f800283a 	ret
   10300:	f800283a 	ret

00010304 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10304:	00103901 	jmpi	10390 <alt_iic_isr_register>

00010308 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10308:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1030c:	00bfff84 	movi	r2,-2
   10310:	2084703a 	and	r2,r4,r2
   10314:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   10318:	00c00044 	movi	r3,1
   1031c:	d0a47d17 	ldw	r2,-28172(gp)
   10320:	194a983a 	sll	r5,r3,r5
   10324:	288ab03a 	or	r5,r5,r2
   10328:	d1647d15 	stw	r5,-28172(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1032c:	d0a47d17 	ldw	r2,-28172(gp)
   10330:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10334:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   10338:	0005883a 	mov	r2,zero
   1033c:	f800283a 	ret

00010340 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10340:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10344:	00bfff84 	movi	r2,-2
   10348:	2084703a 	and	r2,r4,r2
   1034c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   10350:	00ffff84 	movi	r3,-2
   10354:	d0a47d17 	ldw	r2,-28172(gp)
   10358:	194a183a 	rol	r5,r3,r5
   1035c:	288a703a 	and	r5,r5,r2
   10360:	d1647d15 	stw	r5,-28172(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10364:	d0a47d17 	ldw	r2,-28172(gp)
   10368:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1036c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   10370:	0005883a 	mov	r2,zero
   10374:	f800283a 	ret

00010378 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10378:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1037c:	00800044 	movi	r2,1
   10380:	1144983a 	sll	r2,r2,r5
   10384:	10c4703a 	and	r2,r2,r3
}
   10388:	1004c03a 	cmpne	r2,r2,zero
   1038c:	f800283a 	ret

00010390 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10390:	00c007c4 	movi	r3,31
   10394:	19401616 	blt	r3,r5,103f0 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10398:	defffe04 	addi	sp,sp,-8
   1039c:	dfc00115 	stw	ra,4(sp)
   103a0:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   103a4:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   103a8:	00ffff84 	movi	r3,-2
   103ac:	80c6703a 	and	r3,r16,r3
   103b0:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   103b4:	280490fa 	slli	r2,r5,3
   103b8:	00c00074 	movhi	r3,1
   103bc:	18cdae04 	addi	r3,r3,14008
   103c0:	1885883a 	add	r2,r3,r2
   103c4:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   103c8:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   103cc:	30000226 	beq	r6,zero,103d8 <alt_iic_isr_register+0x48>
   103d0:	00103080 	call	10308 <alt_ic_irq_enable>
   103d4:	00000106 	br	103dc <alt_iic_isr_register+0x4c>
   103d8:	00103400 	call	10340 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   103dc:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   103e0:	dfc00117 	ldw	ra,4(sp)
   103e4:	dc000017 	ldw	r16,0(sp)
   103e8:	dec00204 	addi	sp,sp,8
   103ec:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
   103f0:	00bffa84 	movi	r2,-22
   103f4:	f800283a 	ret

000103f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   103f8:	deffff04 	addi	sp,sp,-4
   103fc:	01000074 	movhi	r4,1
   10400:	01400074 	movhi	r5,1
   10404:	dfc00015 	stw	ra,0(sp)
   10408:	2104c304 	addi	r4,r4,4876
   1040c:	29493404 	addi	r5,r5,9424

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10410:	2140061e 	bne	r4,r5,1042c <alt_load+0x34>
   10414:	01000074 	movhi	r4,1
   10418:	01400074 	movhi	r5,1
   1041c:	21000804 	addi	r4,r4,32
   10420:	29400804 	addi	r5,r5,32
   10424:	2140121e 	bne	r4,r5,10470 <alt_load+0x78>
   10428:	00000b06 	br	10458 <alt_load+0x60>
   1042c:	00c00074 	movhi	r3,1
   10430:	18c93404 	addi	r3,r3,9424
   10434:	1907c83a 	sub	r3,r3,r4
   10438:	0005883a 	mov	r2,zero
  {
    while( to != end )
   1043c:	10fff526 	beq	r2,r3,10414 <_gp+0xffff5f70>
    {
      *to++ = *from++;
   10440:	114f883a 	add	r7,r2,r5
   10444:	39c00017 	ldw	r7,0(r7)
   10448:	110d883a 	add	r6,r2,r4
   1044c:	10800104 	addi	r2,r2,4
   10450:	31c00015 	stw	r7,0(r6)
   10454:	003ff906 	br	1043c <_gp+0xffff5f98>
   10458:	01000074 	movhi	r4,1
   1045c:	01400074 	movhi	r5,1
   10460:	2104b104 	addi	r4,r4,4804
   10464:	2944b104 	addi	r5,r5,4804

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10468:	2140101e 	bne	r4,r5,104ac <alt_load+0xb4>
   1046c:	00000b06 	br	1049c <alt_load+0xa4>
   10470:	00c00074 	movhi	r3,1
   10474:	18c06004 	addi	r3,r3,384
   10478:	1907c83a 	sub	r3,r3,r4
   1047c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10480:	10fff526 	beq	r2,r3,10458 <_gp+0xffff5fb4>
    {
      *to++ = *from++;
   10484:	114f883a 	add	r7,r2,r5
   10488:	39c00017 	ldw	r7,0(r7)
   1048c:	110d883a 	add	r6,r2,r4
   10490:	10800104 	addi	r2,r2,4
   10494:	31c00015 	stw	r7,0(r6)
   10498:	003ff906 	br	10480 <_gp+0xffff5fdc>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1049c:	0010c980 	call	10c98 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   104a0:	dfc00017 	ldw	ra,0(sp)
   104a4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   104a8:	0010d101 	jmpi	10d10 <alt_icache_flush_all>
   104ac:	00c00074 	movhi	r3,1
   104b0:	18c4c304 	addi	r3,r3,4876
   104b4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   104b8:	0005883a 	mov	r2,zero
  {
    while( to != end )
   104bc:	18bff726 	beq	r3,r2,1049c <_gp+0xffff5ff8>
    {
      *to++ = *from++;
   104c0:	114f883a 	add	r7,r2,r5
   104c4:	39c00017 	ldw	r7,0(r7)
   104c8:	110d883a 	add	r6,r2,r4
   104cc:	10800104 	addi	r2,r2,4
   104d0:	31c00015 	stw	r7,0(r6)
   104d4:	003ff906 	br	104bc <_gp+0xffff6018>

000104d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   104d8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   104dc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   104e0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   104e4:	00105140 	call	10514 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   104e8:	00105340 	call	10534 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   104ec:	d1a47e17 	ldw	r6,-28168(gp)
   104f0:	d1647f17 	ldw	r5,-28164(gp)
   104f4:	d1248017 	ldw	r4,-28160(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   104f8:	dfc00017 	ldw	ra,0(sp)
   104fc:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10500:	00102a81 	jmpi	102a8 <main>

00010504 <alt_putstr>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
   10504:	d0a00a17 	ldw	r2,-32728(gp)
   10508:	11400217 	ldw	r5,8(r2)
   1050c:	0010e7c1 	jmpi	10e7c <fputs>

00010510 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   10510:	0010c101 	jmpi	10c10 <alt_busy_sleep>

00010514 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10514:	deffff04 	addi	sp,sp,-4
   10518:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS, NIOS);
   1051c:	0010e740 	call	10e74 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10520:	00800044 	movi	r2,1
   10524:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10528:	dfc00017 	ldw	ra,0(sp)
   1052c:	dec00104 	addi	sp,sp,4
   10530:	f800283a 	ret

00010534 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10534:	defffe04 	addi	sp,sp,-8
   10538:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER, TIMER);
    ALTERA_AVALON_JTAG_UART_INIT ( DEBUG, DEBUG);
   1053c:	04000074 	movhi	r16,1
   10540:	8404cd04 	addi	r16,r16,4916
   10544:	8009883a 	mov	r4,r16
   10548:	01800084 	movi	r6,2
   1054c:	000b883a 	mov	r5,zero
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10550:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER, TIMER);
    ALTERA_AVALON_JTAG_UART_INIT ( DEBUG, DEBUG);
   10554:	00106dc0 	call	106dc <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10558:	d1600204 	addi	r5,gp,-32760
   1055c:	813ff604 	addi	r4,r16,-40
    ALTERA_AVALON_SPI_INIT ( SPI, SPI);
}
   10560:	dfc00117 	ldw	ra,4(sp)
   10564:	dc000017 	ldw	r16,0(sp)
   10568:	dec00204 	addi	sp,sp,8
   1056c:	0010ca41 	jmpi	10ca4 <alt_dev_llist_insert>

00010570 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   10570:	20800017 	ldw	r2,0(r4)
   10574:	21c00217 	ldw	r7,8(r4)
   10578:	11000a04 	addi	r4,r2,40
   1057c:	00107f81 	jmpi	107f8 <altera_avalon_jtag_uart_read>

00010580 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   10580:	20800017 	ldw	r2,0(r4)
   10584:	21c00217 	ldw	r7,8(r4)
   10588:	11000a04 	addi	r4,r2,40
   1058c:	00109381 	jmpi	10938 <altera_avalon_jtag_uart_write>

00010590 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   10590:	20800017 	ldw	r2,0(r4)
   10594:	21400217 	ldw	r5,8(r4)
   10598:	11000a04 	addi	r4,r2,40
   1059c:	00107541 	jmpi	10754 <altera_avalon_jtag_uart_close>

000105a0 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   105a0:	21000017 	ldw	r4,0(r4)
   105a4:	21000a04 	addi	r4,r4,40
   105a8:	00107841 	jmpi	10784 <altera_avalon_jtag_uart_ioctl>

000105ac <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   105ac:	20800017 	ldw	r2,0(r4)
   105b0:	10800104 	addi	r2,r2,4
   105b4:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   105b8:	18c1000c 	andi	r3,r3,1024
   105bc:	18000526 	beq	r3,zero,105d4 <altera_avalon_jtag_uart_timeout+0x28>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   105c0:	20c00817 	ldw	r3,32(r4)
   105c4:	18c10014 	ori	r3,r3,1024
   105c8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   105cc:	20000915 	stw	zero,36(r4)
   105d0:	00000606 	br	105ec <altera_avalon_jtag_uart_timeout+0x40>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   105d4:	20800917 	ldw	r2,36(r4)
   105d8:	00e00034 	movhi	r3,32768
   105dc:	18ffff04 	addi	r3,r3,-4
   105e0:	18800236 	bltu	r3,r2,105ec <altera_avalon_jtag_uart_timeout+0x40>
    sp->host_inactive++;
   105e4:	10800044 	addi	r2,r2,1
   105e8:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   105ec:	d0a48317 	ldw	r2,-28148(gp)
   105f0:	f800283a 	ret

000105f4 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
   105f4:	21c00017 	ldw	r7,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   105f8:	027fff84 	movi	r9,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   105fc:	023fff44 	movi	r8,-3
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10600:	39800104 	addi	r6,r7,4
   10604:	30800037 	ldwio	r2,0(r6)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10608:	10c0c00c 	andi	r3,r2,768
   1060c:	18003226 	beq	r3,zero,106d8 <altera_avalon_jtag_uart_irq+0xe4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10610:	10c0400c 	andi	r3,r2,256
   10614:	18001826 	beq	r3,zero,10678 <altera_avalon_jtag_uart_irq+0x84>
   10618:	00c00074 	movhi	r3,1
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1061c:	21400a17 	ldw	r5,40(r4)
        if (next == sp->rx_out)
   10620:	22800b17 	ldw	r10,44(r4)
   10624:	29400044 	addi	r5,r5,1
   10628:	2941ffcc 	andi	r5,r5,2047
   1062c:	2a800b26 	beq	r5,r10,1065c <altera_avalon_jtag_uart_irq+0x68>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   10630:	38c00037 	ldwio	r3,0(r7)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10634:	1960000c 	andi	r5,r3,32768
   10638:	28000826 	beq	r5,zero,1065c <altera_avalon_jtag_uart_irq+0x68>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1063c:	21400a17 	ldw	r5,40(r4)
   10640:	214b883a 	add	r5,r4,r5
   10644:	28c00e05 	stb	r3,56(r5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10648:	21400a17 	ldw	r5,40(r4)
   1064c:	29400044 	addi	r5,r5,1
   10650:	2941ffcc 	andi	r5,r5,2047
   10654:	21400a15 	stw	r5,40(r4)
   10658:	003ff006 	br	1061c <_gp+0xffff6178>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1065c:	18ffffec 	andhi	r3,r3,65535
   10660:	18000526 	beq	r3,zero,10678 <altera_avalon_jtag_uart_irq+0x84>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10664:	20c00817 	ldw	r3,32(r4)
   10668:	1a46703a 	and	r3,r3,r9
   1066c:	20c00815 	stw	r3,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10670:	30c00035 	stwio	r3,0(r6)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10674:	30c00037 	ldwio	r3,0(r6)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10678:	10c0800c 	andi	r3,r2,512
   1067c:	183fe126 	beq	r3,zero,10604 <_gp+0xffff6160>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10680:	1004d43a 	srli	r2,r2,16

      while (space > 0 && sp->tx_out != sp->tx_in)
   10684:	103fdf26 	beq	r2,zero,10604 <_gp+0xffff6160>
   10688:	21400d17 	ldw	r5,52(r4)
   1068c:	20c00c17 	ldw	r3,48(r4)
   10690:	28c00a26 	beq	r5,r3,106bc <altera_avalon_jtag_uart_irq+0xc8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10694:	20c00d17 	ldw	r3,52(r4)
   10698:	20c7883a 	add	r3,r4,r3
   1069c:	18c20e07 	ldb	r3,2104(r3)
   106a0:	38c00035 	stwio	r3,0(r7)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   106a4:	20c00d17 	ldw	r3,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   106a8:	10bfffc4 	addi	r2,r2,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   106ac:	18c00044 	addi	r3,r3,1
   106b0:	18c1ffcc 	andi	r3,r3,2047
   106b4:	20c00d15 	stw	r3,52(r4)
   106b8:	003ff206 	br	10684 <_gp+0xffff61e0>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   106bc:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   106c0:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   106c4:	1204703a 	and	r2,r2,r8
   106c8:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   106cc:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   106d0:	30800037 	ldwio	r2,0(r6)
   106d4:	003fcb06 	br	10604 <_gp+0xffff6160>
   106d8:	f800283a 	ret

000106dc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   106dc:	defffd04 	addi	sp,sp,-12
   106e0:	dc000115 	stw	r16,4(sp)
   106e4:	2021883a 	mov	r16,r4
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   106e8:	80c00017 	ldw	r3,0(r16)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   106ec:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   106f0:	dfc00215 	stw	ra,8(sp)
   106f4:	2809883a 	mov	r4,r5
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   106f8:	80800815 	stw	r2,32(r16)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   106fc:	300b883a 	mov	r5,r6
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   10700:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   10704:	01800074 	movhi	r6,1
   10708:	800f883a 	mov	r7,r16
   1070c:	31817d04 	addi	r6,r6,1524
   10710:	d8000015 	stw	zero,0(sp)
   10714:	00103040 	call	10304 <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   10718:	d1648317 	ldw	r5,-28148(gp)
   1071c:	01800074 	movhi	r6,1
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   10720:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   10724:	800f883a 	mov	r7,r16
   10728:	31816b04 	addi	r6,r6,1452
   1072c:	81000204 	addi	r4,r16,8
   10730:	0010b900 	call	10b90 <alt_alarm_start>
   10734:	1000030e 	bge	r2,zero,10744 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   10738:	00a00034 	movhi	r2,32768
   1073c:	10bfffc4 	addi	r2,r2,-1
   10740:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   10744:	dfc00217 	ldw	ra,8(sp)
   10748:	dc000117 	ldw	r16,4(sp)
   1074c:	dec00304 	addi	sp,sp,12
   10750:	f800283a 	ret

00010754 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10754:	21800c17 	ldw	r6,48(r4)
    if (flags & O_NONBLOCK) {
   10758:	2950000c 	andi	r5,r5,16384
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1075c:	20800d17 	ldw	r2,52(r4)
   10760:	11800626 	beq	r2,r6,1077c <altera_avalon_jtag_uart_close+0x28>
   10764:	20c00917 	ldw	r3,36(r4)
   10768:	20800117 	ldw	r2,4(r4)
   1076c:	1880032e 	bgeu	r3,r2,1077c <altera_avalon_jtag_uart_close+0x28>
    if (flags & O_NONBLOCK) {
   10770:	283ffa26 	beq	r5,zero,1075c <_gp+0xffff62b8>
      return -EWOULDBLOCK; 
   10774:	00bffd44 	movi	r2,-11
   10778:	f800283a 	ret
    }
  }

  return 0;
   1077c:	0005883a 	mov	r2,zero
}
   10780:	f800283a 	ret

00010784 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
   10784:	009a8044 	movi	r2,27137
   10788:	28800326 	beq	r5,r2,10798 <altera_avalon_jtag_uart_ioctl+0x14>
   1078c:	009a8084 	movi	r2,27138
   10790:	28800e26 	beq	r5,r2,107cc <altera_avalon_jtag_uart_ioctl+0x48>
   10794:	00001606 	br	107f0 <altera_avalon_jtag_uart_ioctl+0x6c>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   10798:	20c00117 	ldw	r3,4(r4)
   1079c:	00a00034 	movhi	r2,32768
   107a0:	10bfffc4 	addi	r2,r2,-1
   107a4:	18801226 	beq	r3,r2,107f0 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   107a8:	30800017 	ldw	r2,0(r6)
   107ac:	01600034 	movhi	r5,32768
   107b0:	297fff04 	addi	r5,r5,-4
   107b4:	10ffff84 	addi	r3,r2,-2
   107b8:	28c0022e 	bgeu	r5,r3,107c4 <altera_avalon_jtag_uart_ioctl+0x40>
   107bc:	00a00034 	movhi	r2,32768
   107c0:	10bfff84 	addi	r2,r2,-2
   107c4:	20800115 	stw	r2,4(r4)
   107c8:	00000706 	br	107e8 <altera_avalon_jtag_uart_ioctl+0x64>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   107cc:	20c00117 	ldw	r3,4(r4)
   107d0:	00a00034 	movhi	r2,32768
   107d4:	10bfffc4 	addi	r2,r2,-1
   107d8:	18800526 	beq	r3,r2,107f0 <altera_avalon_jtag_uart_ioctl+0x6c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   107dc:	20800917 	ldw	r2,36(r4)
   107e0:	10c5803a 	cmpltu	r2,r2,r3
   107e4:	30800015 	stw	r2,0(r6)
      rc = 0;
   107e8:	0005883a 	mov	r2,zero
   107ec:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
   107f0:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
   107f4:	f800283a 	ret

000107f8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   107f8:	defff504 	addi	sp,sp,-44
   107fc:	df000915 	stw	fp,36(sp)
   10800:	ddc00815 	stw	r23,32(sp)
   10804:	dd800715 	stw	r22,28(sp)
   10808:	dd000515 	stw	r20,20(sp)
   1080c:	dc800315 	stw	r18,12(sp)
   10810:	dc400215 	stw	r17,8(sp)
   10814:	3829883a 	mov	r20,r7
   10818:	dfc00a15 	stw	ra,40(sp)
   1081c:	dd400615 	stw	r21,24(sp)
   10820:	dcc00415 	stw	r19,16(sp)
   10824:	dc000115 	stw	r16,4(sp)
   10828:	2023883a 	mov	r17,r4
   1082c:	282d883a 	mov	r22,r5
   10830:	3025883a 	mov	r18,r6
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   10834:	05c20004 	movi	r23,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   10838:	27000e04 	addi	fp,r4,56
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1083c:	39d0000c 	andi	r7,r7,16384
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10840:	04802c0e 	bge	zero,r18,108f4 <altera_avalon_jtag_uart_read+0xfc>
   10844:	b007883a 	mov	r3,r22
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10848:	8d400a17 	ldw	r21,40(r17)
      out = sp->rx_out;
   1084c:	8cc00b17 	ldw	r19,44(r17)

      if (in >= out)
   10850:	acc00236 	bltu	r21,r19,1085c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10854:	ace1c83a 	sub	r16,r21,r19
   10858:	00000106 	br	10860 <altera_avalon_jtag_uart_read+0x68>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1085c:	bce1c83a 	sub	r16,r23,r19

      if (n == 0)
   10860:	80000e26 	beq	r16,zero,1089c <altera_avalon_jtag_uart_read+0xa4>
   10864:	9400012e 	bgeu	r18,r16,1086c <altera_avalon_jtag_uart_read+0x74>
   10868:	9021883a 	mov	r16,r18
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   1086c:	800d883a 	mov	r6,r16
   10870:	1809883a 	mov	r4,r3
   10874:	e4cb883a 	add	r5,fp,r19
   10878:	d9c00015 	stw	r7,0(sp)
   1087c:	0010f8c0 	call	10f8c <memcpy>
      ptr   += n;
   10880:	1407883a 	add	r3,r2,r16
      space -= n;
   10884:	9425c83a 	sub	r18,r18,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10888:	9c21883a 	add	r16,r19,r16
   1088c:	8401ffcc 	andi	r16,r16,2047
   10890:	8c000b15 	stw	r16,44(r17)
    }
    while (space > 0);
   10894:	d9c00017 	ldw	r7,0(sp)
   10898:	04bfeb16 	blt	zero,r18,10848 <_gp+0xffff63a4>

    /* If we read any data then return it */
    if (ptr != buffer)
   1089c:	1d80091e 	bne	r3,r22,108c4 <altera_avalon_jtag_uart_read+0xcc>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   108a0:	3800141e 	bne	r7,zero,108f4 <altera_avalon_jtag_uart_read+0xfc>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   108a4:	88800a17 	ldw	r2,40(r17)
   108a8:	a880031e 	bne	r21,r2,108b8 <altera_avalon_jtag_uart_read+0xc0>
   108ac:	88c00917 	ldw	r3,36(r17)
   108b0:	88800117 	ldw	r2,4(r17)
   108b4:	18bffb36 	bltu	r3,r2,108a4 <_gp+0xffff6400>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   108b8:	88800a17 	ldw	r2,40(r17)
   108bc:	a8bfe01e 	bne	r21,r2,10840 <_gp+0xffff639c>
   108c0:	00000c06 	br	108f4 <altera_avalon_jtag_uart_read+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   108c4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   108c8:	00bfff84 	movi	r2,-2
   108cc:	2084703a 	and	r2,r4,r2
   108d0:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   108d4:	88800817 	ldw	r2,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   108d8:	89400017 	ldw	r5,0(r17)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   108dc:	10800054 	ori	r2,r2,1
   108e0:	88800815 	stw	r2,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   108e4:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   108e8:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
   108ec:	1d85c83a 	sub	r2,r3,r22
   108f0:	00000506 	br	10908 <altera_avalon_jtag_uart_read+0x110>
  else if (flags & O_NONBLOCK)
   108f4:	a510000c 	andi	r20,r20,16384
   108f8:	a0000226 	beq	r20,zero,10904 <altera_avalon_jtag_uart_read+0x10c>
    return -EWOULDBLOCK;
   108fc:	00bffd44 	movi	r2,-11
   10900:	00000106 	br	10908 <altera_avalon_jtag_uart_read+0x110>
  else
    return -EIO;
   10904:	00bffec4 	movi	r2,-5
}
   10908:	dfc00a17 	ldw	ra,40(sp)
   1090c:	df000917 	ldw	fp,36(sp)
   10910:	ddc00817 	ldw	r23,32(sp)
   10914:	dd800717 	ldw	r22,28(sp)
   10918:	dd400617 	ldw	r21,24(sp)
   1091c:	dd000517 	ldw	r20,20(sp)
   10920:	dcc00417 	ldw	r19,16(sp)
   10924:	dc800317 	ldw	r18,12(sp)
   10928:	dc400217 	ldw	r17,8(sp)
   1092c:	dc000117 	ldw	r16,4(sp)
   10930:	dec00b04 	addi	sp,sp,44
   10934:	f800283a 	ret

00010938 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10938:	defff304 	addi	sp,sp,-52
   1093c:	df000b15 	stw	fp,44(sp)
   10940:	ddc00a15 	stw	r23,40(sp)
   10944:	dd800915 	stw	r22,36(sp)
   10948:	dd400815 	stw	r21,32(sp)
   1094c:	dcc00615 	stw	r19,24(sp)
   10950:	dc800515 	stw	r18,20(sp)
   10954:	dc400415 	stw	r17,16(sp)
   10958:	382f883a 	mov	r23,r7
   1095c:	dfc00c15 	stw	ra,48(sp)
   10960:	dd000715 	stw	r20,28(sp)
   10964:	dc000315 	stw	r16,12(sp)
   10968:	2025883a 	mov	r18,r4
   1096c:	282b883a 	mov	r21,r5
   10970:	3027883a 	mov	r19,r6
   10974:	2823883a 	mov	r17,r5
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10978:	002d883a 	mov	r22,zero
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1097c:	073fff84 	movi	fp,-2
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   10980:	39d0000c 	andi	r7,r7,16384
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   10984:	22020e04 	addi	r8,r4,2104
      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10988:	0241ffc4 	movi	r9,2047
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1098c:	04c01d0e 	bge	zero,r19,10a04 <altera_avalon_jtag_uart_write+0xcc>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10990:	95000c17 	ldw	r20,48(r18)
      out = sp->tx_out;
   10994:	95800d17 	ldw	r22,52(r18)

      if (in < out)
   10998:	a580022e 	bgeu	r20,r22,109a4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1099c:	b0ffffc4 	addi	r3,r22,-1
   109a0:	00000206 	br	109ac <altera_avalon_jtag_uart_write+0x74>
      else if (out > 0)
   109a4:	b0000326 	beq	r22,zero,109b4 <altera_avalon_jtag_uart_write+0x7c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   109a8:	00c20004 	movi	r3,2048
   109ac:	1d21c83a 	sub	r16,r3,r20
   109b0:	00000106 	br	109b8 <altera_avalon_jtag_uart_write+0x80>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   109b4:	4d21c83a 	sub	r16,r9,r20

      if (n == 0)
   109b8:	80001226 	beq	r16,zero,10a04 <altera_avalon_jtag_uart_write+0xcc>
   109bc:	9c00012e 	bgeu	r19,r16,109c4 <altera_avalon_jtag_uart_write+0x8c>
   109c0:	9821883a 	mov	r16,r19
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   109c4:	800d883a 	mov	r6,r16
   109c8:	880b883a 	mov	r5,r17
   109cc:	4509883a 	add	r4,r8,r20
      ptr   += n;
   109d0:	8c23883a 	add	r17,r17,r16
      count -= n;
   109d4:	9c27c83a 	sub	r19,r19,r16

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   109d8:	a421883a 	add	r16,r20,r16
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   109dc:	d9c00015 	stw	r7,0(sp)
   109e0:	da000115 	stw	r8,4(sp)
   109e4:	da400215 	stw	r9,8(sp)
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   109e8:	8401ffcc 	andi	r16,r16,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   109ec:	0010f8c0 	call	10f8c <memcpy>
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   109f0:	da400217 	ldw	r9,8(sp)
   109f4:	94000c15 	stw	r16,48(r18)
   109f8:	da000117 	ldw	r8,4(sp)
   109fc:	d9c00017 	ldw	r7,0(sp)
   10a00:	003fe206 	br	1098c <_gp+0xffff64e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a04:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a08:	1f04703a 	and	r2,r3,fp
   10a0c:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10a10:	90800817 	ldw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10a14:	91000017 	ldw	r4,0(r18)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   10a18:	10800094 	ori	r2,r2,2
   10a1c:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10a20:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10a24:	1801703a 	wrctl	status,r3
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10a28:	04c0080e 	bge	zero,r19,10a4c <altera_avalon_jtag_uart_write+0x114>
    {
      if (flags & O_NONBLOCK)
   10a2c:	3800101e 	bne	r7,zero,10a70 <altera_avalon_jtag_uart_write+0x138>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   10a30:	90c00d17 	ldw	r3,52(r18)
   10a34:	90800917 	ldw	r2,36(r18)
   10a38:	b0c0021e 	bne	r22,r3,10a44 <altera_avalon_jtag_uart_write+0x10c>
   10a3c:	90c00117 	ldw	r3,4(r18)
   10a40:	10fffb36 	bltu	r2,r3,10a30 <_gp+0xffff658c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10a44:	103fd126 	beq	r2,zero,1098c <_gp+0xffff64e8>
   10a48:	00000606 	br	10a64 <altera_avalon_jtag_uart_write+0x12c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10a4c:	8d400226 	beq	r17,r21,10a58 <altera_avalon_jtag_uart_write+0x120>
    return ptr - start;
   10a50:	8d45c83a 	sub	r2,r17,r21
   10a54:	00000806 	br	10a78 <altera_avalon_jtag_uart_write+0x140>
  else if (flags & O_NONBLOCK)
   10a58:	bdd0000c 	andi	r23,r23,16384
   10a5c:	b8000226 	beq	r23,zero,10a68 <altera_avalon_jtag_uart_write+0x130>
   10a60:	00000406 	br	10a74 <altera_avalon_jtag_uart_write+0x13c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10a64:	8d7ffa1e 	bne	r17,r21,10a50 <_gp+0xffff65ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   10a68:	00bffec4 	movi	r2,-5
   10a6c:	00000206 	br	10a78 <altera_avalon_jtag_uart_write+0x140>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10a70:	8d7ff71e 	bne	r17,r21,10a50 <_gp+0xffff65ac>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   10a74:	00bffd44 	movi	r2,-11
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
   10a78:	dfc00c17 	ldw	ra,48(sp)
   10a7c:	df000b17 	ldw	fp,44(sp)
   10a80:	ddc00a17 	ldw	r23,40(sp)
   10a84:	dd800917 	ldw	r22,36(sp)
   10a88:	dd400817 	ldw	r21,32(sp)
   10a8c:	dd000717 	ldw	r20,28(sp)
   10a90:	dcc00617 	ldw	r19,24(sp)
   10a94:	dc800517 	ldw	r18,20(sp)
   10a98:	dc400417 	ldw	r17,16(sp)
   10a9c:	dc000317 	ldw	r16,12(sp)
   10aa0:	dec00d04 	addi	sp,sp,52
   10aa4:	f800283a 	ret

00010aa8 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   10aa8:	d8800017 	ldw	r2,0(sp)
   10aac:	da000117 	ldw	r8,4(sp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   10ab0:	00c00044 	movi	r3,1

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   10ab4:	da400217 	ldw	r9,8(sp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   10ab8:	194a983a 	sll	r5,r3,r5
int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  const alt_u8 * write_end = write_data + write_length;
   10abc:	399d883a 	add	r14,r7,r6
  alt_u8 * read_end = read_data + read_length;
   10ac0:	409f883a 	add	r15,r8,r2
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   10ac4:	21400535 	stwio	r5,20(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   10ac8:	48c0008c 	andi	r3,r9,2
   10acc:	1800021e 	bne	r3,zero,10ad8 <alt_avalon_spi_command+0x30>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   10ad0:	00c10004 	movi	r3,1024
   10ad4:	20c00335 	stwio	r3,12(r4)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   10ad8:	20c00037 	ldwio	r3,0(r4)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   10adc:	00c00044 	movi	r3,1
                           alt_u32 flags)
{
  const alt_u8 * write_end = write_data + write_length;
  alt_u8 * read_end = read_data + read_length;

  alt_u32 write_zeros = read_length;
   10ae0:	1015883a 	mov	r10,r2
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   10ae4:	22c00204 	addi	r11,r4,8
      if (write_data < write_end)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
      else if (write_zeros > 0)
      {
        write_zeros--;
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   10ae8:	23000104 	addi	r12,r4,4
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   10aec:	59400037 	ldwio	r5,0(r11)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   10af0:	2b40100c 	andi	r13,r5,64
   10af4:	2940200c 	andi	r5,r5,128
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   10af8:	68000126 	beq	r13,zero,10b00 <alt_avalon_spi_command+0x58>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   10afc:	1800031e 	bne	r3,zero,10b0c <alt_avalon_spi_command+0x64>
   10b00:	283ffa26 	beq	r5,zero,10aec <_gp+0xffff6648>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   10b04:	68000e26 	beq	r13,zero,10b40 <alt_avalon_spi_command+0x98>
   10b08:	00001e06 	br	10b84 <alt_avalon_spi_command+0xdc>
   10b0c:	00c00c0e 	bge	zero,r3,10b40 <alt_avalon_spi_command+0x98>
    {
      credits--;
   10b10:	18ffffc4 	addi	r3,r3,-1

      if (write_data < write_end)
   10b14:	3b80052e 	bgeu	r7,r14,10b2c <alt_avalon_spi_command+0x84>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   10b18:	3b400044 	addi	r13,r7,1
   10b1c:	39c00003 	ldbu	r7,0(r7)
   10b20:	61c00035 	stwio	r7,0(r12)
   10b24:	680f883a 	mov	r7,r13
   10b28:	00000506 	br	10b40 <alt_avalon_spi_command+0x98>
      else if (write_zeros > 0)
   10b2c:	50000326 	beq	r10,zero,10b3c <alt_avalon_spi_command+0x94>
      {
        write_zeros--;
   10b30:	52bfffc4 	addi	r10,r10,-1
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   10b34:	60000035 	stwio	zero,0(r12)
   10b38:	00000106 	br	10b40 <alt_avalon_spi_command+0x98>
      }
      else
        credits = -1024;
   10b3c:	00ff0004 	movi	r3,-1024
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   10b40:	283fea26 	beq	r5,zero,10aec <_gp+0xffff6648>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   10b44:	21400037 	ldwio	r5,0(r4)

      if (read_ignore > 0)
   10b48:	30000226 	beq	r6,zero,10b54 <alt_avalon_spi_command+0xac>
        read_ignore--;
   10b4c:	31bfffc4 	addi	r6,r6,-1
   10b50:	00000206 	br	10b5c <alt_avalon_spi_command+0xb4>
      else
        *read_data++ = (alt_u8)rxdata;
   10b54:	41400005 	stb	r5,0(r8)
   10b58:	42000044 	addi	r8,r8,1
      credits++;
   10b5c:	18c00044 	addi	r3,r3,1

      if (read_ignore == 0 && read_data == read_end)
   10b60:	303fe21e 	bne	r6,zero,10aec <_gp+0xffff6648>
   10b64:	43ffe11e 	bne	r8,r15,10aec <_gp+0xffff6648>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   10b68:	58c00037 	ldwio	r3,0(r11)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   10b6c:	18c0080c 	andi	r3,r3,32
   10b70:	183ffd26 	beq	r3,zero,10b68 <_gp+0xffff66c4>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   10b74:	4a40004c 	andi	r9,r9,1
   10b78:	4800041e 	bne	r9,zero,10b8c <alt_avalon_spi_command+0xe4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   10b7c:	20000335 	stwio	zero,12(r4)

  return read_length;
   10b80:	f800283a 	ret
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   10b84:	00ffef0e 	bge	zero,r3,10b44 <_gp+0xffff66a0>
   10b88:	003fe106 	br	10b10 <_gp+0xffff666c>
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);

  return read_length;
}
   10b8c:	f800283a 	ret

00010b90 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
   10b90:	d0a48317 	ldw	r2,-28148(gp)
   10b94:	10001a26 	beq	r2,zero,10c00 <alt_alarm_start+0x70>
  {
    if (alarm)
   10b98:	20001b26 	beq	r4,zero,10c08 <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
   10b9c:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
   10ba0:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ba4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ba8:	00bfff84 	movi	r2,-2
   10bac:	1884703a 	and	r2,r3,r2
   10bb0:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10bb4:	d0a48217 	ldw	r2,-28152(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
   10bb8:	11800044 	addi	r6,r2,1
   10bbc:	314b883a 	add	r5,r6,r5
   10bc0:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10bc4:	2880032e 	bgeu	r5,r2,10bd4 <alt_alarm_start+0x44>
      {
        alarm->rollover = 1;
   10bc8:	00800044 	movi	r2,1
   10bcc:	20800405 	stb	r2,16(r4)
   10bd0:	00000106 	br	10bd8 <alt_alarm_start+0x48>
      }
      else
      {
        alarm->rollover = 0;
   10bd4:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10bd8:	d0a00704 	addi	r2,gp,-32740
   10bdc:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
   10be0:	d0a00717 	ldw	r2,-32740(gp)
   10be4:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   10be8:	d0a00717 	ldw	r2,-32740(gp)
  list->next           = entry;
   10bec:	d1200715 	stw	r4,-32740(gp)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
   10bf0:	11000115 	stw	r4,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10bf4:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
   10bf8:	0005883a 	mov	r2,zero
   10bfc:	f800283a 	ret
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
   10c00:	00bfde84 	movi	r2,-134
   10c04:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
   10c08:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
   10c0c:	f800283a 	ret

00010c10 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10c10:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10c14:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10c18:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10c1c:	dc000015 	stw	r16,0(sp)
   10c20:	dfc00115 	stw	ra,4(sp)
   10c24:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10c28:	00111200 	call	11120 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10c2c:	10001026 	beq	r2,zero,10c70 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10c30:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10c34:	013999b4 	movhi	r4,58982
   10c38:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10c3c:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10c40:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10c44:	297fffc4 	addi	r5,r5,-1
   10c48:	283ffe1e 	bne	r5,zero,10c44 <_gp+0xffff67a0>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10c4c:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10c50:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10c54:	18bffb16 	blt	r3,r2,10c44 <_gp+0xffff67a0>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10c58:	01400144 	movi	r5,5
   10c5c:	8009883a 	mov	r4,r16
   10c60:	00102dc0 	call	102dc <__mulsi3>
   10c64:	10bfffc4 	addi	r2,r2,-1
   10c68:	103ffe1e 	bne	r2,zero,10c64 <_gp+0xffff67c0>
   10c6c:	00000506 	br	10c84 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10c70:	01400144 	movi	r5,5
   10c74:	8009883a 	mov	r4,r16
   10c78:	00102dc0 	call	102dc <__mulsi3>
   10c7c:	10bfffc4 	addi	r2,r2,-1
   10c80:	00bffe16 	blt	zero,r2,10c7c <_gp+0xffff67d8>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   10c84:	0005883a 	mov	r2,zero
   10c88:	dfc00117 	ldw	ra,4(sp)
   10c8c:	dc000017 	ldw	r16,0(sp)
   10c90:	dec00204 	addi	sp,sp,8
   10c94:	f800283a 	ret

00010c98 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10c98:	f800283a 	ret

00010c9c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   10c9c:	3005883a 	mov	r2,r6
   10ca0:	f800283a 	ret

00010ca4 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10ca4:	20000226 	beq	r4,zero,10cb0 <alt_dev_llist_insert+0xc>
   10ca8:	20800217 	ldw	r2,8(r4)
   10cac:	1000101e 	bne	r2,zero,10cf0 <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   10cb0:	d0a00617 	ldw	r2,-32744(gp)
   10cb4:	10000926 	beq	r2,zero,10cdc <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10cb8:	deffff04 	addi	sp,sp,-4
   10cbc:	dfc00015 	stw	ra,0(sp)
   10cc0:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   10cc4:	00c00584 	movi	r3,22
   10cc8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   10ccc:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   10cd0:	dfc00017 	ldw	ra,0(sp)
   10cd4:	dec00104 	addi	sp,sp,4
   10cd8:	f800283a 	ret
   10cdc:	d0a48404 	addi	r2,gp,-28144
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   10ce0:	00c00584 	movi	r3,22
   10ce4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   10ce8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   10cec:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   10cf0:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10cf4:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   10cf8:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   10cfc:	28800017 	ldw	r2,0(r5)
   10d00:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   10d04:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   10d08:	0005883a 	mov	r2,zero
   10d0c:	f800283a 	ret

00010d10 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10d10:	f800283a 	ret

00010d14 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   10d14:	213ffe84 	addi	r4,r4,-6
   10d18:	008003c4 	movi	r2,15
   10d1c:	11001636 	bltu	r2,r4,10d78 <alt_exception_cause_generated_bad_addr+0x64>
   10d20:	200890ba 	slli	r4,r4,2
   10d24:	00800074 	movhi	r2,1
   10d28:	10834e04 	addi	r2,r2,3384
   10d2c:	2089883a 	add	r4,r4,r2
   10d30:	20800017 	ldw	r2,0(r4)
   10d34:	1000683a 	jmp	r2
   10d38:	00010d80 	call	10d8 <__alt_mem_RAM-0xef28>
   10d3c:	00010d80 	call	10d8 <__alt_mem_RAM-0xef28>
   10d40:	00010d78 	rdprs	zero,zero,1077
   10d44:	00010d78 	rdprs	zero,zero,1077
   10d48:	00010d78 	rdprs	zero,zero,1077
   10d4c:	00010d80 	call	10d8 <__alt_mem_RAM-0xef28>
   10d50:	00010d78 	rdprs	zero,zero,1077
   10d54:	00010d78 	rdprs	zero,zero,1077
   10d58:	00010d80 	call	10d8 <__alt_mem_RAM-0xef28>
   10d5c:	00010d80 	call	10d8 <__alt_mem_RAM-0xef28>
   10d60:	00010d78 	rdprs	zero,zero,1077
   10d64:	00010d80 	call	10d8 <__alt_mem_RAM-0xef28>
   10d68:	00010d78 	rdprs	zero,zero,1077
   10d6c:	00010d78 	rdprs	zero,zero,1077
   10d70:	00010d78 	rdprs	zero,zero,1077
   10d74:	00010d80 	call	10d8 <__alt_mem_RAM-0xef28>
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10d78:	0005883a 	mov	r2,zero
   10d7c:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10d80:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   10d84:	f800283a 	ret

00010d88 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d88:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d8c:	00bfff84 	movi	r2,-2
   10d90:	1884703a 	and	r2,r3,r2
   10d94:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10d98:	21400117 	ldw	r5,4(r4)
   10d9c:	20800017 	ldw	r2,0(r4)
   10da0:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
   10da4:	21400117 	ldw	r5,4(r4)
   10da8:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10dac:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   10db0:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10db4:	1801703a 	wrctl	status,r3
   10db8:	f800283a 	ret

00010dbc <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10dbc:	d0a48217 	ldw	r2,-28152(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10dc0:	defffb04 	addi	sp,sp,-20
   10dc4:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   10dc8:	d4200717 	ldw	r16,-32740(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10dcc:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10dd0:	dc800215 	stw	r18,8(sp)
   10dd4:	dc400115 	stw	r17,4(sp)
   10dd8:	dfc00415 	stw	ra,16(sp)
   10ddc:	dcc00315 	stw	r19,12(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10de0:	d0a48215 	stw	r2,-28152(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10de4:	d4600704 	addi	r17,gp,-32740
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   10de8:	04800044 	movi	r18,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10dec:	84401a26 	beq	r16,r17,10e58 <alt_tick+0x9c>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10df0:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   10df4:	84c00017 	ldw	r19,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   10df8:	10000326 	beq	r2,zero,10e08 <alt_tick+0x4c>
   10dfc:	d0a48217 	ldw	r2,-28152(gp)
   10e00:	1000011e 	bne	r2,zero,10e08 <alt_tick+0x4c>
    {
      alarm->rollover = 0;
   10e04:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   10e08:	d0e48217 	ldw	r3,-28152(gp)
   10e0c:	80800217 	ldw	r2,8(r16)
   10e10:	18800f36 	bltu	r3,r2,10e50 <alt_tick+0x94>
   10e14:	80800403 	ldbu	r2,16(r16)
   10e18:	10000d1e 	bne	r2,zero,10e50 <alt_tick+0x94>
    {
      next_callback = alarm->callback (alarm->context);
   10e1c:	80800317 	ldw	r2,12(r16)
   10e20:	81000517 	ldw	r4,20(r16)
   10e24:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10e28:	1000031e 	bne	r2,zero,10e38 <alt_tick+0x7c>
      {
        alt_alarm_stop (alarm);
   10e2c:	8009883a 	mov	r4,r16
   10e30:	0010d880 	call	10d88 <alt_alarm_stop>
   10e34:	00000606 	br	10e50 <alt_tick+0x94>
      }
      else
      {
        alarm->time += next_callback;
   10e38:	80c00217 	ldw	r3,8(r16)
   10e3c:	10c5883a 	add	r2,r2,r3
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10e40:	d0e48217 	ldw	r3,-28152(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   10e44:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10e48:	10c0012e 	bgeu	r2,r3,10e50 <alt_tick+0x94>
        {
          alarm->rollover = 1;
   10e4c:	84800405 	stb	r18,16(r16)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   10e50:	9821883a 	mov	r16,r19
   10e54:	003fe506 	br	10dec <_gp+0xffff6948>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   10e58:	dfc00417 	ldw	ra,16(sp)
   10e5c:	dcc00317 	ldw	r19,12(sp)
   10e60:	dc800217 	ldw	r18,8(sp)
   10e64:	dc400117 	ldw	r17,4(sp)
   10e68:	dc000017 	ldw	r16,0(sp)
   10e6c:	dec00504 	addi	sp,sp,20
   10e70:	f800283a 	ret

00010e74 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10e74:	000170fa 	wrctl	ienable,zero
   10e78:	f800283a 	ret

00010e7c <fputs>:
   10e7c:	defffd04 	addi	sp,sp,-12
   10e80:	dfc00215 	stw	ra,8(sp)
   10e84:	dc000115 	stw	r16,4(sp)
   10e88:	d9400015 	stw	r5,0(sp)
   10e8c:	2021883a 	mov	r16,r4
   10e90:	0010fb40 	call	10fb4 <strlen>
   10e94:	100f883a 	mov	r7,r2
   10e98:	00800074 	movhi	r2,1
   10e9c:	d9400017 	ldw	r5,0(sp)
   10ea0:	10893304 	addi	r2,r2,9420
   10ea4:	11000017 	ldw	r4,0(r2)
   10ea8:	00c00074 	movhi	r3,1
   10eac:	18c3b504 	addi	r3,r3,3796
   10eb0:	28c00115 	stw	r3,4(r5)
   10eb4:	800d883a 	mov	r6,r16
   10eb8:	0010ed40 	call	10ed4 <__sfvwrite_small_dev>
   10ebc:	10bfffe0 	cmpeqi	r2,r2,-1
   10ec0:	0085c83a 	sub	r2,zero,r2
   10ec4:	dfc00217 	ldw	ra,8(sp)
   10ec8:	dc000117 	ldw	r16,4(sp)
   10ecc:	dec00304 	addi	sp,sp,12
   10ed0:	f800283a 	ret

00010ed4 <__sfvwrite_small_dev>:
   10ed4:	2880000b 	ldhu	r2,0(r5)
   10ed8:	1080020c 	andi	r2,r2,8
   10edc:	10002126 	beq	r2,zero,10f64 <__sfvwrite_small_dev+0x90>
   10ee0:	2880008f 	ldh	r2,2(r5)
   10ee4:	defffa04 	addi	sp,sp,-24
   10ee8:	dc000015 	stw	r16,0(sp)
   10eec:	dfc00515 	stw	ra,20(sp)
   10ef0:	dd000415 	stw	r20,16(sp)
   10ef4:	dcc00315 	stw	r19,12(sp)
   10ef8:	dc800215 	stw	r18,8(sp)
   10efc:	dc400115 	stw	r17,4(sp)
   10f00:	2821883a 	mov	r16,r5
   10f04:	10001216 	blt	r2,zero,10f50 <__sfvwrite_small_dev+0x7c>
   10f08:	2027883a 	mov	r19,r4
   10f0c:	3025883a 	mov	r18,r6
   10f10:	3823883a 	mov	r17,r7
   10f14:	05010004 	movi	r20,1024
   10f18:	04400b0e 	bge	zero,r17,10f48 <__sfvwrite_small_dev+0x74>
   10f1c:	880f883a 	mov	r7,r17
   10f20:	a440010e 	bge	r20,r17,10f28 <__sfvwrite_small_dev+0x54>
   10f24:	01c10004 	movi	r7,1024
   10f28:	8140008f 	ldh	r5,2(r16)
   10f2c:	900d883a 	mov	r6,r18
   10f30:	9809883a 	mov	r4,r19
   10f34:	0010fd00 	call	10fd0 <_write_r>
   10f38:	0080050e 	bge	zero,r2,10f50 <__sfvwrite_small_dev+0x7c>
   10f3c:	88a3c83a 	sub	r17,r17,r2
   10f40:	90a5883a 	add	r18,r18,r2
   10f44:	003ff406 	br	10f18 <_gp+0xffff6a74>
   10f48:	0005883a 	mov	r2,zero
   10f4c:	00000706 	br	10f6c <__sfvwrite_small_dev+0x98>
   10f50:	8080000b 	ldhu	r2,0(r16)
   10f54:	10801014 	ori	r2,r2,64
   10f58:	8080000d 	sth	r2,0(r16)
   10f5c:	00bfffc4 	movi	r2,-1
   10f60:	00000206 	br	10f6c <__sfvwrite_small_dev+0x98>
   10f64:	00bfffc4 	movi	r2,-1
   10f68:	f800283a 	ret
   10f6c:	dfc00517 	ldw	ra,20(sp)
   10f70:	dd000417 	ldw	r20,16(sp)
   10f74:	dcc00317 	ldw	r19,12(sp)
   10f78:	dc800217 	ldw	r18,8(sp)
   10f7c:	dc400117 	ldw	r17,4(sp)
   10f80:	dc000017 	ldw	r16,0(sp)
   10f84:	dec00604 	addi	sp,sp,24
   10f88:	f800283a 	ret

00010f8c <memcpy>:
   10f8c:	2005883a 	mov	r2,r4
   10f90:	2007883a 	mov	r3,r4
   10f94:	218d883a 	add	r6,r4,r6
   10f98:	19800526 	beq	r3,r6,10fb0 <memcpy+0x24>
   10f9c:	29000003 	ldbu	r4,0(r5)
   10fa0:	18c00044 	addi	r3,r3,1
   10fa4:	29400044 	addi	r5,r5,1
   10fa8:	193fffc5 	stb	r4,-1(r3)
   10fac:	003ffa06 	br	10f98 <_gp+0xffff6af4>
   10fb0:	f800283a 	ret

00010fb4 <strlen>:
   10fb4:	2005883a 	mov	r2,r4
   10fb8:	10c00007 	ldb	r3,0(r2)
   10fbc:	18000226 	beq	r3,zero,10fc8 <strlen+0x14>
   10fc0:	10800044 	addi	r2,r2,1
   10fc4:	003ffc06 	br	10fb8 <_gp+0xffff6b14>
   10fc8:	1105c83a 	sub	r2,r2,r4
   10fcc:	f800283a 	ret

00010fd0 <_write_r>:
   10fd0:	defffd04 	addi	sp,sp,-12
   10fd4:	dc000015 	stw	r16,0(sp)
   10fd8:	04000074 	movhi	r16,1
   10fdc:	dc400115 	stw	r17,4(sp)
   10fe0:	840dad04 	addi	r16,r16,14004
   10fe4:	2023883a 	mov	r17,r4
   10fe8:	2809883a 	mov	r4,r5
   10fec:	300b883a 	mov	r5,r6
   10ff0:	380d883a 	mov	r6,r7
   10ff4:	dfc00215 	stw	ra,8(sp)
   10ff8:	80000015 	stw	zero,0(r16)
   10ffc:	00111f00 	call	111f0 <write>
   11000:	00ffffc4 	movi	r3,-1
   11004:	10c0031e 	bne	r2,r3,11014 <_write_r+0x44>
   11008:	80c00017 	ldw	r3,0(r16)
   1100c:	18000126 	beq	r3,zero,11014 <_write_r+0x44>
   11010:	88c00015 	stw	r3,0(r17)
   11014:	dfc00217 	ldw	ra,8(sp)
   11018:	dc400117 	ldw	r17,4(sp)
   1101c:	dc000017 	ldw	r16,0(sp)
   11020:	dec00304 	addi	sp,sp,12
   11024:	f800283a 	ret

00011028 <__divsi3>:
   11028:	20001b16 	blt	r4,zero,11098 <__divsi3+0x70>
   1102c:	000f883a 	mov	r7,zero
   11030:	28001616 	blt	r5,zero,1108c <__divsi3+0x64>
   11034:	200d883a 	mov	r6,r4
   11038:	29001a2e 	bgeu	r5,r4,110a4 <__divsi3+0x7c>
   1103c:	00800804 	movi	r2,32
   11040:	00c00044 	movi	r3,1
   11044:	00000106 	br	1104c <__divsi3+0x24>
   11048:	10000d26 	beq	r2,zero,11080 <__divsi3+0x58>
   1104c:	294b883a 	add	r5,r5,r5
   11050:	10bfffc4 	addi	r2,r2,-1
   11054:	18c7883a 	add	r3,r3,r3
   11058:	293ffb36 	bltu	r5,r4,11048 <_gp+0xffff6ba4>
   1105c:	0005883a 	mov	r2,zero
   11060:	18000726 	beq	r3,zero,11080 <__divsi3+0x58>
   11064:	0005883a 	mov	r2,zero
   11068:	31400236 	bltu	r6,r5,11074 <__divsi3+0x4c>
   1106c:	314dc83a 	sub	r6,r6,r5
   11070:	10c4b03a 	or	r2,r2,r3
   11074:	1806d07a 	srli	r3,r3,1
   11078:	280ad07a 	srli	r5,r5,1
   1107c:	183ffa1e 	bne	r3,zero,11068 <_gp+0xffff6bc4>
   11080:	38000126 	beq	r7,zero,11088 <__divsi3+0x60>
   11084:	0085c83a 	sub	r2,zero,r2
   11088:	f800283a 	ret
   1108c:	014bc83a 	sub	r5,zero,r5
   11090:	39c0005c 	xori	r7,r7,1
   11094:	003fe706 	br	11034 <_gp+0xffff6b90>
   11098:	0109c83a 	sub	r4,zero,r4
   1109c:	01c00044 	movi	r7,1
   110a0:	003fe306 	br	11030 <_gp+0xffff6b8c>
   110a4:	00c00044 	movi	r3,1
   110a8:	003fee06 	br	11064 <_gp+0xffff6bc0>

000110ac <__modsi3>:
   110ac:	20001716 	blt	r4,zero,1110c <__modsi3+0x60>
   110b0:	000f883a 	mov	r7,zero
   110b4:	2005883a 	mov	r2,r4
   110b8:	28001216 	blt	r5,zero,11104 <__modsi3+0x58>
   110bc:	2900162e 	bgeu	r5,r4,11118 <__modsi3+0x6c>
   110c0:	01800804 	movi	r6,32
   110c4:	00c00044 	movi	r3,1
   110c8:	00000106 	br	110d0 <__modsi3+0x24>
   110cc:	30000a26 	beq	r6,zero,110f8 <__modsi3+0x4c>
   110d0:	294b883a 	add	r5,r5,r5
   110d4:	31bfffc4 	addi	r6,r6,-1
   110d8:	18c7883a 	add	r3,r3,r3
   110dc:	293ffb36 	bltu	r5,r4,110cc <_gp+0xffff6c28>
   110e0:	18000526 	beq	r3,zero,110f8 <__modsi3+0x4c>
   110e4:	1806d07a 	srli	r3,r3,1
   110e8:	11400136 	bltu	r2,r5,110f0 <__modsi3+0x44>
   110ec:	1145c83a 	sub	r2,r2,r5
   110f0:	280ad07a 	srli	r5,r5,1
   110f4:	183ffb1e 	bne	r3,zero,110e4 <_gp+0xffff6c40>
   110f8:	38000126 	beq	r7,zero,11100 <__modsi3+0x54>
   110fc:	0085c83a 	sub	r2,zero,r2
   11100:	f800283a 	ret
   11104:	014bc83a 	sub	r5,zero,r5
   11108:	003fec06 	br	110bc <_gp+0xffff6c18>
   1110c:	0109c83a 	sub	r4,zero,r4
   11110:	01c00044 	movi	r7,1
   11114:	003fe706 	br	110b4 <_gp+0xffff6c10>
   11118:	00c00044 	movi	r3,1
   1111c:	003ff106 	br	110e4 <_gp+0xffff6c40>

00011120 <__udivsi3>:
   11120:	200d883a 	mov	r6,r4
   11124:	2900152e 	bgeu	r5,r4,1117c <__udivsi3+0x5c>
   11128:	28001416 	blt	r5,zero,1117c <__udivsi3+0x5c>
   1112c:	00800804 	movi	r2,32
   11130:	00c00044 	movi	r3,1
   11134:	00000206 	br	11140 <__udivsi3+0x20>
   11138:	10000e26 	beq	r2,zero,11174 <__udivsi3+0x54>
   1113c:	28000516 	blt	r5,zero,11154 <__udivsi3+0x34>
   11140:	294b883a 	add	r5,r5,r5
   11144:	10bfffc4 	addi	r2,r2,-1
   11148:	18c7883a 	add	r3,r3,r3
   1114c:	293ffa36 	bltu	r5,r4,11138 <_gp+0xffff6c94>
   11150:	18000826 	beq	r3,zero,11174 <__udivsi3+0x54>
   11154:	0005883a 	mov	r2,zero
   11158:	31400236 	bltu	r6,r5,11164 <__udivsi3+0x44>
   1115c:	314dc83a 	sub	r6,r6,r5
   11160:	10c4b03a 	or	r2,r2,r3
   11164:	1806d07a 	srli	r3,r3,1
   11168:	280ad07a 	srli	r5,r5,1
   1116c:	183ffa1e 	bne	r3,zero,11158 <_gp+0xffff6cb4>
   11170:	f800283a 	ret
   11174:	0005883a 	mov	r2,zero
   11178:	f800283a 	ret
   1117c:	00c00044 	movi	r3,1
   11180:	003ff406 	br	11154 <_gp+0xffff6cb0>

00011184 <__umodsi3>:
   11184:	2005883a 	mov	r2,r4
   11188:	2900122e 	bgeu	r5,r4,111d4 <__umodsi3+0x50>
   1118c:	28001116 	blt	r5,zero,111d4 <__umodsi3+0x50>
   11190:	01800804 	movi	r6,32
   11194:	00c00044 	movi	r3,1
   11198:	00000206 	br	111a4 <__umodsi3+0x20>
   1119c:	30000c26 	beq	r6,zero,111d0 <__umodsi3+0x4c>
   111a0:	28000516 	blt	r5,zero,111b8 <__umodsi3+0x34>
   111a4:	294b883a 	add	r5,r5,r5
   111a8:	31bfffc4 	addi	r6,r6,-1
   111ac:	18c7883a 	add	r3,r3,r3
   111b0:	293ffa36 	bltu	r5,r4,1119c <_gp+0xffff6cf8>
   111b4:	18000626 	beq	r3,zero,111d0 <__umodsi3+0x4c>
   111b8:	1806d07a 	srli	r3,r3,1
   111bc:	11400136 	bltu	r2,r5,111c4 <__umodsi3+0x40>
   111c0:	1145c83a 	sub	r2,r2,r5
   111c4:	280ad07a 	srli	r5,r5,1
   111c8:	183ffb1e 	bne	r3,zero,111b8 <_gp+0xffff6d14>
   111cc:	f800283a 	ret
   111d0:	f800283a 	ret
   111d4:	00c00044 	movi	r3,1
   111d8:	003ff706 	br	111b8 <_gp+0xffff6d14>

000111dc <alt_get_errno>:
   111dc:	d0a00617 	ldw	r2,-32744(gp)
   111e0:	10000126 	beq	r2,zero,111e8 <alt_get_errno+0xc>
   111e4:	1000683a 	jmp	r2
}
   111e8:	d0a48404 	addi	r2,gp,-28144
   111ec:	f800283a 	ret

000111f0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   111f0:	defffa04 	addi	sp,sp,-24
   111f4:	dfc00515 	stw	ra,20(sp)
   111f8:	dd000415 	stw	r20,16(sp)
   111fc:	dcc00315 	stw	r19,12(sp)
   11200:	dc800215 	stw	r18,8(sp)
   11204:	dc400115 	stw	r17,4(sp)
   11208:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1120c:	20002016 	blt	r4,zero,11290 <write+0xa0>
   11210:	2827883a 	mov	r19,r5
   11214:	04000074 	movhi	r16,1
   11218:	01400304 	movi	r5,12
   1121c:	2025883a 	mov	r18,r4
   11220:	3029883a 	mov	r20,r6
   11224:	8408db04 	addi	r16,r16,9068
   11228:	00102dc0 	call	102dc <__mulsi3>
   1122c:	80a3883a 	add	r17,r16,r2
  
  if (fd)
   11230:	88001726 	beq	r17,zero,11290 <write+0xa0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   11234:	88800217 	ldw	r2,8(r17)
   11238:	108000cc 	andi	r2,r2,3
   1123c:	10001126 	beq	r2,zero,11284 <write+0x94>
   11240:	01400304 	movi	r5,12
   11244:	9009883a 	mov	r4,r18
   11248:	00102dc0 	call	102dc <__mulsi3>
   1124c:	8085883a 	add	r2,r16,r2
   11250:	10800017 	ldw	r2,0(r2)
   11254:	10800617 	ldw	r2,24(r2)
   11258:	10000a26 	beq	r2,zero,11284 <write+0x94>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1125c:	a00d883a 	mov	r6,r20
   11260:	980b883a 	mov	r5,r19
   11264:	8809883a 	mov	r4,r17
   11268:	103ee83a 	callr	r2
   1126c:	1021883a 	mov	r16,r2
   11270:	10000b0e 	bge	r2,zero,112a0 <write+0xb0>
      {
        ALT_ERRNO = -rval;
   11274:	00111dc0 	call	111dc <alt_get_errno>
   11278:	0421c83a 	sub	r16,zero,r16
   1127c:	14000015 	stw	r16,0(r2)
   11280:	00000606 	br	1129c <write+0xac>
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
   11284:	00111dc0 	call	111dc <alt_get_errno>
   11288:	00c00344 	movi	r3,13
   1128c:	00000206 	br	11298 <write+0xa8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   11290:	00111dc0 	call	111dc <alt_get_errno>
   11294:	00c01444 	movi	r3,81
   11298:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   1129c:	043fffc4 	movi	r16,-1
}
   112a0:	8005883a 	mov	r2,r16
   112a4:	dfc00517 	ldw	ra,20(sp)
   112a8:	dd000417 	ldw	r20,16(sp)
   112ac:	dcc00317 	ldw	r19,12(sp)
   112b0:	dc800217 	ldw	r18,8(sp)
   112b4:	dc400117 	ldw	r17,4(sp)
   112b8:	dc000017 	ldw	r16,0(sp)
   112bc:	dec00604 	addi	sp,sp,24
   112c0:	f800283a 	ret
